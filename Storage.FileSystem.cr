  @[Link("Storage.FileSystem")]
  lib LibStorageFileSystem
    CLFS_FLAG_REENTRANT_FILE_SYSTEM = 8
CLFS_FLAG_NON_REENTRANT_FILTER = 16
CLFS_FLAG_REENTRANT_FILTER = 32
CLFS_FLAG_IGNORE_SHARE_ACCESS = 64
CLFS_FLAG_READ_IN_PROGRESS = 128
CLFS_FLAG_MINIFILTER_LEVEL = 256
CLFS_FLAG_HIDDEN_SYSTEM_LOG = 512
CLFS_MARSHALLING_FLAG_NONE = 0
CLFS_MARSHALLING_FLAG_DISABLE_BUFF_INIT = 1
CLFS_FLAG_FILTER_INTERMEDIATE_LEVEL = 16
CLFS_FLAG_FILTER_TOP_LEVEL = 32
TRANSACTION_MANAGER_VOLATILE = 1
TRANSACTION_MANAGER_COMMIT_DEFAULT = 0
TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME = 2
TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES = 4
TRANSACTION_MANAGER_COMMIT_LOWEST = 8
TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY = 16
TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS = 32
TRANSACTION_MANAGER_MAXIMUM_OPTION = 63
TRANSACTION_DO_NOT_PROMOTE = 1
TRANSACTION_MAXIMUM_OPTION = 1
RESOURCE_MANAGER_VOLATILE = 1
RESOURCE_MANAGER_COMMUNICATION = 2
RESOURCE_MANAGER_MAXIMUM_OPTION = 3
CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY = 1
CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO = 2
CRM_PROTOCOL_MAXIMUM_OPTION = 3
ENLISTMENT_SUPERIOR = 1
ENLISTMENT_MAXIMUM_OPTION = 1
TRANSACTION_NOTIFY_MASK = 1073741823
TRANSACTION_NOTIFY_PREPREPARE = 1
TRANSACTION_NOTIFY_PREPARE = 2
TRANSACTION_NOTIFY_COMMIT = 4
TRANSACTION_NOTIFY_ROLLBACK = 8
TRANSACTION_NOTIFY_PREPREPARE_COMPLETE = 16
TRANSACTION_NOTIFY_PREPARE_COMPLETE = 32
TRANSACTION_NOTIFY_COMMIT_COMPLETE = 64
TRANSACTION_NOTIFY_ROLLBACK_COMPLETE = 128
TRANSACTION_NOTIFY_RECOVER = 256
TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT = 512
TRANSACTION_NOTIFY_DELEGATE_COMMIT = 1024
TRANSACTION_NOTIFY_RECOVER_QUERY = 2048
TRANSACTION_NOTIFY_ENLIST_PREPREPARE = 4096
TRANSACTION_NOTIFY_LAST_RECOVER = 8192
TRANSACTION_NOTIFY_INDOUBT = 16384
TRANSACTION_NOTIFY_PROPAGATE_PULL = 32768
TRANSACTION_NOTIFY_PROPAGATE_PUSH = 65536
TRANSACTION_NOTIFY_MARSHAL = 131072
TRANSACTION_NOTIFY_ENLIST_MASK = 262144
TRANSACTION_NOTIFY_RM_DISCONNECTED = 16777216
TRANSACTION_NOTIFY_TM_ONLINE = 33554432
TRANSACTION_NOTIFY_COMMIT_REQUEST = 67108864
TRANSACTION_NOTIFY_PROMOTE = 134217728
TRANSACTION_NOTIFY_PROMOTE_NEW = 268435456
TRANSACTION_NOTIFY_REQUEST_OUTCOME = 536870912
TRANSACTION_NOTIFY_COMMIT_FINALIZE = 1073741824
TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED = 1
KTM_MARSHAL_BLOB_VERSION_MAJOR = 1
KTM_MARSHAL_BLOB_VERSION_MINOR = 1
MAX_TRANSACTION_DESCRIPTION_LENGTH = 64
MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH = 64
IOCTL_VOLUME_BASE = 86
IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS = 5636096
IOCTL_VOLUME_ONLINE = 5685256
IOCTL_VOLUME_OFFLINE = 5685260
IOCTL_VOLUME_IS_CLUSTERED = 5636144
IOCTL_VOLUME_GET_GPT_ATTRIBUTES = 5636152
IOCTL_VOLUME_SUPPORTS_ONLINE_OFFLINE = 5636100
IOCTL_VOLUME_IS_OFFLINE = 5636112
IOCTL_VOLUME_IS_IO_CAPABLE = 5636116
IOCTL_VOLUME_QUERY_FAILOVER_SET = 5636120
IOCTL_VOLUME_QUERY_VOLUME_NUMBER = 5636124
IOCTL_VOLUME_LOGICAL_TO_PHYSICAL = 5636128
IOCTL_VOLUME_PHYSICAL_TO_LOGICAL = 5636132
IOCTL_VOLUME_IS_PARTITION = 5636136
IOCTL_VOLUME_READ_PLEX = 5652526
IOCTL_VOLUME_SET_GPT_ATTRIBUTES = 5636148
IOCTL_VOLUME_GET_BC_PROPERTIES = 5652540
IOCTL_VOLUME_ALLOCATE_BC_STREAM = 5685312
IOCTL_VOLUME_FREE_BC_STREAM = 5685316
IOCTL_VOLUME_BC_VERSION = 1
IOCTL_VOLUME_IS_DYNAMIC = 5636168
IOCTL_VOLUME_PREPARE_FOR_CRITICAL_IO = 5685324
IOCTL_VOLUME_QUERY_ALLOCATION_HINT = 5652562
IOCTL_VOLUME_UPDATE_PROPERTIES = 5636180
IOCTL_VOLUME_QUERY_MINIMUM_SHRINK_SIZE = 5652568
IOCTL_VOLUME_PREPARE_FOR_SHRINK = 5685340
IOCTL_VOLUME_IS_CSV = 5636192
IOCTL_VOLUME_POST_ONLINE = 5685348
IOCTL_VOLUME_GET_CSVBLOCKCACHE_CALLBACK = 5685352
CSV_BLOCK_CACHE_CALLBACK_VERSION = 1
CSV_BLOCK_AND_FILE_CACHE_CALLBACK_VERSION = 2
PARTITION_BASIC_DATA_GUID = "ebd0a0a2-b9e5-4433-87c0-68b6b72699c7"
PARTITION_BSP_GUID = "57434f53-4df9-45b9-8e9e-2370f006457c"
PARTITION_CLUSTER_GUID = "db97dba9-0840-4bae-97f0-ffb9a327c7e1"
PARTITION_DPP_GUID = "57434f53-94cb-43f0-a533-d73c10cfa57d"
PARTITION_ENTRY_UNUSED_GUID = "00000000-0000-0000-0000-000000000000"
PARTITION_LDM_DATA_GUID = "af9b60a0-1431-4f62-bc68-3311714a69ad"
PARTITION_LDM_METADATA_GUID = "5808c8aa-7e8f-42e0-85d2-e1e90434cfb3"
PARTITION_LEGACY_BL_GUID = "424ca0e2-7cb2-4fb9-8143-c52a99398bc6"
PARTITION_LEGACY_BL_GUID_BACKUP = "424c3e6c-d79f-49cb-935d-36d71467a288"
PARTITION_MAIN_OS_GUID = "57434f53-8f45-405e-8a23-186d8a4330d3"
PARTITION_MSFT_RECOVERY_GUID = "de94bba4-06d1-4d40-a16a-bfd50179d6ac"
PARTITION_MSFT_RESERVED_GUID = "e3c9e316-0b5c-4db8-817d-f92df00215ae"
PARTITION_MSFT_SNAPSHOT_GUID = "caddebf1-4400-4de8-b103-12117dcf3ccf"
PARTITION_OS_DATA_GUID = "57434f53-23f2-44d5-a830-67bbdaa609f9"
PARTITION_PATCH_GUID = "8967a686-96aa-6aa8-9589-a84256541090"
PARTITION_PRE_INSTALLED_GUID = "57434f53-7fe0-4196-9b42-427b51643484"
PARTITION_SERVICING_FILES_GUID = "57434f53-432e-4014-ae4c-8deaa9c0006a"
PARTITION_SERVICING_METADATA_GUID = "57434f53-c691-4a05-bb4e-703dafd229ce"
PARTITION_SERVICING_RESERVE_GUID = "57434f53-4b81-460b-a319-ffb6fe136d14"
PARTITION_SERVICING_STAGING_ROOT_GUID = "57434f53-e84d-4e84-aaf3-ecbbbd04b9df"
PARTITION_SPACES_GUID = "e75caf8f-f680-4cee-afa3-b001e56efc2d"
PARTITION_SPACES_DATA_GUID = "e7addcb4-dc34-4539-9a76-ebbd07be6f7e"
PARTITION_SYSTEM_GUID = "c12a7328-f81f-11d2-ba4b-00a0c93ec93b"
PARTITION_WINDOWS_SYSTEM_GUID = "57434f53-e3e3-4631-a5c5-26d2243873aa"
FT_TYPES_DEFINITION_ = 1
CLFS_MGMT_POLICY_VERSION = 1
LOG_POLICY_OVERWRITE = 1
LOG_POLICY_PERSIST = 2
CLFS_MGMT_CLIENT_REGISTRATION_VERSION = 1
CLSID_DiskQuotaControl = "7988b571-ec89-11cf-9c00-00aa00a14f56"
DISKQUOTA_STATE_DISABLED = 0
DISKQUOTA_STATE_TRACK = 1
DISKQUOTA_STATE_ENFORCE = 2
DISKQUOTA_STATE_MASK = 3
DISKQUOTA_FILESTATE_INCOMPLETE = 256
DISKQUOTA_FILESTATE_REBUILDING = 512
DISKQUOTA_FILESTATE_MASK = 768
DISKQUOTA_LOGFLAG_USER_THRESHOLD = 1
DISKQUOTA_LOGFLAG_USER_LIMIT = 2
DISKQUOTA_USER_ACCOUNT_RESOLVED = 0
DISKQUOTA_USER_ACCOUNT_UNAVAILABLE = 1
DISKQUOTA_USER_ACCOUNT_DELETED = 2
DISKQUOTA_USER_ACCOUNT_INVALID = 3
DISKQUOTA_USER_ACCOUNT_UNKNOWN = 4
DISKQUOTA_USER_ACCOUNT_UNRESOLVED = 5
INVALID_SET_FILE_POINTER = 4294967295
INVALID_FILE_ATTRIBUTES = 4294967295
SHARE_NETNAME_PARMNUM = 1
SHARE_TYPE_PARMNUM = 3
SHARE_REMARK_PARMNUM = 4
SHARE_PERMISSIONS_PARMNUM = 5
SHARE_MAX_USES_PARMNUM = 6
SHARE_CURRENT_USES_PARMNUM = 7
SHARE_PATH_PARMNUM = 8
SHARE_PASSWD_PARMNUM = 9
SHARE_FILE_SD_PARMNUM = 501
SHARE_SERVER_PARMNUM = 503
SHI1_NUM_ELEMENTS = 4
SHI2_NUM_ELEMENTS = 10
STYPE_RESERVED1 = 16777216
STYPE_RESERVED2 = 33554432
STYPE_RESERVED3 = 67108864
STYPE_RESERVED4 = 134217728
STYPE_RESERVED5 = 1048576
STYPE_RESERVED_ALL = 1073741568
SHI_USES_UNLIMITED = 4294967295
SHI1005_FLAGS_DFS = 1
SHI1005_FLAGS_DFS_ROOT = 2
CSC_MASK_EXT = 8240
CSC_MASK = 48
CSC_CACHE_MANUAL_REINT = 0
CSC_CACHE_AUTO_REINT = 16
CSC_CACHE_VDO = 32
CSC_CACHE_NONE = 48
SHI1005_FLAGS_RESTRICT_EXCLUSIVE_OPENS = 256
SHI1005_FLAGS_FORCE_SHARED_DELETE = 512
SHI1005_FLAGS_ALLOW_NAMESPACE_CACHING = 1024
SHI1005_FLAGS_ACCESS_BASED_DIRECTORY_ENUM = 2048
SHI1005_FLAGS_FORCE_LEVELII_OPLOCK = 4096
SHI1005_FLAGS_ENABLE_HASH = 8192
SHI1005_FLAGS_ENABLE_CA = 16384
SHI1005_FLAGS_ENCRYPT_DATA = 32768
SHI1005_FLAGS_RESERVED = 65536
SHI1005_FLAGS_DISABLE_CLIENT_BUFFERING = 131072
SHI1005_FLAGS_IDENTITY_REMOTING = 262144
SHI1005_FLAGS_CLUSTER_MANAGED = 524288
SHI1005_FLAGS_COMPRESS_DATA = 1048576
SESI1_NUM_ELEMENTS = 8
SESI2_NUM_ELEMENTS = 9
STATSOPT_CLR = 1
LZERROR_BADINHANDLE = -1
LZERROR_BADOUTHANDLE = -2
LZERROR_READ = -3
LZERROR_WRITE = -4
LZERROR_GLOBALLOC = -5
LZERROR_GLOBLOCK = -6
LZERROR_BADVALUE = -7
LZERROR_UNKNOWNALG = -8
NTMS_OBJECTNAME_LENGTH = 64
NTMS_DESCRIPTION_LENGTH = 127
NTMS_DEVICENAME_LENGTH = 64
NTMS_SERIALNUMBER_LENGTH = 32
NTMS_REVISION_LENGTH = 32
NTMS_BARCODE_LENGTH = 64
NTMS_SEQUENCE_LENGTH = 32
NTMS_VENDORNAME_LENGTH = 128
NTMS_PRODUCTNAME_LENGTH = 128
NTMS_USERNAME_LENGTH = 64
NTMS_APPLICATIONNAME_LENGTH = 64
NTMS_COMPUTERNAME_LENGTH = 64
NTMS_I1_MESSAGE_LENGTH = 127
NTMS_MESSAGE_LENGTH = 256
NTMS_POOLHIERARCHY_LENGTH = 512
NTMS_OMIDLABELID_LENGTH = 255
NTMS_OMIDLABELTYPE_LENGTH = 64
NTMS_OMIDLABELINFO_LENGTH = 256
NTMS_MAXATTR_LENGTH = 65536
NTMS_MAXATTR_NAMELEN = 32
NTMSMLI_MAXTYPE = 64
NTMSMLI_MAXIDSIZE = 256
NTMSMLI_MAXAPPDESCR = 256
TXF_LOG_RECORD_GENERIC_TYPE_COMMIT = 1
TXF_LOG_RECORD_GENERIC_TYPE_ABORT = 2
TXF_LOG_RECORD_GENERIC_TYPE_PREPARE = 4
TXF_LOG_RECORD_GENERIC_TYPE_DATA = 8
VS_VERSION_INFO = 1
VS_USER_DEFINED = 100
VS_FFI_SIGNATURE = -17890115
VS_FFI_STRUCVERSION = 65536
VS_FFI_FILEFLAGSMASK = 63
WINEFS_SETUSERKEY_SET_CAPABILITIES = 1
EFS_COMPATIBILITY_VERSION_NCRYPT_PROTECTOR = 5
EFS_COMPATIBILITY_VERSION_PFILE_PROTECTOR = 6
EFS_SUBVER_UNKNOWN = 0
EFS_EFS_SUBVER_EFS_CERT = 1
EFS_PFILE_SUBVER_RMS = 2
EFS_PFILE_SUBVER_APPX = 3
MAX_SID_SIZE = 256
EFS_METADATA_ADD_USER = 1
EFS_METADATA_REMOVE_USER = 2
EFS_METADATA_REPLACE_USER = 4
EFS_METADATA_GENERAL_OP = 8
WOF_PROVIDER_WIM = 1
WOF_PROVIDER_FILE = 2
WIM_PROVIDER_HASH_SIZE = 20
WIM_BOOT_OS_WIM = 1
WIM_BOOT_NOT_OS_WIM = 0
WIM_ENTRY_FLAG_NOT_ACTIVE = 1
WIM_ENTRY_FLAG_SUSPENDED = 2
WIM_EXTERNAL_FILE_INFO_FLAG_NOT_ACTIVE = 1
WIM_EXTERNAL_FILE_INFO_FLAG_SUSPENDED = 2
FILE_PROVIDER_COMPRESSION_XPRESS4K = 0
FILE_PROVIDER_COMPRESSION_LZX = 1
FILE_PROVIDER_COMPRESSION_XPRESS8K = 2
FILE_PROVIDER_COMPRESSION_XPRESS16K = 3
ClfsNullRecord = 0
ClfsDataRecord = 1
ClfsRestartRecord = 2
ClfsClientRecord = 3
ClsContainerInitializing = 1
ClsContainerInactive = 2
ClsContainerActive = 4
ClsContainerActivePendingDelete = 8
ClsContainerPendingArchive = 16
ClsContainerPendingArchiveAndDelete = 32
ClfsContainerInitializing = 1
ClfsContainerInactive = 2
ClfsContainerActive = 4
ClfsContainerActivePendingDelete = 8
ClfsContainerPendingArchive = 16
ClfsContainerPendingArchiveAndDelete = 32
CLFS_MAX_CONTAINER_INFO = 256
CLFS_SCAN_INIT = 1
CLFS_SCAN_FORWARD = 2
CLFS_SCAN_BACKWARD = 4
CLFS_SCAN_CLOSE = 8
CLFS_SCAN_INITIALIZED = 16
CLFS_SCAN_BUFFERED = 32
enum FIND_FIRST_EX_FLAGS : UInt32
FIND_FIRST_EX_CASE_SENSITIVE = 1

FIND_FIRST_EX_LARGE_FETCH = 2

FIND_FIRST_EX_ON_DISK_ENTRIES_ONLY = 4

end
enum DEFINE_DOS_DEVICE_FLAGS : UInt32
DDD_RAW_TARGET_PATH = 1

DDD_REMOVE_DEFINITION = 2

DDD_EXACT_MATCH_ON_REMOVE = 4

DDD_NO_BROADCAST_SYSTEM = 8

DDD_LUID_BROADCAST_DRIVE = 16

end
enum FILE_FLAGS_AND_ATTRIBUTES : UInt32
FILE_ATTRIBUTE_READONLY = 1

FILE_ATTRIBUTE_HIDDEN = 2

FILE_ATTRIBUTE_SYSTEM = 4

FILE_ATTRIBUTE_DIRECTORY = 16

FILE_ATTRIBUTE_ARCHIVE = 32

FILE_ATTRIBUTE_DEVICE = 64

FILE_ATTRIBUTE_NORMAL = 128

FILE_ATTRIBUTE_TEMPORARY = 256

FILE_ATTRIBUTE_SPARSE_FILE = 512

FILE_ATTRIBUTE_REPARSE_POINT = 1024

FILE_ATTRIBUTE_COMPRESSED = 2048

FILE_ATTRIBUTE_OFFLINE = 4096

FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192

FILE_ATTRIBUTE_ENCRYPTED = 16384

FILE_ATTRIBUTE_INTEGRITY_STREAM = 32768

FILE_ATTRIBUTE_VIRTUAL = 65536

FILE_ATTRIBUTE_NO_SCRUB_DATA = 131072

FILE_ATTRIBUTE_EA = 262144

FILE_ATTRIBUTE_PINNED = 524288

FILE_ATTRIBUTE_UNPINNED = 1048576

FILE_ATTRIBUTE_RECALL_ON_OPEN = 262144

FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = 4194304

FILE_FLAG_WRITE_THROUGH = 2147483648

FILE_FLAG_OVERLAPPED = 1073741824

FILE_FLAG_NO_BUFFERING = 536870912

FILE_FLAG_RANDOM_ACCESS = 268435456

FILE_FLAG_SEQUENTIAL_SCAN = 134217728

FILE_FLAG_DELETE_ON_CLOSE = 67108864

FILE_FLAG_BACKUP_SEMANTICS = 33554432

FILE_FLAG_POSIX_SEMANTICS = 16777216

FILE_FLAG_SESSION_AWARE = 8388608

FILE_FLAG_OPEN_REPARSE_POINT = 2097152

FILE_FLAG_OPEN_NO_RECALL = 1048576

FILE_FLAG_FIRST_PIPE_INSTANCE = 524288

PIPE_ACCESS_DUPLEX = 3

PIPE_ACCESS_INBOUND = 1

PIPE_ACCESS_OUTBOUND = 2

SECURITY_ANONYMOUS = 0

SECURITY_IDENTIFICATION = 65536

SECURITY_IMPERSONATION = 131072

SECURITY_DELEGATION = 196608

SECURITY_CONTEXT_TRACKING = 262144

SECURITY_EFFECTIVE_ONLY = 524288

SECURITY_SQOS_PRESENT = 1048576

SECURITY_VALID_SQOS_FLAGS = 2031616

end
enum FILE_ACCESS_FLAGS : UInt32
FILE_READ_DATA = 1

FILE_LIST_DIRECTORY = 1

FILE_WRITE_DATA = 2

FILE_ADD_FILE = 2

FILE_APPEND_DATA = 4

FILE_ADD_SUBDIRECTORY = 4

FILE_CREATE_PIPE_INSTANCE = 4

FILE_READ_EA = 8

FILE_WRITE_EA = 16

FILE_EXECUTE = 32

FILE_TRAVERSE = 32

FILE_DELETE_CHILD = 64

FILE_READ_ATTRIBUTES = 128

FILE_WRITE_ATTRIBUTES = 256

READ_CONTROL = 131072

SYNCHRONIZE = 1048576

STANDARD_RIGHTS_REQUIRED = 983040

STANDARD_RIGHTS_READ = 131072

STANDARD_RIGHTS_WRITE = 131072

STANDARD_RIGHTS_EXECUTE = 131072

STANDARD_RIGHTS_ALL = 2031616

SPECIFIC_RIGHTS_ALL = 65535

FILE_ALL_ACCESS = 2032127

FILE_GENERIC_READ = 1179785

FILE_GENERIC_WRITE = 1179926

FILE_GENERIC_EXECUTE = 1179808

end
enum GET_FILE_VERSION_INFO_FLAGS : UInt32
FILE_VER_GET_LOCALISED = 1

FILE_VER_GET_NEUTRAL = 2

FILE_VER_GET_PREFETCHED = 4

end
enum VER_FIND_FILE_FLAGS : UInt32
VFFF_ISSHAREDFILE = 1

end
enum VER_FIND_FILE_STATUS : UInt32
VFF_CURNEDEST = 1

VFF_FILEINUSE = 2

VFF_BUFFTOOSMALL = 4

end
enum VER_INSTALL_FILE_FLAGS : UInt32
VIFF_FORCEINSTALL = 1

VIFF_DONTDELETEOLD = 2

end
enum VER_INSTALL_FILE_STATUS : UInt32
VIF_TEMPFILE = 1

VIF_MISMATCH = 2

VIF_SRCOLD = 4

VIF_DIFFLANG = 8

VIF_DIFFCODEPG = 16

VIF_DIFFTYPE = 32

VIF_WRITEPROT = 64

VIF_FILEINUSE = 128

VIF_OUTOFSPACE = 256

VIF_ACCESSVIOLATION = 512

VIF_SHARINGVIOLATION = 1024

VIF_CANNOTCREATE = 2048

VIF_CANNOTDELETE = 4096

VIF_CANNOTRENAME = 8192

VIF_CANNOTDELETECUR = 16384

VIF_OUTOFMEMORY = 32768

VIF_CANNOTREADSRC = 65536

VIF_CANNOTREADDST = 131072

VIF_BUFFTOOSMALL = 262144

VIF_CANNOTLOADLZ32 = 524288

VIF_CANNOTLOADCABINET = 1048576

end
enum VS_FIXEDFILEINFO_FILE_FLAGS : UInt32
VS_FF_DEBUG = 1

VS_FF_PRERELEASE = 2

VS_FF_PATCHED = 4

VS_FF_PRIVATEBUILD = 8

VS_FF_INFOINFERRED = 16

VS_FF_SPECIALBUILD = 32

end
enum VS_FIXEDFILEINFO_FILE_OS : Int32
VOS_UNKNOWN = 0

VOS_DOS = 65536

VOS_OS216 = 131072

VOS_OS232 = 196608

VOS_NT = 262144

VOS_WINCE = 327680

VOS__BASE = 0

VOS__WINDOWS16 = 1

VOS__PM16 = 2

VOS__PM32 = 3

VOS__WINDOWS32 = 4

VOS_DOS_WINDOWS16 = 65537

VOS_DOS_WINDOWS32 = 65540

VOS_OS216_PM16 = 131074

VOS_OS232_PM32 = 196611

VOS_NT_WINDOWS32 = 262148

end
enum VS_FIXEDFILEINFO_FILE_TYPE : Int32
VFT_UNKNOWN = 0

VFT_APP = 1

VFT_DLL = 2

VFT_DRV = 3

VFT_FONT = 4

VFT_VXD = 5

VFT_STATIC_LIB = 7

end
enum VS_FIXEDFILEINFO_FILE_SUBTYPE : Int32
VFT2_UNKNOWN = 0

VFT2_DRV_PRINTER = 1

VFT2_DRV_KEYBOARD = 2

VFT2_DRV_LANGUAGE = 3

VFT2_DRV_DISPLAY = 4

VFT2_DRV_MOUSE = 5

VFT2_DRV_NETWORK = 6

VFT2_DRV_SYSTEM = 7

VFT2_DRV_INSTALLABLE = 8

VFT2_DRV_SOUND = 9

VFT2_DRV_COMM = 10

VFT2_DRV_INPUTMETHOD = 11

VFT2_DRV_VERSIONED_PRINTER = 12

VFT2_FONT_RASTER = 1

VFT2_FONT_VECTOR = 2

VFT2_FONT_TRUETYPE = 3

end
enum FILE_CREATION_DISPOSITION : UInt32
CREATE_NEW = 1

CREATE_ALWAYS = 2

OPEN_EXISTING = 3

OPEN_ALWAYS = 4

TRUNCATE_EXISTING = 5

end
enum FILE_SHARE_MODE : UInt32
FILE_SHARE_NONE = 0

FILE_SHARE_DELETE = 4

FILE_SHARE_READ = 1

FILE_SHARE_WRITE = 2

end
enum SHARE_TYPE : UInt32
STYPE_DISKTREE = 0

STYPE_PRINTQ = 1

STYPE_DEVICE = 2

STYPE_IPC = 3

STYPE_SPECIAL = 2147483648

STYPE_TEMPORARY = 1073741824

STYPE_MASK = 255

end
enum CLFS_FLAG : UInt32
CLFS_FLAG_FORCE_APPEND = 1

CLFS_FLAG_FORCE_FLUSH = 2

CLFS_FLAG_NO_FLAGS = 0

CLFS_FLAG_USE_RESERVATION = 4

end
enum SET_FILE_POINTER_MOVE_METHOD : UInt32
FILE_BEGIN = 0

FILE_CURRENT = 1

FILE_END = 2

end
enum MOVE_FILE_FLAGS : UInt32
MOVEFILE_COPY_ALLOWED = 2

MOVEFILE_CREATE_HARDLINK = 16

MOVEFILE_DELAY_UNTIL_REBOOT = 4

MOVEFILE_REPLACE_EXISTING = 1

MOVEFILE_WRITE_THROUGH = 8

MOVEFILE_FAIL_IF_NOT_TRACKABLE = 32

end
enum FILE_NAME : UInt32
FILE_NAME_NORMALIZED = 0

FILE_NAME_OPENED = 8

end
enum LZOPENFILE_STYLE : UInt32
OF_CANCEL = 2048

OF_CREATE = 4096

OF_DELETE = 512

OF_EXIST = 16384

OF_PARSE = 256

OF_PROMPT = 8192

OF_READ = 0

OF_READWRITE = 2

OF_REOPEN = 32768

OF_SHARE_DENY_NONE = 64

OF_SHARE_DENY_READ = 48

OF_SHARE_DENY_WRITE = 32

OF_SHARE_EXCLUSIVE = 16

OF_WRITE = 1

OF_SHARE_COMPAT = 0

OF_VERIFY = 1024

end
enum FILE_NOTIFY_CHANGE : UInt32
FILE_NOTIFY_CHANGE_FILE_NAME = 1

FILE_NOTIFY_CHANGE_DIR_NAME = 2

FILE_NOTIFY_CHANGE_ATTRIBUTES = 4

FILE_NOTIFY_CHANGE_SIZE = 8

FILE_NOTIFY_CHANGE_LAST_WRITE = 16

FILE_NOTIFY_CHANGE_LAST_ACCESS = 32

FILE_NOTIFY_CHANGE_CREATION = 64

FILE_NOTIFY_CHANGE_SECURITY = 256

end
enum TXFS_MINIVERSION : UInt32
TXFS_MINIVERSION_COMMITTED_VIEW = 0

TXFS_MINIVERSION_DIRTY_VIEW = 65535

TXFS_MINIVERSION_DEFAULT_VIEW = 65534

end
enum TAPE_POSITION_TYPE : Int32
TAPE_ABSOLUTE_POSITION = 0

TAPE_LOGICAL_POSITION = 1

end
enum CREATE_TAPE_PARTITION_METHOD : Int32
TAPE_FIXED_PARTITIONS = 0

TAPE_INITIATOR_PARTITIONS = 2

TAPE_SELECT_PARTITIONS = 1

end
enum REPLACE_FILE_FLAGS : UInt32
REPLACEFILE_WRITE_THROUGH = 1

REPLACEFILE_IGNORE_MERGE_ERRORS = 2

REPLACEFILE_IGNORE_ACL_ERRORS = 4

end
enum TAPEMARK_TYPE : Int32
TAPE_FILEMARKS = 1

TAPE_LONG_FILEMARKS = 3

TAPE_SETMARKS = 0

TAPE_SHORT_FILEMARKS = 2

end
enum DISKQUOTA_USERNAME_RESOLVE : UInt32
DISKQUOTA_USERNAME_RESOLVE_ASYNC = 2

DISKQUOTA_USERNAME_RESOLVE_NONE = 0

DISKQUOTA_USERNAME_RESOLVE_SYNC = 1

end
enum TAPE_POSITION_METHOD : Int32
TAPE_ABSOLUTE_BLOCK = 1

TAPE_LOGICAL_BLOCK = 2

TAPE_REWIND = 0

TAPE_SPACE_END_OF_DATA = 4

TAPE_SPACE_FILEMARKS = 6

TAPE_SPACE_RELATIVE_BLOCKS = 5

TAPE_SPACE_SEQUENTIAL_FMKS = 7

TAPE_SPACE_SEQUENTIAL_SMKS = 9

TAPE_SPACE_SETMARKS = 8

end
enum NT_CREATE_FILE_DISPOSITION : UInt32
FILE_SUPERSEDE = 0

FILE_CREATE = 2

FILE_OPEN = 1

FILE_OPEN_IF = 3

FILE_OVERWRITE = 4

FILE_OVERWRITE_IF = 5

end
enum TAPE_INFORMATION_TYPE : UInt32
SET_TAPE_DRIVE_INFORMATION = 1

SET_TAPE_MEDIA_INFORMATION = 0

end
enum NTMS_OMID_TYPE : UInt32
NTMS_OMID_TYPE_FILESYSTEM_INFO = 2

NTMS_OMID_TYPE_RAW_LABEL = 1

end
enum LOCK_FILE_FLAGS : UInt32
LOCKFILE_EXCLUSIVE_LOCK = 2

LOCKFILE_FAIL_IMMEDIATELY = 1

end
enum LPPROGRESS_ROUTINE_CALLBACK_REASON : UInt32
CALLBACK_CHUNK_FINISHED = 0

CALLBACK_STREAM_SWITCH = 1

end
enum PREPARE_TAPE_OPERATION : Int32
TAPE_FORMAT = 5

TAPE_LOAD = 0

TAPE_LOCK = 3

TAPE_TENSION = 2

TAPE_UNLOAD = 1

TAPE_UNLOCK = 4

end
enum GET_TAPE_DRIVE_PARAMETERS_OPERATION : UInt32
GET_TAPE_DRIVE_INFORMATION = 1

GET_TAPE_MEDIA_INFORMATION = 0

end
enum ERASE_TAPE_TYPE : Int32
TAPE_ERASE_LONG = 1

TAPE_ERASE_SHORT = 0

end
enum FILE_ACTION : UInt32
FILE_ACTION_ADDED = 1

FILE_ACTION_REMOVED = 2

FILE_ACTION_MODIFIED = 3

FILE_ACTION_RENAMED_OLD_NAME = 4

FILE_ACTION_RENAMED_NEW_NAME = 5

end
enum SHARE_INFO_PERMISSIONS : UInt32
ACCESS_READ = 1

ACCESS_WRITE = 2

ACCESS_CREATE = 4

ACCESS_EXEC = 8

ACCESS_DELETE = 16

ACCESS_ATRIB = 32

ACCESS_PERM = 64

ACCESS_ALL = 32768

end
enum FILE_DEVICE_TYPE : UInt32
FILE_DEVICE_CD_ROM = 2

FILE_DEVICE_DISK = 7

FILE_DEVICE_TAPE = 31

FILE_DEVICE_DVD = 51

end
enum SESSION_INFO_USER_FLAGS : UInt32
SESS_GUEST = 1

SESS_NOENCRYPTION = 2

end
enum WIN_STREAM_ID : UInt32
BACKUP_ALTERNATE_DATA = 4

BACKUP_DATA = 1

BACKUP_EA_DATA = 2

BACKUP_LINK = 5

BACKUP_OBJECT_ID = 7

BACKUP_PROPERTY_DATA = 6

BACKUP_REPARSE_DATA = 8

BACKUP_SECURITY_DATA = 3

BACKUP_SPARSE_BLOCK = 9

BACKUP_TXFS_DATA = 10

end
enum TXF_LOG_RECORD_TYPE : UInt16
TXF_LOG_RECORD_TYPE_AFFECTED_FILE = 4

TXF_LOG_RECORD_TYPE_TRUNCATE = 2

TXF_LOG_RECORD_TYPE_WRITE = 1

end
enum FILE_INFO_FLAGS_PERMISSIONS : UInt32
PERM_FILE_READ = 1

PERM_FILE_WRITE = 2

PERM_FILE_CREATE = 4

end
enum SYMBOLIC_LINK_FLAGS : UInt32
SYMBOLIC_LINK_FLAG_DIRECTORY = 1

SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE = 2

end
type FindFileHandle = LibC::Int*
type FindFileNameHandle = LibC::Int*
type FindStreamHandle = LibC::Int*
type FindChangeNotificationHandle = LibC::Int*
type FindVolumeHandle = LibC::Int*
type FindVolumeMointPointHandle = LibC::Int*
struct WIN32_FIND_DATAA
  dwFileAttributes : LibC::UInt32
  ftCreationTime : FILETIME
  ftLastAccessTime : FILETIME
  ftLastWriteTime : FILETIME
  nFileSizeHigh : LibC::UInt32
  nFileSizeLow : LibC::UInt32
  dwReserved0 : LibC::UInt32
  dwReserved1 : LibC::UInt32
  cFileName : Array(CHAR)
  cAlternateFileName : Array(CHAR)
end
struct WIN32_FIND_DATAW
  dwFileAttributes : LibC::UInt32
  ftCreationTime : FILETIME
  ftLastAccessTime : FILETIME
  ftLastWriteTime : FILETIME
  nFileSizeHigh : LibC::UInt32
  nFileSizeLow : LibC::UInt32
  dwReserved0 : LibC::UInt32
  dwReserved1 : LibC::UInt32
  cFileName : Array(LibC::Char)
  cAlternateFileName : Array(LibC::Char)
end
enum FINDEX_INFO_LEVELS : Int32
FindExInfoStandard = 0

FindExInfoBasic = 1

FindExInfoMaxInfoLevel = 2

end
enum FINDEX_SEARCH_OPS : Int32
FindExSearchNameMatch = 0

FindExSearchLimitToDirectories = 1

FindExSearchLimitToDevices = 2

FindExSearchMaxSearchOp = 3

end
enum READ_DIRECTORY_NOTIFY_INFORMATION_CLASS : Int32
ReadDirectoryNotifyInformation = 1

ReadDirectoryNotifyExtendedInformation = 2

end
enum GET_FILEEX_INFO_LEVELS : Int32
GetFileExInfoStandard = 0

GetFileExMaxInfoLevel = 1

end
enum FILE_INFO_BY_HANDLE_CLASS : Int32
FileBasicInfo = 0

FileStandardInfo = 1

FileNameInfo = 2

FileRenameInfo = 3

FileDispositionInfo = 4

FileAllocationInfo = 5

FileEndOfFileInfo = 6

FileStreamInfo = 7

FileCompressionInfo = 8

FileAttributeTagInfo = 9

FileIdBothDirectoryInfo = 10

FileIdBothDirectoryRestartInfo = 11

FileIoPriorityHintInfo = 12

FileRemoteProtocolInfo = 13

FileFullDirectoryInfo = 14

FileFullDirectoryRestartInfo = 15

FileStorageInfo = 16

FileAlignmentInfo = 17

FileIdInfo = 18

FileIdExtdDirectoryInfo = 19

FileIdExtdDirectoryRestartInfo = 20

FileDispositionInfoEx = 21

FileRenameInfoEx = 22

FileCaseSensitiveInfo = 23

FileNormalizedNameInfo = 24

MaximumFileInfoByHandleClass = 25

end
struct TRANSACTION_NOTIFICATION
  transactionKey : LibC::Void*
  transactionNotification : LibC::UInt32
  tmVirtualClock : LARGE_INTEGER
  argumentLength : LibC::UInt32
end
struct TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
  enlistmentId : LibC::Guid
  uOW : LibC::Guid
end
struct TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
  tmIdentity : LibC::Guid
  flags : LibC::UInt32
end
struct TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
  savepointId : LibC::UInt32
end
struct TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
  propagationCookie : LibC::UInt32
  uOW : LibC::Guid
  tmIdentity : LibC::Guid
  bufferLength : LibC::UInt32
end
struct TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
  marshalCookie : LibC::UInt32
  uOW : LibC::Guid
end
struct KCRM_MARSHAL_HEADER
  versionMajor : LibC::UInt32
  versionMinor : LibC::UInt32
  numProtocols : LibC::UInt32
  unused : LibC::UInt32
end
struct KCRM_TRANSACTION_BLOB
  uOW : LibC::Guid
  tmIdentity : LibC::Guid
  isolationLevel : LibC::UInt32
  isolationFlags : LibC::UInt32
  timeout : LibC::UInt32
  description : Array(LibC::Char)
end
struct KCRM_PROTOCOL_BLOB
  protocolId : LibC::Guid
  staticInfoLength : LibC::UInt32
  transactionIdInfoLength : LibC::UInt32
  unused1 : LibC::UInt32
  unused2 : LibC::UInt32
end
struct DISK_SPACE_INFORMATION
  actualTotalAllocationUnits : LibC::UInt64
  actualAvailableAllocationUnits : LibC::UInt64
  actualPoolUnavailableAllocationUnits : LibC::UInt64
  callerTotalAllocationUnits : LibC::UInt64
  callerAvailableAllocationUnits : LibC::UInt64
  callerPoolUnavailableAllocationUnits : LibC::UInt64
  usedAllocationUnits : LibC::UInt64
  totalReservedAllocationUnits : LibC::UInt64
  volumeStorageReserveAllocationUnits : LibC::UInt64
  availableCommittedAllocationUnits : LibC::UInt64
  poolAvailableAllocationUnits : LibC::UInt64
  sectorsPerAllocationUnit : LibC::UInt32
  bytesPerSector : LibC::UInt32
end
struct WIN32_FILE_ATTRIBUTE_DATA
  dwFileAttributes : LibC::UInt32
  ftCreationTime : FILETIME
  ftLastAccessTime : FILETIME
  ftLastWriteTime : FILETIME
  nFileSizeHigh : LibC::UInt32
  nFileSizeLow : LibC::UInt32
end
struct BY_HANDLE_FILE_INFORMATION
  dwFileAttributes : LibC::UInt32
  ftCreationTime : FILETIME
  ftLastAccessTime : FILETIME
  ftLastWriteTime : FILETIME
  dwVolumeSerialNumber : LibC::UInt32
  nFileSizeHigh : LibC::UInt32
  nFileSizeLow : LibC::UInt32
  nNumberOfLinks : LibC::UInt32
  nFileIndexHigh : LibC::UInt32
  nFileIndexLow : LibC::UInt32
end
struct CREATEFILE2_EXTENDED_PARAMETERS
  dwSize : LibC::UInt32
  dwFileAttributes : LibC::UInt32
  dwFileFlags : LibC::UInt32
  dwSecurityQosFlags : LibC::UInt32
  lpSecurityAttributes : SECURITY_ATTRIBUTES*
  hTemplateFile : HANDLE
end
enum STREAM_INFO_LEVELS : Int32
FindStreamInfoStandard = 0

FindStreamInfoMaxInfoLevel = 1

end
struct WIN32_FIND_STREAM_DATA
  streamSize : LARGE_INTEGER
  cStreamName : Array(LibC::Char)
end
struct VS_FIXEDFILEINFO
  dwSignature : LibC::UInt32
  dwStrucVersion : LibC::UInt32
  dwFileVersionMS : LibC::UInt32
  dwFileVersionLS : LibC::UInt32
  dwProductVersionMS : LibC::UInt32
  dwProductVersionLS : LibC::UInt32
  dwFileFlagsMask : LibC::UInt32
  dwFileFlags : VS_FIXEDFILEINFO_FILE_FLAGS
  dwFileOS : VS_FIXEDFILEINFO_FILE_OS
  dwFileType : VS_FIXEDFILEINFO_FILE_TYPE
  dwFileSubtype : VS_FIXEDFILEINFO_FILE_SUBTYPE
  dwFileDateMS : LibC::UInt32
  dwFileDateLS : LibC::UInt32
end
enum NtmsObjectsTypes : Int32
NTMS_UNKNOWN = 0

NTMS_OBJECT = 1

NTMS_CHANGER = 2

NTMS_CHANGER_TYPE = 3

NTMS_COMPUTER = 4

NTMS_DRIVE = 5

NTMS_DRIVE_TYPE = 6

NTMS_IEDOOR = 7

NTMS_IEPORT = 8

NTMS_LIBRARY = 9

NTMS_LIBREQUEST = 10

NTMS_LOGICAL_MEDIA = 11

NTMS_MEDIA_POOL = 12

NTMS_MEDIA_TYPE = 13

NTMS_PARTITION = 14

NTMS_PHYSICAL_MEDIA = 15

NTMS_STORAGESLOT = 16

NTMS_OPREQUEST = 17

NTMS_UI_DESTINATION = 18

NTMS_NUMBER_OF_OBJECT_TYPES = 19

end
struct NTMS_ASYNC_IO
  operationId : LibC::Guid
  eventId : LibC::Guid
  dwOperationType : LibC::UInt32
  dwResult : LibC::UInt32
  dwAsyncState : LibC::UInt32
  hEvent : HANDLE
  bOnStateChange : BOOL
end
enum NtmsAsyncStatus : Int32
NTMS_ASYNCSTATE_QUEUED = 0

NTMS_ASYNCSTATE_WAIT_RESOURCE = 1

NTMS_ASYNCSTATE_WAIT_OPERATOR = 2

NTMS_ASYNCSTATE_INPROCESS = 3

NTMS_ASYNCSTATE_COMPLETE = 4

end
enum NtmsAsyncOperations : Int32
NTMS_ASYNCOP_MOUNT = 1

end
enum NtmsSessionOptions : Int32
NTMS_SESSION_QUERYEXPEDITE = 1

end
enum NtmsMountOptions : Int32
NTMS_MOUNT_READ = 1

NTMS_MOUNT_WRITE = 2

NTMS_MOUNT_ERROR_NOT_AVAILABLE = 4

NTMS_MOUNT_ERROR_IF_UNAVAILABLE = 4

NTMS_MOUNT_ERROR_OFFLINE = 8

NTMS_MOUNT_ERROR_IF_OFFLINE = 8

NTMS_MOUNT_SPECIFIC_DRIVE = 16

NTMS_MOUNT_NOWAIT = 32

end
enum NtmsDismountOptions : Int32
NTMS_DISMOUNT_DEFERRED = 1

NTMS_DISMOUNT_IMMEDIATE = 2

end
enum NtmsMountPriority : Int32
NTMS_PRIORITY_DEFAULT = 0

NTMS_PRIORITY_HIGHEST = 15

NTMS_PRIORITY_HIGH = 7

NTMS_PRIORITY_NORMAL = 0

NTMS_PRIORITY_LOW = -7

NTMS_PRIORITY_LOWEST = -15

end
struct NTMS_MOUNT_INFORMATION
  dwSize : LibC::UInt32
  lpReserved : LibC::Void*
end
enum NtmsAllocateOptions : Int32
NTMS_ALLOCATE_NEW = 1

NTMS_ALLOCATE_NEXT = 2

NTMS_ALLOCATE_ERROR_IF_UNAVAILABLE = 4

end
struct NTMS_ALLOCATION_INFORMATION
  dwSize : LibC::UInt32
  lpReserved : LibC::Void*
  allocatedFrom : LibC::Guid
end
enum NtmsCreateOptions : Int32
NTMS_OPEN_EXISTING = 1

NTMS_CREATE_NEW = 2

NTMS_OPEN_ALWAYS = 3

end
enum NtmsDriveState : Int32
NTMS_DRIVESTATE_DISMOUNTED = 0

NTMS_DRIVESTATE_MOUNTED = 1

NTMS_DRIVESTATE_LOADED = 2

NTMS_DRIVESTATE_UNLOADED = 5

NTMS_DRIVESTATE_BEING_CLEANED = 6

NTMS_DRIVESTATE_DISMOUNTABLE = 7

end
struct NTMS_DRIVEINFORMATIONA
  number : LibC::UInt32
  state : NtmsDriveState
  driveType : LibC::Guid
  szDeviceName : Array(CHAR)
  szSerialNumber : Array(CHAR)
  szRevision : Array(CHAR)
  scsiPort : LibC::UInt16
  scsiBus : LibC::UInt16
  scsiTarget : LibC::UInt16
  scsiLun : LibC::UInt16
  dwMountCount : LibC::UInt32
  lastCleanedTs : SYSTEMTIME
  savedPartitionId : LibC::Guid
  library : LibC::Guid
  reserved : LibC::Guid
  dwDeferDismountDelay : LibC::UInt32
end
struct NTMS_DRIVEINFORMATIONW
  number : LibC::UInt32
  state : NtmsDriveState
  driveType : LibC::Guid
  szDeviceName : Array(LibC::Char)
  szSerialNumber : Array(LibC::Char)
  szRevision : Array(LibC::Char)
  scsiPort : LibC::UInt16
  scsiBus : LibC::UInt16
  scsiTarget : LibC::UInt16
  scsiLun : LibC::UInt16
  dwMountCount : LibC::UInt32
  lastCleanedTs : SYSTEMTIME
  savedPartitionId : LibC::Guid
  library : LibC::Guid
  reserved : LibC::Guid
  dwDeferDismountDelay : LibC::UInt32
end
enum NtmsLibraryType : Int32
NTMS_LIBRARYTYPE_UNKNOWN = 0

NTMS_LIBRARYTYPE_OFFLINE = 1

NTMS_LIBRARYTYPE_ONLINE = 2

NTMS_LIBRARYTYPE_STANDALONE = 3

end
enum NtmsLibraryFlags : Int32
NTMS_LIBRARYFLAG_FIXEDOFFLINE = 1

NTMS_LIBRARYFLAG_CLEANERPRESENT = 2

NTMS_LIBRARYFLAG_AUTODETECTCHANGE = 4

NTMS_LIBRARYFLAG_IGNORECLEANERUSESREMAINING = 8

NTMS_LIBRARYFLAG_RECOGNIZECLEANERBARCODE = 16

end
enum NtmsInventoryMethod : Int32
NTMS_INVENTORY_NONE = 0

NTMS_INVENTORY_FAST = 1

NTMS_INVENTORY_OMID = 2

NTMS_INVENTORY_DEFAULT = 3

NTMS_INVENTORY_SLOT = 4

NTMS_INVENTORY_STOP = 5

NTMS_INVENTORY_MAX = 6

end
struct NTMS_LIBRARYINFORMATION
  libraryType : NtmsLibraryType
  cleanerSlot : LibC::Guid
  cleanerSlotDefault : LibC::Guid
  librarySupportsDriveCleaning : BOOL
  barCodeReaderInstalled : BOOL
  inventoryMethod : NtmsInventoryMethod
  dwCleanerUsesRemaining : LibC::UInt32
  firstDriveNumber : LibC::UInt32
  dwNumberOfDrives : LibC::UInt32
  firstSlotNumber : LibC::UInt32
  dwNumberOfSlots : LibC::UInt32
  firstDoorNumber : LibC::UInt32
  dwNumberOfDoors : LibC::UInt32
  firstPortNumber : LibC::UInt32
  dwNumberOfPorts : LibC::UInt32
  firstChangerNumber : LibC::UInt32
  dwNumberOfChangers : LibC::UInt32
  dwNumberOfMedia : LibC::UInt32
  dwNumberOfMediaTypes : LibC::UInt32
  dwNumberOfLibRequests : LibC::UInt32
  reserved : LibC::Guid
  autoRecovery : BOOL
  dwFlags : NtmsLibraryFlags
end
struct NTMS_CHANGERINFORMATIONA
  number : LibC::UInt32
  changerType : LibC::Guid
  szSerialNumber : Array(CHAR)
  szRevision : Array(CHAR)
  szDeviceName : Array(CHAR)
  scsiPort : LibC::UInt16
  scsiBus : LibC::UInt16
  scsiTarget : LibC::UInt16
  scsiLun : LibC::UInt16
  library : LibC::Guid
end
struct NTMS_CHANGERINFORMATIONW
  number : LibC::UInt32
  changerType : LibC::Guid
  szSerialNumber : Array(LibC::Char)
  szRevision : Array(LibC::Char)
  szDeviceName : Array(LibC::Char)
  scsiPort : LibC::UInt16
  scsiBus : LibC::UInt16
  scsiTarget : LibC::UInt16
  scsiLun : LibC::UInt16
  library : LibC::Guid
end
enum NtmsSlotState : Int32
NTMS_SLOTSTATE_UNKNOWN = 0

NTMS_SLOTSTATE_FULL = 1

NTMS_SLOTSTATE_EMPTY = 2

NTMS_SLOTSTATE_NOTPRESENT = 3

NTMS_SLOTSTATE_NEEDSINVENTORY = 4

end
struct NTMS_STORAGESLOTINFORMATION
  number : LibC::UInt32
  state : LibC::UInt32
  library : LibC::Guid
end
enum NtmsDoorState : Int32
NTMS_DOORSTATE_UNKNOWN = 0

NTMS_DOORSTATE_CLOSED = 1

NTMS_DOORSTATE_OPEN = 2

end
struct NTMS_IEDOORINFORMATION
  number : LibC::UInt32
  state : NtmsDoorState
  maxOpenSecs : LibC::UInt16
  library : LibC::Guid
end
enum NtmsPortPosition : Int32
NTMS_PORTPOSITION_UNKNOWN = 0

NTMS_PORTPOSITION_EXTENDED = 1

NTMS_PORTPOSITION_RETRACTED = 2

end
enum NtmsPortContent : Int32
NTMS_PORTCONTENT_UNKNOWN = 0

NTMS_PORTCONTENT_FULL = 1

NTMS_PORTCONTENT_EMPTY = 2

end
struct NTMS_IEPORTINFORMATION
  number : LibC::UInt32
  content : NtmsPortContent
  position : NtmsPortPosition
  maxExtendSecs : LibC::UInt16
  library : LibC::Guid
end
enum NtmsBarCodeState : Int32
NTMS_BARCODESTATE_OK = 1

NTMS_BARCODESTATE_UNREADABLE = 2

end
enum NtmsMediaState : Int32
NTMS_MEDIASTATE_IDLE = 0

NTMS_MEDIASTATE_INUSE = 1

NTMS_MEDIASTATE_MOUNTED = 2

NTMS_MEDIASTATE_LOADED = 3

NTMS_MEDIASTATE_UNLOADED = 4

NTMS_MEDIASTATE_OPERROR = 5

NTMS_MEDIASTATE_OPREQ = 6

end
struct NTMS_PMIDINFORMATIONA
  currentLibrary : LibC::Guid
  mediaPool : LibC::Guid
  location : LibC::Guid
  locationType : LibC::UInt32
  mediaType : LibC::Guid
  homeSlot : LibC::Guid
  szBarCode : Array(CHAR)
  barCodeState : NtmsBarCodeState
  szSequenceNumber : Array(CHAR)
  mediaState : NtmsMediaState
  dwNumberOfPartitions : LibC::UInt32
  dwMediaTypeCode : LibC::UInt32
  dwDensityCode : LibC::UInt32
  mountedPartition : LibC::Guid
end
struct NTMS_PMIDINFORMATIONW
  currentLibrary : LibC::Guid
  mediaPool : LibC::Guid
  location : LibC::Guid
  locationType : LibC::UInt32
  mediaType : LibC::Guid
  homeSlot : LibC::Guid
  szBarCode : Array(LibC::Char)
  barCodeState : NtmsBarCodeState
  szSequenceNumber : Array(LibC::Char)
  mediaState : NtmsMediaState
  dwNumberOfPartitions : LibC::UInt32
  dwMediaTypeCode : LibC::UInt32
  dwDensityCode : LibC::UInt32
  mountedPartition : LibC::Guid
end
struct NTMS_LMIDINFORMATION
  mediaPool : LibC::Guid
  dwNumberOfPartitions : LibC::UInt32
end
enum NtmsPartitionState : Int32
NTMS_PARTSTATE_UNKNOWN = 0

NTMS_PARTSTATE_UNPREPARED = 1

NTMS_PARTSTATE_INCOMPATIBLE = 2

NTMS_PARTSTATE_DECOMMISSIONED = 3

NTMS_PARTSTATE_AVAILABLE = 4

NTMS_PARTSTATE_ALLOCATED = 5

NTMS_PARTSTATE_COMPLETE = 6

NTMS_PARTSTATE_FOREIGN = 7

NTMS_PARTSTATE_IMPORT = 8

NTMS_PARTSTATE_RESERVED = 9

end
struct NTMS_PARTITIONINFORMATIONA
  physicalMedia : LibC::Guid
  logicalMedia : LibC::Guid
  state : NtmsPartitionState
  side : LibC::UInt16
  dwOmidLabelIdLength : LibC::UInt32
  omidLabelId : Array(LibC::Byte)
  szOmidLabelType : Array(CHAR)
  szOmidLabelInfo : Array(CHAR)
  dwMountCount : LibC::UInt32
  dwAllocateCount : LibC::UInt32
  capacity : LARGE_INTEGER
end
struct NTMS_PARTITIONINFORMATIONW
  physicalMedia : LibC::Guid
  logicalMedia : LibC::Guid
  state : NtmsPartitionState
  side : LibC::UInt16
  dwOmidLabelIdLength : LibC::UInt32
  omidLabelId : Array(LibC::Byte)
  szOmidLabelType : Array(LibC::Char)
  szOmidLabelInfo : Array(LibC::Char)
  dwMountCount : LibC::UInt32
  dwAllocateCount : LibC::UInt32
  capacity : LARGE_INTEGER
end
enum NtmsPoolType : Int32
NTMS_POOLTYPE_UNKNOWN = 0

NTMS_POOLTYPE_SCRATCH = 1

NTMS_POOLTYPE_FOREIGN = 2

NTMS_POOLTYPE_IMPORT = 3

NTMS_POOLTYPE_APPLICATION = 1000

end
enum NtmsAllocationPolicy : Int32
NTMS_ALLOCATE_FROMSCRATCH = 1

end
enum NtmsDeallocationPolicy : Int32
NTMS_DEALLOCATE_TOSCRATCH = 1

end
struct NTMS_MEDIAPOOLINFORMATION
  poolType : LibC::UInt32
  mediaType : LibC::Guid
  parent : LibC::Guid
  allocationPolicy : LibC::UInt32
  deallocationPolicy : LibC::UInt32
  dwMaxAllocates : LibC::UInt32
  dwNumberOfPhysicalMedia : LibC::UInt32
  dwNumberOfLogicalMedia : LibC::UInt32
  dwNumberOfMediaPools : LibC::UInt32
end
enum NtmsReadWriteCharacteristics : Int32
NTMS_MEDIARW_UNKNOWN = 0

NTMS_MEDIARW_REWRITABLE = 1

NTMS_MEDIARW_WRITEONCE = 2

NTMS_MEDIARW_READONLY = 3

end
struct NTMS_MEDIATYPEINFORMATION
  mediaType : LibC::UInt32
  numberOfSides : LibC::UInt32
  readWriteCharacteristics : NtmsReadWriteCharacteristics
  deviceType : FILE_DEVICE_TYPE
end
struct NTMS_DRIVETYPEINFORMATIONA
  szVendor : Array(CHAR)
  szProduct : Array(CHAR)
  numberOfHeads : LibC::UInt32
  deviceType : FILE_DEVICE_TYPE
end
struct NTMS_DRIVETYPEINFORMATIONW
  szVendor : Array(LibC::Char)
  szProduct : Array(LibC::Char)
  numberOfHeads : LibC::UInt32
  deviceType : FILE_DEVICE_TYPE
end
struct NTMS_CHANGERTYPEINFORMATIONA
  szVendor : Array(CHAR)
  szProduct : Array(CHAR)
  deviceType : LibC::UInt32
end
struct NTMS_CHANGERTYPEINFORMATIONW
  szVendor : Array(LibC::Char)
  szProduct : Array(LibC::Char)
  deviceType : LibC::UInt32
end
enum NtmsLmOperation : Int32
NTMS_LM_REMOVE = 0

NTMS_LM_DISABLECHANGER = 1

NTMS_LM_DISABLELIBRARY = 1

NTMS_LM_ENABLECHANGER = 2

NTMS_LM_ENABLELIBRARY = 2

NTMS_LM_DISABLEDRIVE = 3

NTMS_LM_ENABLEDRIVE = 4

NTMS_LM_DISABLEMEDIA = 5

NTMS_LM_ENABLEMEDIA = 6

NTMS_LM_UPDATEOMID = 7

NTMS_LM_INVENTORY = 8

NTMS_LM_DOORACCESS = 9

NTMS_LM_EJECT = 10

NTMS_LM_EJECTCLEANER = 11

NTMS_LM_INJECT = 12

NTMS_LM_INJECTCLEANER = 13

NTMS_LM_PROCESSOMID = 14

NTMS_LM_CLEANDRIVE = 15

NTMS_LM_DISMOUNT = 16

NTMS_LM_MOUNT = 17

NTMS_LM_WRITESCRATCH = 18

NTMS_LM_CLASSIFY = 19

NTMS_LM_RESERVECLEANER = 20

NTMS_LM_RELEASECLEANER = 21

NTMS_LM_MAXWORKITEM = 22

end
enum NtmsLmState : Int32
NTMS_LM_QUEUED = 0

NTMS_LM_INPROCESS = 1

NTMS_LM_PASSED = 2

NTMS_LM_FAILED = 3

NTMS_LM_INVALID = 4

NTMS_LM_WAITING = 5

NTMS_LM_DEFERRED = 6

NTMS_LM_DEFFERED = 6

NTMS_LM_CANCELLED = 7

NTMS_LM_STOPPED = 8

end
struct NTMS_LIBREQUESTINFORMATIONA
  operationCode : NtmsLmOperation
  operationOption : LibC::UInt32
  state : NtmsLmState
  partitionId : LibC::Guid
  driveId : LibC::Guid
  physMediaId : LibC::Guid
  library : LibC::Guid
  slotId : LibC::Guid
  timeQueued : SYSTEMTIME
  timeCompleted : SYSTEMTIME
  szApplication : Array(CHAR)
  szUser : Array(CHAR)
  szComputer : Array(CHAR)
  dwErrorCode : LibC::UInt32
  workItemId : LibC::Guid
  dwPriority : LibC::UInt32
end
struct NTMS_LIBREQUESTINFORMATIONW
  operationCode : NtmsLmOperation
  operationOption : LibC::UInt32
  state : NtmsLmState
  partitionId : LibC::Guid
  driveId : LibC::Guid
  physMediaId : LibC::Guid
  library : LibC::Guid
  slotId : LibC::Guid
  timeQueued : SYSTEMTIME
  timeCompleted : SYSTEMTIME
  szApplication : Array(LibC::Char)
  szUser : Array(LibC::Char)
  szComputer : Array(LibC::Char)
  dwErrorCode : LibC::UInt32
  workItemId : LibC::Guid
  dwPriority : LibC::UInt32
end
enum NtmsOpreqCommand : Int32
NTMS_OPREQ_UNKNOWN = 0

NTMS_OPREQ_NEWMEDIA = 1

NTMS_OPREQ_CLEANER = 2

NTMS_OPREQ_DEVICESERVICE = 3

NTMS_OPREQ_MOVEMEDIA = 4

NTMS_OPREQ_MESSAGE = 5

end
enum NtmsOpreqState : Int32
NTMS_OPSTATE_UNKNOWN = 0

NTMS_OPSTATE_SUBMITTED = 1

NTMS_OPSTATE_ACTIVE = 2

NTMS_OPSTATE_INPROGRESS = 3

NTMS_OPSTATE_REFUSED = 4

NTMS_OPSTATE_COMPLETE = 5

end
struct NTMS_OPREQUESTINFORMATIONA
  request : NtmsOpreqCommand
  submitted : SYSTEMTIME
  state : NtmsOpreqState
  szMessage : Array(CHAR)
  arg1Type : NtmsObjectsTypes
  arg1 : LibC::Guid
  arg2Type : NtmsObjectsTypes
  arg2 : LibC::Guid
  szApplication : Array(CHAR)
  szUser : Array(CHAR)
  szComputer : Array(CHAR)
end
struct NTMS_OPREQUESTINFORMATIONW
  request : NtmsOpreqCommand
  submitted : SYSTEMTIME
  state : NtmsOpreqState
  szMessage : Array(LibC::Char)
  arg1Type : NtmsObjectsTypes
  arg1 : LibC::Guid
  arg2Type : NtmsObjectsTypes
  arg2 : LibC::Guid
  szApplication : Array(LibC::Char)
  szUser : Array(LibC::Char)
  szComputer : Array(LibC::Char)
end
struct NTMS_COMPUTERINFORMATION
  dwLibRequestPurgeTime : LibC::UInt32
  dwOpRequestPurgeTime : LibC::UInt32
  dwLibRequestFlags : LibC::UInt32
  dwOpRequestFlags : LibC::UInt32
  dwMediaPoolPolicy : LibC::UInt32
end
enum NtmsLibRequestFlags : Int32
NTMS_LIBREQFLAGS_NOAUTOPURGE = 1

NTMS_LIBREQFLAGS_NOFAILEDPURGE = 2

end
enum NtmsOpRequestFlags : Int32
NTMS_OPREQFLAGS_NOAUTOPURGE = 1

NTMS_OPREQFLAGS_NOFAILEDPURGE = 2

NTMS_OPREQFLAGS_NOALERTS = 16

NTMS_OPREQFLAGS_NOTRAYICON = 32

end
enum NtmsMediaPoolPolicy : Int32
NTMS_POOLPOLICY_PURGEOFFLINESCRATCH = 1

NTMS_POOLPOLICY_KEEPOFFLINEIMPORT = 2

end
enum NtmsOperationalState : Int32
NTMS_READY = 0

NTMS_INITIALIZING = 10

NTMS_NEEDS_SERVICE = 20

NTMS_NOT_PRESENT = 21

end
struct NTMS_OBJECTINFORMATIONA
  dwSize : LibC::UInt32
  dwType : NtmsObjectsTypes
  created : SYSTEMTIME
  modified : SYSTEMTIME
  objectGuid : LibC::Guid
  enabled : BOOL
  dwOperationalState : NtmsOperationalState
  szName : Array(CHAR)
  szDescription : Array(CHAR)
  info : Info_e__Union
end
struct NTMS_OBJECTINFORMATIONW
  dwSize : LibC::UInt32
  dwType : NtmsObjectsTypes
  created : SYSTEMTIME
  modified : SYSTEMTIME
  objectGuid : LibC::Guid
  enabled : BOOL
  dwOperationalState : NtmsOperationalState
  szName : Array(LibC::Char)
  szDescription : Array(LibC::Char)
  info : Info_e__Union
end
struct NTMS_I1_LIBRARYINFORMATION
  libraryType : LibC::UInt32
  cleanerSlot : LibC::Guid
  cleanerSlotDefault : LibC::Guid
  librarySupportsDriveCleaning : BOOL
  barCodeReaderInstalled : BOOL
  inventoryMethod : LibC::UInt32
  dwCleanerUsesRemaining : LibC::UInt32
  firstDriveNumber : LibC::UInt32
  dwNumberOfDrives : LibC::UInt32
  firstSlotNumber : LibC::UInt32
  dwNumberOfSlots : LibC::UInt32
  firstDoorNumber : LibC::UInt32
  dwNumberOfDoors : LibC::UInt32
  firstPortNumber : LibC::UInt32
  dwNumberOfPorts : LibC::UInt32
  firstChangerNumber : LibC::UInt32
  dwNumberOfChangers : LibC::UInt32
  dwNumberOfMedia : LibC::UInt32
  dwNumberOfMediaTypes : LibC::UInt32
  dwNumberOfLibRequests : LibC::UInt32
  reserved : LibC::Guid
end
struct NTMS_I1_LIBREQUESTINFORMATIONA
  operationCode : LibC::UInt32
  operationOption : LibC::UInt32
  state : LibC::UInt32
  partitionId : LibC::Guid
  driveId : LibC::Guid
  physMediaId : LibC::Guid
  library : LibC::Guid
  slotId : LibC::Guid
  timeQueued : SYSTEMTIME
  timeCompleted : SYSTEMTIME
  szApplication : Array(CHAR)
  szUser : Array(CHAR)
  szComputer : Array(CHAR)
end
struct NTMS_I1_LIBREQUESTINFORMATIONW
  operationCode : LibC::UInt32
  operationOption : LibC::UInt32
  state : LibC::UInt32
  partitionId : LibC::Guid
  driveId : LibC::Guid
  physMediaId : LibC::Guid
  library : LibC::Guid
  slotId : LibC::Guid
  timeQueued : SYSTEMTIME
  timeCompleted : SYSTEMTIME
  szApplication : Array(LibC::Char)
  szUser : Array(LibC::Char)
  szComputer : Array(LibC::Char)
end
struct NTMS_I1_PMIDINFORMATIONA
  currentLibrary : LibC::Guid
  mediaPool : LibC::Guid
  location : LibC::Guid
  locationType : LibC::UInt32
  mediaType : LibC::Guid
  homeSlot : LibC::Guid
  szBarCode : Array(CHAR)
  barCodeState : LibC::UInt32
  szSequenceNumber : Array(CHAR)
  mediaState : LibC::UInt32
  dwNumberOfPartitions : LibC::UInt32
end
struct NTMS_I1_PMIDINFORMATIONW
  currentLibrary : LibC::Guid
  mediaPool : LibC::Guid
  location : LibC::Guid
  locationType : LibC::UInt32
  mediaType : LibC::Guid
  homeSlot : LibC::Guid
  szBarCode : Array(LibC::Char)
  barCodeState : LibC::UInt32
  szSequenceNumber : Array(LibC::Char)
  mediaState : LibC::UInt32
  dwNumberOfPartitions : LibC::UInt32
end
struct NTMS_I1_PARTITIONINFORMATIONA
  physicalMedia : LibC::Guid
  logicalMedia : LibC::Guid
  state : LibC::UInt32
  side : LibC::UInt16
  dwOmidLabelIdLength : LibC::UInt32
  omidLabelId : Array(LibC::Byte)
  szOmidLabelType : Array(CHAR)
  szOmidLabelInfo : Array(CHAR)
  dwMountCount : LibC::UInt32
  dwAllocateCount : LibC::UInt32
end
struct NTMS_I1_PARTITIONINFORMATIONW
  physicalMedia : LibC::Guid
  logicalMedia : LibC::Guid
  state : LibC::UInt32
  side : LibC::UInt16
  dwOmidLabelIdLength : LibC::UInt32
  omidLabelId : Array(LibC::Byte)
  szOmidLabelType : Array(LibC::Char)
  szOmidLabelInfo : Array(LibC::Char)
  dwMountCount : LibC::UInt32
  dwAllocateCount : LibC::UInt32
end
struct NTMS_I1_OPREQUESTINFORMATIONA
  request : LibC::UInt32
  submitted : SYSTEMTIME
  state : LibC::UInt32
  szMessage : Array(CHAR)
  arg1Type : LibC::UInt32
  arg1 : LibC::Guid
  arg2Type : LibC::UInt32
  arg2 : LibC::Guid
  szApplication : Array(CHAR)
  szUser : Array(CHAR)
  szComputer : Array(CHAR)
end
struct NTMS_I1_OPREQUESTINFORMATIONW
  request : LibC::UInt32
  submitted : SYSTEMTIME
  state : LibC::UInt32
  szMessage : Array(LibC::Char)
  arg1Type : LibC::UInt32
  arg1 : LibC::Guid
  arg2Type : LibC::UInt32
  arg2 : LibC::Guid
  szApplication : Array(LibC::Char)
  szUser : Array(LibC::Char)
  szComputer : Array(LibC::Char)
end
struct NTMS_I1_OBJECTINFORMATIONA
  dwSize : LibC::UInt32
  dwType : LibC::UInt32
  created : SYSTEMTIME
  modified : SYSTEMTIME
  objectGuid : LibC::Guid
  enabled : BOOL
  dwOperationalState : LibC::UInt32
  szName : Array(CHAR)
  szDescription : Array(CHAR)
  info : Info_e__Union
end
struct NTMS_I1_OBJECTINFORMATIONW
  dwSize : LibC::UInt32
  dwType : LibC::UInt32
  created : SYSTEMTIME
  modified : SYSTEMTIME
  objectGuid : LibC::Guid
  enabled : BOOL
  dwOperationalState : LibC::UInt32
  szName : Array(LibC::Char)
  szDescription : Array(LibC::Char)
  info : Info_e__Union
end
enum NtmsCreateNtmsMediaOptions : Int32
NTMS_ERROR_ON_DUPLICATE = 1

end
enum NtmsEnumerateOption : Int32
NTMS_ENUM_DEFAULT = 0

NTMS_ENUM_ROOTPOOL = 1

end
enum NtmsEjectOperation : Int32
NTMS_EJECT_START = 0

NTMS_EJECT_STOP = 1

NTMS_EJECT_QUEUE = 2

NTMS_EJECT_FORCE = 3

NTMS_EJECT_IMMEDIATE = 4

NTMS_EJECT_ASK_USER = 5

end
enum NtmsInjectOperation : Int32
NTMS_INJECT_START = 0

NTMS_INJECT_STOP = 1

NTMS_INJECT_RETRACT = 2

NTMS_INJECT_STARTMANY = 3

end
struct NTMS_FILESYSTEM_INFO
  fileSystemType : Array(LibC::Char)
  volumeName : Array(LibC::Char)
  serialNumber : LibC::UInt32
end
enum NtmsDriveType : Int32
NTMS_UNKNOWN_DRIVE = 0

end
enum NtmsAccessMask : Int32
NTMS_USE_ACCESS = 1

NTMS_MODIFY_ACCESS = 2

NTMS_CONTROL_ACCESS = 4

end
enum NtmsUITypes : Int32
NTMS_UITYPE_INVALID = 0

NTMS_UITYPE_INFO = 1

NTMS_UITYPE_REQ = 2

NTMS_UITYPE_ERR = 3

NTMS_UITYPE_MAX = 4

end
enum NtmsUIOperations : Int32
NTMS_UIDEST_ADD = 1

NTMS_UIDEST_DELETE = 2

NTMS_UIDEST_DELETEALL = 3

NTMS_UIOPERATION_MAX = 4

end
enum NtmsNotificationOperations : Int32
NTMS_OBJ_UPDATE = 1

NTMS_OBJ_INSERT = 2

NTMS_OBJ_DELETE = 3

NTMS_EVENT_SIGNAL = 4

NTMS_EVENT_COMPLETE = 5

end
struct NTMS_NOTIFICATIONINFORMATION
  dwOperation : NtmsNotificationOperations
  objectId : LibC::Guid
end
struct MediaLabelInfo
  labelType : Array(LibC::Char)
  labelIDSize : LibC::UInt32
  labelID : Array(LibC::Byte)
  labelAppDescr : Array(LibC::Char)
end
alias MAXMEDIALABEL = (LibC::UInt32* -> LibC::UInt32)
alias CLAIMMEDIALABEL = (LibC::Byte*, LibC::UInt32, MediaLabelInfo* -> LibC::UInt32)
alias CLAIMMEDIALABELEX = (LibC::Byte*, LibC::UInt32, MediaLabelInfo*, LibC::Guid* -> LibC::UInt32)
struct CLS_LSN
  internal : LibC::UInt64
end
enum CLS_CONTEXT_MODE : Int32
ClsContextNone = 0

ClsContextUndoNext = 1

ClsContextPrevious = 2

ClsContextForward = 3

end
enum CLFS_CONTEXT_MODE : Int32
ClfsContextNone = 0

ClfsContextUndoNext = 1

ClfsContextPrevious = 2

ClfsContextForward = 3

end
struct CLFS_NODE_ID
  cType : LibC::UInt32
  cbNode : LibC::UInt32
end
struct CLS_WRITE_ENTRY
  buffer : LibC::Void*
  byteLength : LibC::UInt32
end
struct CLS_INFORMATION
  totalAvailable : LibC::Int64
  currentAvailable : LibC::Int64
  totalReservation : LibC::Int64
  baseFileSize : LibC::UInt64
  containerSize : LibC::UInt64
  totalContainers : LibC::UInt32
  freeContainers : LibC::UInt32
  totalClients : LibC::UInt32
  attributes : LibC::UInt32
  flushThreshold : LibC::UInt32
  sectorSize : LibC::UInt32
  minArchiveTailLsn : CLS_LSN
  baseLsn : CLS_LSN
  lastFlushedLsn : CLS_LSN
  lastLsn : CLS_LSN
  restartLsn : CLS_LSN
  identity : LibC::Guid
end
struct CLFS_LOG_NAME_INFORMATION
  nameLengthInBytes : LibC::UInt16
  name : Array(LibC::Char)
end
struct CLFS_STREAM_ID_INFORMATION
  streamIdentifier : LibC::Byte
end
struct CLFS_PHYSICAL_LSN_INFORMATION
  streamIdentifier : LibC::Byte
  virtualLsn : CLS_LSN
  physicalLsn : CLS_LSN
end
struct CLS_CONTAINER_INFORMATION
  fileAttributes : LibC::UInt32
  creationTime : LibC::UInt64
  lastAccessTime : LibC::UInt64
  lastWriteTime : LibC::UInt64
  containerSize : LibC::Int64
  fileNameActualLength : LibC::UInt32
  fileNameLength : LibC::UInt32
  fileName : Array(LibC::Char)
  state : LibC::UInt32
  physicalContainerId : LibC::UInt32
  logicalContainerId : LibC::UInt32
end
enum CLS_LOG_INFORMATION_CLASS : Int32
ClfsLogBasicInformation = 0

ClfsLogBasicInformationPhysical = 1

ClfsLogPhysicalNameInformation = 2

ClfsLogStreamIdentifierInformation = 3

ClfsLogSystemMarkingInformation = 4

ClfsLogPhysicalLsnInformation = 5

end
enum CLS_IOSTATS_CLASS : Int32
ClsIoStatsDefault = 0

ClsIoStatsMax = 65535

end
enum CLFS_IOSTATS_CLASS : Int32
ClfsIoStatsDefault = 0

ClfsIoStatsMax = 65535

end
struct CLS_IO_STATISTICS_HEADER
  ubMajorVersion : LibC::Byte
  ubMinorVersion : LibC::Byte
  eStatsClass : CLFS_IOSTATS_CLASS
  cbLength : LibC::UInt16
  coffData : LibC::UInt32
end
struct CLS_IO_STATISTICS
  hdrIoStats : CLS_IO_STATISTICS_HEADER
  cFlush : LibC::UInt64
  cbFlush : LibC::UInt64
  cMetaFlush : LibC::UInt64
  cbMetaFlush : LibC::UInt64
end
struct CLS_SCAN_CONTEXT
  cidNode : CLFS_NODE_ID
  hLog : HANDLE
  cIndex : LibC::UInt32
  cContainers : LibC::UInt32
  cContainersReturned : LibC::UInt32
  eScanMode : LibC::Byte
  pinfoContainer : CLS_CONTAINER_INFORMATION*
end
struct CLS_ARCHIVE_DESCRIPTOR
  coffLow : LibC::UInt64
  coffHigh : LibC::UInt64
  infoContainer : CLS_CONTAINER_INFORMATION
end
alias CLFS_BLOCK_ALLOCATION = (LibC::UInt32, LibC::Void* -> LibC::Void*)
alias CLFS_BLOCK_DEALLOCATION = (LibC::Void*, LibC::Void* -> LibC::Void)
enum CLFS_LOG_ARCHIVE_MODE : Int32
ClfsLogArchiveEnabled = 1

ClfsLogArchiveDisabled = 2

end
alias PCLFS_COMPLETION_ROUTINE = (LibC::Void*, LibC::UInt32 -> LibC::Void)
enum CLFS_MGMT_POLICY_TYPE : Int32
ClfsMgmtPolicyMaximumSize = 0

ClfsMgmtPolicyMinimumSize = 1

ClfsMgmtPolicyNewContainerSize = 2

ClfsMgmtPolicyGrowthRate = 3

ClfsMgmtPolicyLogTail = 4

ClfsMgmtPolicyAutoShrink = 5

ClfsMgmtPolicyAutoGrow = 6

ClfsMgmtPolicyNewContainerPrefix = 7

ClfsMgmtPolicyNewContainerSuffix = 8

ClfsMgmtPolicyNewContainerExtension = 9

ClfsMgmtPolicyInvalid = 10

end
struct CLFS_MGMT_POLICY
  version : LibC::UInt32
  lengthInBytes : LibC::UInt32
  policyFlags : LibC::UInt32
  policyType : CLFS_MGMT_POLICY_TYPE
  policyParameters : PolicyParameters_e__Union
end
enum CLFS_MGMT_NOTIFICATION_TYPE : Int32
ClfsMgmtAdvanceTailNotification = 0

ClfsMgmtLogFullHandlerNotification = 1

ClfsMgmtLogUnpinnedNotification = 2

ClfsMgmtLogWriteNotification = 3

end
struct CLFS_MGMT_NOTIFICATION
  notification : CLFS_MGMT_NOTIFICATION_TYPE
  lsn : CLS_LSN
  logIsPinned : LibC::UInt16
end
alias PLOG_TAIL_ADVANCE_CALLBACK = (HANDLE, CLS_LSN, LibC::Void* -> LibC::Void)
alias PLOG_FULL_HANDLER_CALLBACK = (HANDLE, LibC::UInt32, BOOL, LibC::Void* -> LibC::Void)
alias PLOG_UNPINNED_CALLBACK = (HANDLE, LibC::Void* -> LibC::Void)
struct LOG_MANAGEMENT_CALLBACKS
  callbackContext : LibC::Void*
  advanceTailCallback : PLOG_TAIL_ADVANCE_CALLBACK
  logFullHandlerCallback : PLOG_FULL_HANDLER_CALLBACK
  logUnpinnedCallback : PLOG_UNPINNED_CALLBACK
end
struct DISKQUOTA_USER_INFORMATION
  quotaUsed : LibC::Int64
  quotaThreshold : LibC::Int64
  quotaLimit : LibC::Int64
end
struct EFS_CERTIFICATE_BLOB
  dwCertEncodingType : LibC::UInt32
  cbData : LibC::UInt32
  pbData : LibC::Byte*
end
struct EFS_HASH_BLOB
  cbData : LibC::UInt32
  pbData : LibC::Byte*
end
struct EFS_RPC_BLOB
  cbData : LibC::UInt32
  pbData : LibC::Byte*
end
struct EFS_PIN_BLOB
  cbPadding : LibC::UInt32
  cbData : LibC::UInt32
  pbData : LibC::Byte*
end
struct EFS_KEY_INFO
  dwVersion : LibC::UInt32
  entropy : LibC::UInt32
  algorithm : LibC::UInt32
  keyLength : LibC::UInt32
end
struct EFS_COMPATIBILITY_INFO
  efsVersion : LibC::UInt32
end
struct EFS_VERSION_INFO
  efsVersion : LibC::UInt32
  subVersion : LibC::UInt32
end
struct EFS_DECRYPTION_STATUS_INFO
  dwDecryptionError : LibC::UInt32
  dwHashOffset : LibC::UInt32
  cbHash : LibC::UInt32
end
struct EFS_ENCRYPTION_STATUS_INFO
  bHasCurrentKey : BOOL
  dwEncryptionError : LibC::UInt32
end
struct ENCRYPTION_CERTIFICATE
  cbTotalLength : LibC::UInt32
  pUserSid : SID*
  pCertBlob : EFS_CERTIFICATE_BLOB*
end
struct ENCRYPTION_CERTIFICATE_HASH
  cbTotalLength : LibC::UInt32
  pUserSid : SID*
  pHash : EFS_HASH_BLOB*
  lpDisplayInformation : PWSTR
end
struct ENCRYPTION_CERTIFICATE_HASH_LIST
  nCert_Hash : LibC::UInt32
  pUsers : ENCRYPTION_CERTIFICATE_HASH**
end
struct ENCRYPTION_CERTIFICATE_LIST
  nUsers : LibC::UInt32
  pUsers : ENCRYPTION_CERTIFICATE**
end
struct ENCRYPTED_FILE_METADATA_SIGNATURE
  dwEfsAccessType : LibC::UInt32
  pCertificatesAdded : ENCRYPTION_CERTIFICATE_HASH_LIST*
  pEncryptionCertificate : ENCRYPTION_CERTIFICATE*
  pEfsStreamSignature : EFS_RPC_BLOB*
end
struct ENCRYPTION_PROTECTOR
  cbTotalLength : LibC::UInt32
  pUserSid : SID*
  lpProtectorDescriptor : PWSTR
end
struct ENCRYPTION_PROTECTOR_LIST
  nProtectors : LibC::UInt32
  pProtectors : ENCRYPTION_PROTECTOR**
end
alias WofEnumEntryProc = (LibC::Void*, LibC::Void* -> BOOL)
alias WofEnumFilesProc = (PWSTR, LibC::Void*, LibC::Void* -> BOOL)
struct WIM_ENTRY_INFO
  wimEntryInfoSize : LibC::UInt32
  wimType : LibC::UInt32
  dataSourceId : LARGE_INTEGER
  wimGuid : LibC::Guid
  wimPath : PWSTR
  wimIndex : LibC::UInt32
  flags : LibC::UInt32
end
struct WIM_EXTERNAL_FILE_INFO
  dataSourceId : LARGE_INTEGER
  resourceHash : Array(LibC::Byte)
  flags : LibC::UInt32
end
struct WOF_FILE_COMPRESSION_INFO_V0
  algorithm : LibC::UInt32
end
struct WOF_FILE_COMPRESSION_INFO_V1
  algorithm : LibC::UInt32
  flags : LibC::UInt32
end
struct TXF_ID
end
struct TXF_LOG_RECORD_BASE
  version : LibC::UInt16
  recordType : TXF_LOG_RECORD_TYPE
  recordLength : LibC::UInt32
end
struct TXF_LOG_RECORD_WRITE
  version : LibC::UInt16
  recordType : LibC::UInt16
  recordLength : LibC::UInt32
  flags : LibC::UInt32
  txfFileId : TXF_ID
  ktmGuid : LibC::Guid
  byteOffsetInFile : LibC::Int64
  numBytesWritten : LibC::UInt32
  byteOffsetInStructure : LibC::UInt32
  fileNameLength : LibC::UInt32
  fileNameByteOffsetInStructure : LibC::UInt32
end
struct TXF_LOG_RECORD_TRUNCATE
  version : LibC::UInt16
  recordType : LibC::UInt16
  recordLength : LibC::UInt32
  flags : LibC::UInt32
  txfFileId : TXF_ID
  ktmGuid : LibC::Guid
  newFileSize : LibC::Int64
  fileNameLength : LibC::UInt32
  fileNameByteOffsetInStructure : LibC::UInt32
end
struct TXF_LOG_RECORD_AFFECTED_FILE
  version : LibC::UInt16
  recordLength : LibC::UInt32
  flags : LibC::UInt32
  txfFileId : TXF_ID
  ktmGuid : LibC::Guid
  fileNameLength : LibC::UInt32
  fileNameByteOffsetInStructure : LibC::UInt32
end
struct VOLUME_FAILOVER_SET
  numberOfDisks : LibC::UInt32
  diskNumbers : Array(LibC::UInt32)
end
struct VOLUME_NUMBER
  volumeNumber : LibC::UInt32
  volumeManagerName : Array(LibC::Char)
end
struct VOLUME_LOGICAL_OFFSET
  logicalOffset : LibC::Int64
end
struct VOLUME_PHYSICAL_OFFSET
  diskNumber : LibC::UInt32
  offset : LibC::Int64
end
struct VOLUME_PHYSICAL_OFFSETS
  numberOfPhysicalOffsets : LibC::UInt32
  physicalOffset : Array(VOLUME_PHYSICAL_OFFSET)
end
struct VOLUME_READ_PLEX_INPUT
  byteOffset : LARGE_INTEGER
  length : LibC::UInt32
  plexNumber : LibC::UInt32
end
struct VOLUME_SET_GPT_ATTRIBUTES_INFORMATION
  gptAttributes : LibC::UInt64
  revertOnClose : BOOLEAN
  applyToAllConnectedVolumes : BOOLEAN
  reserved1 : LibC::UInt16
  reserved2 : LibC::UInt32
end
struct VOLUME_GET_BC_PROPERTIES_INPUT
  version : LibC::UInt32
  reserved1 : LibC::UInt32
  lowestByteOffset : LibC::UInt64
  highestByteOffset : LibC::UInt64
  accessType : LibC::UInt32
  accessMode : LibC::UInt32
end
struct VOLUME_GET_BC_PROPERTIES_OUTPUT
  maximumRequestsPerPeriod : LibC::UInt32
  minimumPeriod : LibC::UInt32
  maximumRequestSize : LibC::UInt64
  estimatedTimePerRequest : LibC::UInt32
  numOutStandingRequests : LibC::UInt32
  requestSize : LibC::UInt64
end
struct VOLUME_ALLOCATE_BC_STREAM_INPUT
  version : LibC::UInt32
  requestsPerPeriod : LibC::UInt32
  period : LibC::UInt32
  retryFailures : BOOLEAN
  discardable : BOOLEAN
  reserved1 : Array(BOOLEAN)
  lowestByteOffset : LibC::UInt64
  highestByteOffset : LibC::UInt64
  accessType : LibC::UInt32
  accessMode : LibC::UInt32
end
struct VOLUME_ALLOCATE_BC_STREAM_OUTPUT
  requestSize : LibC::UInt64
  numOutStandingRequests : LibC::UInt32
end
struct FILE_EXTENT
  volumeOffset : LibC::UInt64
  extentLength : LibC::UInt64
end
struct VOLUME_CRITICAL_IO
  accessType : LibC::UInt32
  extentsCount : LibC::UInt32
  extents : Array(FILE_EXTENT)
end
struct VOLUME_ALLOCATION_HINT_INPUT
  clusterSize : LibC::UInt32
  numberOfClusters : LibC::UInt32
  startingClusterNumber : LibC::Int64
end
struct VOLUME_ALLOCATION_HINT_OUTPUT
  bitmap : Array(LibC::UInt32)
end
struct VOLUME_SHRINK_INFO
  volumeSize : LibC::UInt64
end
struct SHARE_INFO_0
  shi0_netname : PWSTR
end
struct SHARE_INFO_1
  shi1_netname : PWSTR
  shi1_type : SHARE_TYPE
  shi1_remark : PWSTR
end
struct SHARE_INFO_2
  shi2_netname : PWSTR
  shi2_type : SHARE_TYPE
  shi2_remark : PWSTR
  shi2_permissions : SHARE_INFO_PERMISSIONS
  shi2_max_uses : LibC::UInt32
  shi2_current_uses : LibC::UInt32
  shi2_path : PWSTR
  shi2_passwd : PWSTR
end
struct SHARE_INFO_501
  shi501_netname : PWSTR
  shi501_type : SHARE_TYPE
  shi501_remark : PWSTR
  shi501_flags : LibC::UInt32
end
struct SHARE_INFO_502
  shi502_netname : PWSTR
  shi502_type : SHARE_TYPE
  shi502_remark : PWSTR
  shi502_permissions : SHARE_INFO_PERMISSIONS
  shi502_max_uses : LibC::UInt32
  shi502_current_uses : LibC::UInt32
  shi502_path : PWSTR
  shi502_passwd : PWSTR
  shi502_reserved : LibC::UInt32
  shi502_security_descriptor : SECURITY_DESCRIPTOR*
end
struct SHARE_INFO_503
  shi503_netname : PWSTR
  shi503_type : SHARE_TYPE
  shi503_remark : PWSTR
  shi503_permissions : SHARE_INFO_PERMISSIONS
  shi503_max_uses : LibC::UInt32
  shi503_current_uses : LibC::UInt32
  shi503_path : PWSTR
  shi503_passwd : PWSTR
  shi503_servername : PWSTR
  shi503_reserved : LibC::UInt32
  shi503_security_descriptor : SECURITY_DESCRIPTOR*
end
struct SHARE_INFO_1004
  shi1004_remark : PWSTR
end
struct SHARE_INFO_1005
  shi1005_flags : LibC::UInt32
end
struct SHARE_INFO_1006
  shi1006_max_uses : LibC::UInt32
end
struct SHARE_INFO_1501
  shi1501_reserved : LibC::UInt32
  shi1501_security_descriptor : SECURITY_DESCRIPTOR*
end
struct SHARE_INFO_1503
  shi1503_sharefilter : LibC::Guid
end
struct SERVER_ALIAS_INFO_0
  srvai0_alias : PWSTR
  srvai0_target : PWSTR
  srvai0_default : BOOLEAN
  srvai0_reserved : LibC::UInt32
end
struct SESSION_INFO_0
  sesi0_cname : PWSTR
end
struct SESSION_INFO_1
  sesi1_cname : PWSTR
  sesi1_username : PWSTR
  sesi1_num_opens : LibC::UInt32
  sesi1_time : LibC::UInt32
  sesi1_idle_time : LibC::UInt32
  sesi1_user_flags : SESSION_INFO_USER_FLAGS
end
struct SESSION_INFO_2
  sesi2_cname : PWSTR
  sesi2_username : PWSTR
  sesi2_num_opens : LibC::UInt32
  sesi2_time : LibC::UInt32
  sesi2_idle_time : LibC::UInt32
  sesi2_user_flags : SESSION_INFO_USER_FLAGS
  sesi2_cltype_name : PWSTR
end
struct SESSION_INFO_10
  sesi10_cname : PWSTR
  sesi10_username : PWSTR
  sesi10_time : LibC::UInt32
  sesi10_idle_time : LibC::UInt32
end
struct SESSION_INFO_502
  sesi502_cname : PWSTR
  sesi502_username : PWSTR
  sesi502_num_opens : LibC::UInt32
  sesi502_time : LibC::UInt32
  sesi502_idle_time : LibC::UInt32
  sesi502_user_flags : SESSION_INFO_USER_FLAGS
  sesi502_cltype_name : PWSTR
  sesi502_transport : PWSTR
end
struct CONNECTION_INFO_0
  coni0_id : LibC::UInt32
end
struct CONNECTION_INFO_1
  coni1_id : LibC::UInt32
  coni1_type : SHARE_TYPE
  coni1_num_opens : LibC::UInt32
  coni1_num_users : LibC::UInt32
  coni1_time : LibC::UInt32
  coni1_username : PWSTR
  coni1_netname : PWSTR
end
struct FILE_INFO_2
  fi2_id : LibC::UInt32
end
struct FILE_INFO_3
  fi3_id : LibC::UInt32
  fi3_permissions : FILE_INFO_FLAGS_PERMISSIONS
  fi3_num_locks : LibC::UInt32
  fi3_pathname : PWSTR
  fi3_username : PWSTR
end
enum SERVER_CERTIFICATE_TYPE : Int32
QUIC = 0

end
struct SERVER_CERTIFICATE_INFO_0
  srvci0_name : PWSTR
  srvci0_subject : PWSTR
  srvci0_issuer : PWSTR
  srvci0_thumbprint : PWSTR
  srvci0_friendlyname : PWSTR
  srvci0_notbefore : PWSTR
  srvci0_notafter : PWSTR
  srvci0_storelocation : PWSTR
  srvci0_storename : PWSTR
  srvci0_renewalchain : PWSTR
  srvci0_type : LibC::UInt32
  srvci0_flags : LibC::UInt32
end
struct STAT_WORKSTATION_0
  statisticsStartTime : LARGE_INTEGER
  bytesReceived : LARGE_INTEGER
  smbsReceived : LARGE_INTEGER
  pagingReadBytesRequested : LARGE_INTEGER
  nonPagingReadBytesRequested : LARGE_INTEGER
  cacheReadBytesRequested : LARGE_INTEGER
  networkReadBytesRequested : LARGE_INTEGER
  bytesTransmitted : LARGE_INTEGER
  smbsTransmitted : LARGE_INTEGER
  pagingWriteBytesRequested : LARGE_INTEGER
  nonPagingWriteBytesRequested : LARGE_INTEGER
  cacheWriteBytesRequested : LARGE_INTEGER
  networkWriteBytesRequested : LARGE_INTEGER
  initiallyFailedOperations : LibC::UInt32
  failedCompletionOperations : LibC::UInt32
  readOperations : LibC::UInt32
  randomReadOperations : LibC::UInt32
  readSmbs : LibC::UInt32
  largeReadSmbs : LibC::UInt32
  smallReadSmbs : LibC::UInt32
  writeOperations : LibC::UInt32
  randomWriteOperations : LibC::UInt32
  writeSmbs : LibC::UInt32
  largeWriteSmbs : LibC::UInt32
  smallWriteSmbs : LibC::UInt32
  rawReadsDenied : LibC::UInt32
  rawWritesDenied : LibC::UInt32
  networkErrors : LibC::UInt32
  sessions : LibC::UInt32
  failedSessions : LibC::UInt32
  reconnects : LibC::UInt32
  coreConnects : LibC::UInt32
  lanman20Connects : LibC::UInt32
  lanman21Connects : LibC::UInt32
  lanmanNtConnects : LibC::UInt32
  serverDisconnects : LibC::UInt32
  hungSessions : LibC::UInt32
  useCount : LibC::UInt32
  failedUseCount : LibC::UInt32
  currentCommands : LibC::UInt32
end
struct STAT_SERVER_0
  sts0_start : LibC::UInt32
  sts0_fopens : LibC::UInt32
  sts0_devopens : LibC::UInt32
  sts0_jobsqueued : LibC::UInt32
  sts0_sopens : LibC::UInt32
  sts0_stimedout : LibC::UInt32
  sts0_serrorout : LibC::UInt32
  sts0_pwerrors : LibC::UInt32
  sts0_permerrors : LibC::UInt32
  sts0_syserrors : LibC::UInt32
  sts0_bytessent_low : LibC::UInt32
  sts0_bytessent_high : LibC::UInt32
  sts0_bytesrcvd_low : LibC::UInt32
  sts0_bytesrcvd_high : LibC::UInt32
  sts0_avresponse : LibC::UInt32
  sts0_reqbufneed : LibC::UInt32
  sts0_bigbufneed : LibC::UInt32
end
alias PFN_IO_COMPLETION = (FIO_CONTEXT*, FH_OVERLAPPED*, LibC::UInt32, LibC::UInt32 -> LibC::Void)
struct FH_OVERLAPPED
  internal : LibC::UIint*
  internalHigh : LibC::UIint*
  offset : LibC::UInt32
  offsetHigh : LibC::UInt32
  hEvent : HANDLE
  pfnCompletion : PFN_IO_COMPLETION
  reserved1 : LibC::UIint*
  reserved2 : LibC::UIint*
  reserved3 : LibC::UIint*
  reserved4 : LibC::UIint*
end
struct FIO_CONTEXT
  m_dwTempHack : LibC::UInt32
  m_dwSignature : LibC::UInt32
  m_hFile : HANDLE
  m_dwLinesOffset : LibC::UInt32
  m_dwHeaderLength : LibC::UInt32
end
alias FCACHE_CREATE_CALLBACK = (PSTR, LibC::Void*, LibC::UInt32*, LibC::UInt32* -> HANDLE)
alias FCACHE_RICHCREATE_CALLBACK = (PSTR, LibC::Void*, LibC::UInt32*, LibC::UInt32*, BOOL*, BOOL*, BOOL*, BOOL* -> HANDLE)
alias CACHE_KEY_COMPARE = (LibC::UInt32, LibC::Byte*, LibC::UInt32, LibC::Byte* -> LibC::Int32)
alias CACHE_KEY_HASH = (LibC::Byte*, LibC::UInt32 -> LibC::UInt32)
alias CACHE_READ_CALLBACK = (LibC::UInt32, LibC::Byte*, LibC::Void* -> BOOL)
alias CACHE_DESTROY_CALLBACK = (LibC::UInt32, LibC::Byte* -> LibC::Void)
alias CACHE_ACCESS_CHECK = (SECURITY_DESCRIPTOR*, HANDLE, LibC::UInt32, GENERIC_MAPPING*, PRIVILEGE_SET*, LibC::UInt32*, LibC::UInt32*, LibC::Int32* -> BOOL)
struct NAME_CACHE_CONTEXT
  m_dwSignature : LibC::UInt32
end
enum IORING_VERSION : Int32
IORING_VERSION_INVALID = 0

IORING_VERSION_1 = 1

end
enum IORING_FEATURE_FLAGS : Int32
IORING_FEATURE_FLAGS_NONE = 0

IORING_FEATURE_UM_EMULATION = 1

IORING_FEATURE_SET_COMPLETION_EVENT = 2

end
enum IORING_OP_CODE : Int32
IORING_OP_NOP = 0

IORING_OP_READ = 1

IORING_OP_REGISTER_FILES = 2

IORING_OP_REGISTER_BUFFERS = 3

IORING_OP_CANCEL = 4

end
struct IORING_BUFFER_INFO
  address : LibC::Void*
  length : LibC::UInt32
end
struct IORING_REGISTERED_BUFFER
  bufferIndex : LibC::UInt32
  offset : LibC::UInt32
end
struct HIORING__
  unused : LibC::Int32
end
enum IORING_SQE_FLAGS : Int32
IOSQE_FLAGS_NONE = 0

end
enum IORING_CREATE_REQUIRED_FLAGS : Int32
IORING_CREATE_REQUIRED_FLAGS_NONE = 0

end
enum IORING_CREATE_ADVISORY_FLAGS : Int32
IORING_CREATE_ADVISORY_FLAGS_NONE = 0

end
struct IORING_CREATE_FLAGS
  required : IORING_CREATE_REQUIRED_FLAGS
  advisory : IORING_CREATE_ADVISORY_FLAGS
end
struct IORING_INFO
  ioRingVersion : IORING_VERSION
  flags : IORING_CREATE_FLAGS
  submissionQueueSize : LibC::UInt32
  completionQueueSize : LibC::UInt32
end
struct IORING_CAPABILITIES
  maxVersion : IORING_VERSION
  maxSubmissionQueueSize : LibC::UInt32
  maxCompletionQueueSize : LibC::UInt32
  featureFlags : IORING_FEATURE_FLAGS
end
enum IORING_REF_KIND : Int32
IORING_REF_RAW = 0

IORING_REF_REGISTERED = 1

end
struct IORING_HANDLE_REF
  kind : IORING_REF_KIND
  handle : HandleUnion
end
struct IORING_BUFFER_REF
  kind : IORING_REF_KIND
  buffer : BufferUnion
end
struct IORING_CQE
  userData : LibC::UIint*
  resultCode : HRESULT
  information : LibC::UIint*
end
struct FILE_ID_128
  identifier : Array(LibC::Byte)
end
struct FILE_NOTIFY_INFORMATION
  nextEntryOffset : LibC::UInt32
  action : FILE_ACTION
  fileNameLength : LibC::UInt32
  fileName : Array(LibC::Char)
end
struct FILE_NOTIFY_EXTENDED_INFORMATION
  nextEntryOffset : LibC::UInt32
  action : FILE_ACTION
  creationTime : LARGE_INTEGER
  lastModificationTime : LARGE_INTEGER
  lastChangeTime : LARGE_INTEGER
  lastAccessTime : LARGE_INTEGER
  allocatedLength : LARGE_INTEGER
  fileSize : LARGE_INTEGER
  fileAttributes : LibC::UInt32
  reparsePointTag : LibC::UInt32
  fileId : LARGE_INTEGER
  parentFileId : LARGE_INTEGER
  fileNameLength : LibC::UInt32
  fileName : Array(LibC::Char)
end
struct REPARSE_GUID_DATA_BUFFER
  reparseTag : LibC::UInt32
  reparseDataLength : LibC::UInt16
  reserved : LibC::UInt16
  reparseGuid : LibC::Guid
  genericReparseBuffer : GenericReparseBuffer_e__Struct
end
struct TAPE_ERASE
  type : ERASE_TAPE_TYPE
  immediate : BOOLEAN
end
struct TAPE_PREPARE
  operation : PREPARE_TAPE_OPERATION
  immediate : BOOLEAN
end
struct TAPE_WRITE_MARKS
  type : TAPEMARK_TYPE
  count : LibC::UInt32
  immediate : BOOLEAN
end
struct TAPE_GET_POSITION
  type : TAPE_POSITION_TYPE
  partition : LibC::UInt32
  offset : LARGE_INTEGER
end
struct TAPE_SET_POSITION
  method : TAPE_POSITION_METHOD
  partition : LibC::UInt32
  offset : LARGE_INTEGER
  immediate : BOOLEAN
end
enum TRANSACTION_OUTCOME : Int32
TransactionOutcomeUndetermined = 1

TransactionOutcomeCommitted = 2

TransactionOutcomeAborted = 3

end
enum STORAGE_BUS_TYPE : Int32
BusTypeUnknown = 0

BusTypeScsi = 1

BusTypeAtapi = 2

BusTypeAta = 3

BusType1394 = 4

BusTypeSsa = 5

BusTypeFibre = 6

BusTypeUsb = 7

BusTypeRAID = 8

BusTypeiScsi = 9

BusTypeSas = 10

BusTypeSata = 11

BusTypeSd = 12

BusTypeMmc = 13

BusTypeVirtual = 14

BusTypeFileBackedVirtual = 15

BusTypeSpaces = 16

BusTypeNvme = 17

BusTypeSCM = 18

BusTypeUfs = 19

BusTypeMax = 20

BusTypeMaxReserved = 127

end
struct OFSTRUCT
  cBytes : LibC::Byte
  fFixedDisk : LibC::Byte
  nErrCode : LibC::UInt16
  reserved1 : LibC::UInt16
  reserved2 : LibC::UInt16
  szPathName : Array(CHAR)
end
alias PFE_EXPORT_FUNC = (LibC::Byte*, LibC::Void*, LibC::UInt32 -> LibC::UInt32)
alias PFE_IMPORT_FUNC = (LibC::Byte*, LibC::Void*, LibC::UInt32* -> LibC::UInt32)
struct WIN32_STREAM_ID
  dwStreamId : WIN_STREAM_ID
  dwStreamAttributes : LibC::UInt32
  size : LARGE_INTEGER
  dwStreamNameSize : LibC::UInt32
  cStreamName : Array(LibC::Char)
end
alias LPPROGRESS_ROUTINE = (LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LibC::UInt32, LPPROGRESS_ROUTINE_CALLBACK_REASON, HANDLE, HANDLE, LibC::Void* -> LibC::UInt32)
enum COPYFILE2_MESSAGE_TYPE : Int32
COPYFILE2_CALLBACK_NONE = 0

COPYFILE2_CALLBACK_CHUNK_STARTED = 1

COPYFILE2_CALLBACK_CHUNK_FINISHED = 2

COPYFILE2_CALLBACK_STREAM_STARTED = 3

COPYFILE2_CALLBACK_STREAM_FINISHED = 4

COPYFILE2_CALLBACK_POLL_CONTINUE = 5

COPYFILE2_CALLBACK_ERROR = 6

COPYFILE2_CALLBACK_MAX = 7

end
enum COPYFILE2_MESSAGE_ACTION : Int32
COPYFILE2_PROGRESS_CONTINUE = 0

COPYFILE2_PROGRESS_CANCEL = 1

COPYFILE2_PROGRESS_STOP = 2

COPYFILE2_PROGRESS_QUIET = 3

COPYFILE2_PROGRESS_PAUSE = 4

end
enum COPYFILE2_COPY_PHASE : Int32
COPYFILE2_PHASE_NONE = 0

COPYFILE2_PHASE_PREPARE_SOURCE = 1

COPYFILE2_PHASE_PREPARE_DEST = 2

COPYFILE2_PHASE_READ_SOURCE = 3

COPYFILE2_PHASE_WRITE_DESTINATION = 4

COPYFILE2_PHASE_SERVER_COPY = 5

COPYFILE2_PHASE_NAMEGRAFT_COPY = 6

COPYFILE2_PHASE_MAX = 7

end
struct COPYFILE2_MESSAGE
  type : COPYFILE2_MESSAGE_TYPE
  dwPadding : LibC::UInt32
  info : Info_e__Union
end
alias PCOPYFILE2_PROGRESS_ROUTINE = (COPYFILE2_MESSAGE*, LibC::Void* -> COPYFILE2_MESSAGE_ACTION)
struct COPYFILE2_EXTENDED_PARAMETERS
  dwSize : LibC::UInt32
  dwCopyFlags : LibC::UInt32
  pfCancel : BOOL*
  pProgressRoutine : PCOPYFILE2_PROGRESS_ROUTINE
  pvCallbackContext : LibC::Void*
end
struct COPYFILE2_EXTENDED_PARAMETERS_V2
  dwSize : LibC::UInt32
  dwCopyFlags : LibC::UInt32
  pfCancel : BOOL*
  pProgressRoutine : PCOPYFILE2_PROGRESS_ROUTINE
  pvCallbackContext : LibC::Void*
  dwCopyFlagsV2 : LibC::UInt32
  ioDesiredSize : LibC::UInt32
  ioDesiredRate : LibC::UInt32
  reserved : LibC::VoidArray({{type}})*
end
struct FILE_BASIC_INFO
  creationTime : LARGE_INTEGER
  lastAccessTime : LARGE_INTEGER
  lastWriteTime : LARGE_INTEGER
  changeTime : LARGE_INTEGER
  fileAttributes : LibC::UInt32
end
struct FILE_STANDARD_INFO
  allocationSize : LARGE_INTEGER
  endOfFile : LARGE_INTEGER
  numberOfLinks : LibC::UInt32
  deletePending : BOOLEAN
  directory : BOOLEAN
end
struct FILE_NAME_INFO
  fileNameLength : LibC::UInt32
  fileName : Array(LibC::Char)
end
struct FILE_RENAME_INFO
  rootDirectory : HANDLE
  fileNameLength : LibC::UInt32
  fileName : Array(LibC::Char)
end
struct FILE_ALLOCATION_INFO
  allocationSize : LARGE_INTEGER
end
struct FILE_END_OF_FILE_INFO
  endOfFile : LARGE_INTEGER
end
struct FILE_STREAM_INFO
  nextEntryOffset : LibC::UInt32
  streamNameLength : LibC::UInt32
  streamSize : LARGE_INTEGER
  streamAllocationSize : LARGE_INTEGER
  streamName : Array(LibC::Char)
end
struct FILE_COMPRESSION_INFO
  compressedFileSize : LARGE_INTEGER
  compressionFormat : LibC::UInt16
  compressionUnitShift : LibC::Byte
  chunkShift : LibC::Byte
  clusterShift : LibC::Byte
  reserved : Array(LibC::Byte)
end
struct FILE_ATTRIBUTE_TAG_INFO
  fileAttributes : LibC::UInt32
  reparseTag : LibC::UInt32
end
struct FILE_DISPOSITION_INFO
  deleteFileA : BOOLEAN
end
struct FILE_ID_BOTH_DIR_INFO
  nextEntryOffset : LibC::UInt32
  fileIndex : LibC::UInt32
  creationTime : LARGE_INTEGER
  lastAccessTime : LARGE_INTEGER
  lastWriteTime : LARGE_INTEGER
  changeTime : LARGE_INTEGER
  endOfFile : LARGE_INTEGER
  allocationSize : LARGE_INTEGER
  fileAttributes : LibC::UInt32
  fileNameLength : LibC::UInt32
  eaSize : LibC::UInt32
  shortNameLength : LibC::SByte
  shortName : Array(LibC::Char)
  fileId : LARGE_INTEGER
  fileName : Array(LibC::Char)
end
struct FILE_FULL_DIR_INFO
  nextEntryOffset : LibC::UInt32
  fileIndex : LibC::UInt32
  creationTime : LARGE_INTEGER
  lastAccessTime : LARGE_INTEGER
  lastWriteTime : LARGE_INTEGER
  changeTime : LARGE_INTEGER
  endOfFile : LARGE_INTEGER
  allocationSize : LARGE_INTEGER
  fileAttributes : LibC::UInt32
  fileNameLength : LibC::UInt32
  eaSize : LibC::UInt32
  fileName : Array(LibC::Char)
end
enum PRIORITY_HINT : Int32
IoPriorityHintVeryLow = 0

IoPriorityHintLow = 1

IoPriorityHintNormal = 2

MaximumIoPriorityHintType = 3

end
struct FILE_IO_PRIORITY_HINT_INFO
  priorityHint : PRIORITY_HINT
end
struct FILE_ALIGNMENT_INFO
  alignmentRequirement : LibC::UInt32
end
struct FILE_STORAGE_INFO
  logicalBytesPerSector : LibC::UInt32
  physicalBytesPerSectorForAtomicity : LibC::UInt32
  physicalBytesPerSectorForPerformance : LibC::UInt32
  fileSystemEffectivePhysicalBytesPerSectorForAtomicity : LibC::UInt32
  flags : LibC::UInt32
  byteOffsetForSectorAlignment : LibC::UInt32
  byteOffsetForPartitionAlignment : LibC::UInt32
end
struct FILE_ID_INFO
  volumeSerialNumber : LibC::UInt64
  fileId : FILE_ID_128
end
struct FILE_ID_EXTD_DIR_INFO
  nextEntryOffset : LibC::UInt32
  fileIndex : LibC::UInt32
  creationTime : LARGE_INTEGER
  lastAccessTime : LARGE_INTEGER
  lastWriteTime : LARGE_INTEGER
  changeTime : LARGE_INTEGER
  endOfFile : LARGE_INTEGER
  allocationSize : LARGE_INTEGER
  fileAttributes : LibC::UInt32
  fileNameLength : LibC::UInt32
  eaSize : LibC::UInt32
  reparsePointTag : LibC::UInt32
  fileId : FILE_ID_128
  fileName : Array(LibC::Char)
end
struct FILE_REMOTE_PROTOCOL_INFO
  structureVersion : LibC::UInt16
  structureSize : LibC::UInt16
  protocol : LibC::UInt32
  protocolMajorVersion : LibC::UInt16
  protocolMinorVersion : LibC::UInt16
  protocolRevision : LibC::UInt16
  reserved : LibC::UInt16
  flags : LibC::UInt32
  genericReserved : GenericReserved_e__Struct
  protocolSpecific : ProtocolSpecific_e__Union
end
enum FILE_ID_TYPE : Int32
FileIdType = 0

ObjectIdType = 1

ExtendedFileIdType = 2

MaximumFileIdType = 3

end
struct FILE_ID_DESCRIPTOR
  dwSize : LibC::UInt32
  type : FILE_ID_TYPE
end
fun searchPathW(lpPath : PWSTR, lpFileName : PWSTR, lpExtension : PWSTR, nBufferLength : LibC::UInt32, lpBuffer : , lpFilePart : PWSTR*) : LibC::UInt32
fun searchPathA(lpPath : PSTR, lpFileName : PSTR, lpExtension : PSTR, nBufferLength : LibC::UInt32, lpBuffer : , lpFilePart : PSTR*) : LibC::UInt32
fun compareFileTime(lpFileTime1 : FILETIME*, lpFileTime2 : FILETIME*) : LibC::Int32
fun createDirectoryA(lpPathName : PSTR, lpSecurityAttributes : SECURITY_ATTRIBUTES*) : BOOL
fun createDirectoryW(lpPathName : PWSTR, lpSecurityAttributes : SECURITY_ATTRIBUTES*) : BOOL
fun createFileA(lpFileName : PSTR, dwDesiredAccess : FILE_ACCESS_FLAGS, dwShareMode : FILE_SHARE_MODE, lpSecurityAttributes : SECURITY_ATTRIBUTES*, dwCreationDisposition : FILE_CREATION_DISPOSITION, dwFlagsAndAttributes : FILE_FLAGS_AND_ATTRIBUTES, hTemplateFile : HANDLE) : HANDLE
fun createFileW(lpFileName : PWSTR, dwDesiredAccess : FILE_ACCESS_FLAGS, dwShareMode : FILE_SHARE_MODE, lpSecurityAttributes : SECURITY_ATTRIBUTES*, dwCreationDisposition : FILE_CREATION_DISPOSITION, dwFlagsAndAttributes : FILE_FLAGS_AND_ATTRIBUTES, hTemplateFile : HANDLE) : HANDLE
fun defineDosDeviceW(dwFlags : DEFINE_DOS_DEVICE_FLAGS, lpDeviceName : PWSTR, lpTargetPath : PWSTR) : BOOL
fun deleteFileA(lpFileName : PSTR) : BOOL
fun deleteFileW(lpFileName : PWSTR) : BOOL
fun deleteVolumeMountPointW(lpszVolumeMountPoint : PWSTR) : BOOL
fun fileTimeToLocalFileTime(lpFileTime : FILETIME*, lpLocalFileTime : FILETIME*) : BOOL
fun findClose(hFindFile : FindFileHandle) : BOOL
fun findCloseChangeNotification(hChangeHandle : FindChangeNotificationHandle) : BOOL
fun findFirstChangeNotificationA(lpPathName : PSTR, bWatchSubtree : BOOL, dwNotifyFilter : FILE_NOTIFY_CHANGE) : FindChangeNotificationHandle
fun findFirstChangeNotificationW(lpPathName : PWSTR, bWatchSubtree : BOOL, dwNotifyFilter : FILE_NOTIFY_CHANGE) : FindChangeNotificationHandle
fun findFirstFileA(lpFileName : PSTR, lpFindFileData : WIN32_FIND_DATAA*) : FindFileHandle
fun findFirstFileW(lpFileName : PWSTR, lpFindFileData : WIN32_FIND_DATAW*) : FindFileHandle
fun findFirstFileExA(lpFileName : PSTR, fInfoLevelId : FINDEX_INFO_LEVELS, lpFindFileData : LibC::Void*, fSearchOp : FINDEX_SEARCH_OPS, lpSearchFilter : LibC::Void*, dwAdditionalFlags : FIND_FIRST_EX_FLAGS) : FindFileHandle
fun findFirstFileExW(lpFileName : PWSTR, fInfoLevelId : FINDEX_INFO_LEVELS, lpFindFileData : LibC::Void*, fSearchOp : FINDEX_SEARCH_OPS, lpSearchFilter : LibC::Void*, dwAdditionalFlags : FIND_FIRST_EX_FLAGS) : FindFileHandle
fun findFirstVolumeW(lpszVolumeName : , cchBufferLength : LibC::UInt32) : FindVolumeHandle
fun findNextChangeNotification(hChangeHandle : FindChangeNotificationHandle) : BOOL
fun findNextFileA(hFindFile : FindFileHandle, lpFindFileData : WIN32_FIND_DATAA*) : BOOL
fun findNextFileW(hFindFile : HANDLE, lpFindFileData : WIN32_FIND_DATAW*) : BOOL
fun findNextVolumeW(hFindVolume : FindVolumeHandle, lpszVolumeName : , cchBufferLength : LibC::UInt32) : BOOL
fun findVolumeClose(hFindVolume : FindVolumeHandle) : BOOL
fun flushFileBuffers(hFile : HANDLE) : BOOL
fun getDiskFreeSpaceA(lpRootPathName : PSTR, lpSectorsPerCluster : LibC::UInt32*, lpBytesPerSector : LibC::UInt32*, lpNumberOfFreeClusters : LibC::UInt32*, lpTotalNumberOfClusters : LibC::UInt32*) : BOOL
fun getDiskFreeSpaceW(lpRootPathName : PWSTR, lpSectorsPerCluster : LibC::UInt32*, lpBytesPerSector : LibC::UInt32*, lpNumberOfFreeClusters : LibC::UInt32*, lpTotalNumberOfClusters : LibC::UInt32*) : BOOL
fun getDiskFreeSpaceExA(lpDirectoryName : PSTR, lpFreeBytesAvailableToCaller : ULARGE_INTEGER*, lpTotalNumberOfBytes : ULARGE_INTEGER*, lpTotalNumberOfFreeBytes : ULARGE_INTEGER*) : BOOL
fun getDiskFreeSpaceExW(lpDirectoryName : PWSTR, lpFreeBytesAvailableToCaller : ULARGE_INTEGER*, lpTotalNumberOfBytes : ULARGE_INTEGER*, lpTotalNumberOfFreeBytes : ULARGE_INTEGER*) : BOOL
fun getDiskSpaceInformationA(rootPath : PSTR, diskSpaceInfo : DISK_SPACE_INFORMATION*) : HRESULT
fun getDiskSpaceInformationW(rootPath : PWSTR, diskSpaceInfo : DISK_SPACE_INFORMATION*) : HRESULT
fun getDriveTypeA(lpRootPathName : PSTR) : LibC::UInt32
fun getDriveTypeW(lpRootPathName : PWSTR) : LibC::UInt32
fun getFileAttributesA(lpFileName : PSTR) : LibC::UInt32
fun getFileAttributesW(lpFileName : PWSTR) : LibC::UInt32
fun getFileAttributesExA(lpFileName : PSTR, fInfoLevelId : GET_FILEEX_INFO_LEVELS, lpFileInformation : LibC::Void*) : BOOL
fun getFileAttributesExW(lpFileName : PWSTR, fInfoLevelId : GET_FILEEX_INFO_LEVELS, lpFileInformation : LibC::Void*) : BOOL
fun getFileInformationByHandle(hFile : HANDLE, lpFileInformation : BY_HANDLE_FILE_INFORMATION*) : BOOL
fun getFileSize(hFile : HANDLE, lpFileSizeHigh : LibC::UInt32*) : LibC::UInt32
fun getFileSizeEx(hFile : HANDLE, lpFileSize : LARGE_INTEGER*) : BOOL
fun getFileType(hFile : HANDLE) : LibC::UInt32
fun getFinalPathNameByHandleA(hFile : HANDLE, lpszFilePath : , cchFilePath : LibC::UInt32, dwFlags : FILE_NAME) : LibC::UInt32
fun getFinalPathNameByHandleW(hFile : HANDLE, lpszFilePath : , cchFilePath : LibC::UInt32, dwFlags : FILE_NAME) : LibC::UInt32
fun getFileTime(hFile : HANDLE, lpCreationTime : FILETIME*, lpLastAccessTime : FILETIME*, lpLastWriteTime : FILETIME*) : BOOL
fun getFullPathNameW(lpFileName : PWSTR, nBufferLength : LibC::UInt32, lpBuffer : , lpFilePart : PWSTR*) : LibC::UInt32
fun getFullPathNameA(lpFileName : PSTR, nBufferLength : LibC::UInt32, lpBuffer : , lpFilePart : PSTR*) : LibC::UInt32
fun getLogicalDrives() : LibC::UInt32
fun getLogicalDriveStringsW(nBufferLength : LibC::UInt32, lpBuffer : ) : LibC::UInt32
fun getLongPathNameA(lpszShortPath : PSTR, lpszLongPath : , cchBuffer : LibC::UInt32) : LibC::UInt32
fun getLongPathNameW(lpszShortPath : PWSTR, lpszLongPath : , cchBuffer : LibC::UInt32) : LibC::UInt32
fun areShortNamesEnabled(handle : HANDLE, enabled : BOOL*) : BOOL
fun getShortPathNameW(lpszLongPath : PWSTR, lpszShortPath : , cchBuffer : LibC::UInt32) : LibC::UInt32
fun getTempFileNameW(lpPathName : PWSTR, lpPrefixString : PWSTR, uUnique : LibC::UInt32, lpTempFileName : ) : LibC::UInt32
fun getVolumeInformationByHandleW(hFile : HANDLE, lpVolumeNameBuffer : , nVolumeNameSize : LibC::UInt32, lpVolumeSerialNumber : LibC::UInt32*, lpMaximumComponentLength : LibC::UInt32*, lpFileSystemFlags : LibC::UInt32*, lpFileSystemNameBuffer : , nFileSystemNameSize : LibC::UInt32) : BOOL
fun getVolumeInformationW(lpRootPathName : PWSTR, lpVolumeNameBuffer : , nVolumeNameSize : LibC::UInt32, lpVolumeSerialNumber : LibC::UInt32*, lpMaximumComponentLength : LibC::UInt32*, lpFileSystemFlags : LibC::UInt32*, lpFileSystemNameBuffer : , nFileSystemNameSize : LibC::UInt32) : BOOL
fun getVolumePathNameW(lpszFileName : PWSTR, lpszVolumePathName : , cchBufferLength : LibC::UInt32) : BOOL
fun localFileTimeToFileTime(lpLocalFileTime : FILETIME*, lpFileTime : FILETIME*) : BOOL
fun lockFile(hFile : HANDLE, dwFileOffsetLow : LibC::UInt32, dwFileOffsetHigh : LibC::UInt32, nNumberOfBytesToLockLow : LibC::UInt32, nNumberOfBytesToLockHigh : LibC::UInt32) : BOOL
fun lockFileEx(hFile : HANDLE, dwFlags : LOCK_FILE_FLAGS, dwReserved : LibC::UInt32, nNumberOfBytesToLockLow : LibC::UInt32, nNumberOfBytesToLockHigh : LibC::UInt32, lpOverlapped : OVERLAPPED*) : BOOL
fun queryDosDeviceW(lpDeviceName : PWSTR, lpTargetPath : , ucchMax : LibC::UInt32) : LibC::UInt32
fun readFile(hFile : HANDLE, lpBuffer : LibC::Void*, nNumberOfBytesToRead : LibC::UInt32, lpNumberOfBytesRead : LibC::UInt32*, lpOverlapped : OVERLAPPED*) : BOOL
fun readFileEx(hFile : HANDLE, lpBuffer : LibC::Void*, nNumberOfBytesToRead : LibC::UInt32, lpOverlapped : OVERLAPPED*, lpCompletionRoutine : LPOVERLAPPED_COMPLETION_ROUTINE) : BOOL
fun readFileScatter(hFile : HANDLE, aSegmentArray : FILE_SEGMENT_ELEMENT*, nNumberOfBytesToRead : LibC::UInt32, lpReserved : LibC::UInt32*, lpOverlapped : OVERLAPPED*) : BOOL
fun removeDirectoryA(lpPathName : PSTR) : BOOL
fun removeDirectoryW(lpPathName : PWSTR) : BOOL
fun setEndOfFile(hFile : HANDLE) : BOOL
fun setFileAttributesA(lpFileName : PSTR, dwFileAttributes : FILE_FLAGS_AND_ATTRIBUTES) : BOOL
fun setFileAttributesW(lpFileName : PWSTR, dwFileAttributes : FILE_FLAGS_AND_ATTRIBUTES) : BOOL
fun setFileInformationByHandle(hFile : HANDLE, fileInformationClass : FILE_INFO_BY_HANDLE_CLASS, lpFileInformation : LibC::Void*, dwBufferSize : LibC::UInt32) : BOOL
fun setFilePointer(hFile : HANDLE, lDistanceToMove : LibC::Int32, lpDistanceToMoveHigh : LibC::Int32*, dwMoveMethod : SET_FILE_POINTER_MOVE_METHOD) : LibC::UInt32
fun setFilePointerEx(hFile : HANDLE, liDistanceToMove : LARGE_INTEGER, lpNewFilePointer : LARGE_INTEGER*, dwMoveMethod : SET_FILE_POINTER_MOVE_METHOD) : BOOL
fun setFileTime(hFile : HANDLE, lpCreationTime : FILETIME*, lpLastAccessTime : FILETIME*, lpLastWriteTime : FILETIME*) : BOOL
fun setFileValidData(hFile : HANDLE, validDataLength : LibC::Int64) : BOOL
fun unlockFile(hFile : HANDLE, dwFileOffsetLow : LibC::UInt32, dwFileOffsetHigh : LibC::UInt32, nNumberOfBytesToUnlockLow : LibC::UInt32, nNumberOfBytesToUnlockHigh : LibC::UInt32) : BOOL
fun unlockFileEx(hFile : HANDLE, dwReserved : LibC::UInt32, nNumberOfBytesToUnlockLow : LibC::UInt32, nNumberOfBytesToUnlockHigh : LibC::UInt32, lpOverlapped : OVERLAPPED*) : BOOL
fun writeFile(hFile : HANDLE, lpBuffer : LibC::Void*, nNumberOfBytesToWrite : LibC::UInt32, lpNumberOfBytesWritten : LibC::UInt32*, lpOverlapped : OVERLAPPED*) : BOOL
fun writeFileEx(hFile : HANDLE, lpBuffer : LibC::Void*, nNumberOfBytesToWrite : LibC::UInt32, lpOverlapped : OVERLAPPED*, lpCompletionRoutine : LPOVERLAPPED_COMPLETION_ROUTINE) : BOOL
fun writeFileGather(hFile : HANDLE, aSegmentArray : FILE_SEGMENT_ELEMENT*, nNumberOfBytesToWrite : LibC::UInt32, lpReserved : LibC::UInt32*, lpOverlapped : OVERLAPPED*) : BOOL
fun getTempPathW(nBufferLength : LibC::UInt32, lpBuffer : ) : LibC::UInt32
fun getVolumeNameForVolumeMountPointW(lpszVolumeMountPoint : PWSTR, lpszVolumeName : , cchBufferLength : LibC::UInt32) : BOOL
fun getVolumePathNamesForVolumeNameW(lpszVolumeName : PWSTR, lpszVolumePathNames : , cchBufferLength : LibC::UInt32, lpcchReturnLength : LibC::UInt32*) : BOOL
fun createFile2(lpFileName : PWSTR, dwDesiredAccess : FILE_ACCESS_FLAGS, dwShareMode : FILE_SHARE_MODE, dwCreationDisposition : FILE_CREATION_DISPOSITION, pCreateExParams : CREATEFILE2_EXTENDED_PARAMETERS*) : HANDLE
fun setFileIoOverlappedRange(fileHandle : HANDLE, overlappedRangeStart : LibC::Byte*, length : LibC::UInt32) : BOOL
fun getCompressedFileSizeA(lpFileName : PSTR, lpFileSizeHigh : LibC::UInt32*) : LibC::UInt32
fun getCompressedFileSizeW(lpFileName : PWSTR, lpFileSizeHigh : LibC::UInt32*) : LibC::UInt32
fun findFirstStreamW(lpFileName : PWSTR, infoLevel : STREAM_INFO_LEVELS, lpFindStreamData : LibC::Void*, dwFlags : LibC::UInt32) : FindStreamHandle
fun findNextStreamW(hFindStream : FindStreamHandle, lpFindStreamData : LibC::Void*) : BOOL
fun areFileApisANSI() : BOOL
fun getTempPathA(nBufferLength : LibC::UInt32, lpBuffer : ) : LibC::UInt32
fun findFirstFileNameW(lpFileName : PWSTR, dwFlags : LibC::UInt32, stringLength : LibC::UInt32*, linkName : ) : FindFileNameHandle
fun findNextFileNameW(hFindStream : FindFileNameHandle, stringLength : LibC::UInt32*, linkName : ) : BOOL
fun getVolumeInformationA(lpRootPathName : PSTR, lpVolumeNameBuffer : , nVolumeNameSize : LibC::UInt32, lpVolumeSerialNumber : LibC::UInt32*, lpMaximumComponentLength : LibC::UInt32*, lpFileSystemFlags : LibC::UInt32*, lpFileSystemNameBuffer : , nFileSystemNameSize : LibC::UInt32) : BOOL
fun getTempFileNameA(lpPathName : PSTR, lpPrefixString : PSTR, uUnique : LibC::UInt32, lpTempFileName : ) : LibC::UInt32
fun setFileApisToOEM() : LibC::Void
fun setFileApisToANSI() : LibC::Void
fun getTempPath2W(bufferLength : LibC::UInt32, buffer : ) : LibC::UInt32
fun getTempPath2A(bufferLength : LibC::UInt32, buffer : ) : LibC::UInt32
fun copyFileFromAppW(lpExistingFileName : PWSTR, lpNewFileName : PWSTR, bFailIfExists : BOOL) : BOOL
fun createDirectoryFromAppW(lpPathName : PWSTR, lpSecurityAttributes : SECURITY_ATTRIBUTES*) : BOOL
fun createFileFromAppW(lpFileName : PWSTR, dwDesiredAccess : LibC::UInt32, dwShareMode : LibC::UInt32, lpSecurityAttributes : SECURITY_ATTRIBUTES*, dwCreationDisposition : LibC::UInt32, dwFlagsAndAttributes : LibC::UInt32, hTemplateFile : HANDLE) : HANDLE
fun createFile2FromAppW(lpFileName : PWSTR, dwDesiredAccess : LibC::UInt32, dwShareMode : LibC::UInt32, dwCreationDisposition : LibC::UInt32, pCreateExParams : CREATEFILE2_EXTENDED_PARAMETERS*) : HANDLE
fun deleteFileFromAppW(lpFileName : PWSTR) : BOOL
fun findFirstFileExFromAppW(lpFileName : PWSTR, fInfoLevelId : FINDEX_INFO_LEVELS, lpFindFileData : LibC::Void*, fSearchOp : FINDEX_SEARCH_OPS, lpSearchFilter : LibC::Void*, dwAdditionalFlags : LibC::UInt32) : HANDLE
fun getFileAttributesExFromAppW(lpFileName : PWSTR, fInfoLevelId : GET_FILEEX_INFO_LEVELS, lpFileInformation : LibC::Void*) : BOOL
fun moveFileFromAppW(lpExistingFileName : PWSTR, lpNewFileName : PWSTR) : BOOL
fun removeDirectoryFromAppW(lpPathName : PWSTR) : BOOL
fun replaceFileFromAppW(lpReplacedFileName : PWSTR, lpReplacementFileName : PWSTR, lpBackupFileName : PWSTR, dwReplaceFlags : LibC::UInt32, lpExclude : LibC::Void*, lpReserved : LibC::Void*) : BOOL
fun setFileAttributesFromAppW(lpFileName : PWSTR, dwFileAttributes : LibC::UInt32) : BOOL
fun verFindFileA(uFlags : VER_FIND_FILE_FLAGS, szFileName : PSTR, szWinDir : PSTR, szAppDir : PSTR, szCurDir : , puCurDirLen : LibC::UInt32*, szDestDir : , puDestDirLen : LibC::UInt32*) : VER_FIND_FILE_STATUS
fun verFindFileW(uFlags : VER_FIND_FILE_FLAGS, szFileName : PWSTR, szWinDir : PWSTR, szAppDir : PWSTR, szCurDir : , puCurDirLen : LibC::UInt32*, szDestDir : , puDestDirLen : LibC::UInt32*) : VER_FIND_FILE_STATUS
fun verInstallFileA(uFlags : VER_INSTALL_FILE_FLAGS, szSrcFileName : PSTR, szDestFileName : PSTR, szSrcDir : PSTR, szDestDir : PSTR, szCurDir : PSTR, szTmpFile : , puTmpFileLen : LibC::UInt32*) : VER_INSTALL_FILE_STATUS
fun verInstallFileW(uFlags : VER_INSTALL_FILE_FLAGS, szSrcFileName : PWSTR, szDestFileName : PWSTR, szSrcDir : PWSTR, szDestDir : PWSTR, szCurDir : PWSTR, szTmpFile : , puTmpFileLen : LibC::UInt32*) : VER_INSTALL_FILE_STATUS
fun getFileVersionInfoSizeA(lptstrFilename : PSTR, lpdwHandle : LibC::UInt32*) : LibC::UInt32
fun getFileVersionInfoSizeW(lptstrFilename : PWSTR, lpdwHandle : LibC::UInt32*) : LibC::UInt32
fun getFileVersionInfoA(lptstrFilename : PSTR, dwHandle : LibC::UInt32, dwLen : LibC::UInt32, lpData : LibC::Void*) : BOOL
fun getFileVersionInfoW(lptstrFilename : PWSTR, dwHandle : LibC::UInt32, dwLen : LibC::UInt32, lpData : LibC::Void*) : BOOL
fun getFileVersionInfoSizeExA(dwFlags : GET_FILE_VERSION_INFO_FLAGS, lpwstrFilename : PSTR, lpdwHandle : LibC::UInt32*) : LibC::UInt32
fun getFileVersionInfoSizeExW(dwFlags : GET_FILE_VERSION_INFO_FLAGS, lpwstrFilename : PWSTR, lpdwHandle : LibC::UInt32*) : LibC::UInt32
fun getFileVersionInfoExA(dwFlags : GET_FILE_VERSION_INFO_FLAGS, lpwstrFilename : PSTR, dwHandle : LibC::UInt32, dwLen : LibC::UInt32, lpData : LibC::Void*) : BOOL
fun getFileVersionInfoExW(dwFlags : GET_FILE_VERSION_INFO_FLAGS, lpwstrFilename : PWSTR, dwHandle : LibC::UInt32, dwLen : LibC::UInt32, lpData : LibC::Void*) : BOOL
fun verLanguageNameA(wLang : LibC::UInt32, szLang : , cchLang : LibC::UInt32) : LibC::UInt32
fun verLanguageNameW(wLang : LibC::UInt32, szLang : , cchLang : LibC::UInt32) : LibC::UInt32
fun verQueryValueA(pBlock : LibC::Void*, lpSubBlock : PSTR, lplpBuffer : LibC::Void**, puLen : LibC::UInt32*) : BOOL
fun verQueryValueW(pBlock : LibC::Void*, lpSubBlock : PWSTR, lplpBuffer : LibC::Void**, puLen : LibC::UInt32*) : BOOL
fun lsnEqual(plsn1 : CLS_LSN*, plsn2 : CLS_LSN*) : BOOLEAN
fun lsnLess(plsn1 : CLS_LSN*, plsn2 : CLS_LSN*) : BOOLEAN
fun lsnGreater(plsn1 : CLS_LSN*, plsn2 : CLS_LSN*) : BOOLEAN
fun lsnNull(plsn : CLS_LSN*) : BOOLEAN
fun lsnContainer(plsn : CLS_LSN*) : LibC::UInt32
fun lsnCreate(cidContainer : LibC::UInt32, offBlock : LibC::UInt32, cRecord : LibC::UInt32) : CLS_LSN
fun lsnBlockOffset(plsn : CLS_LSN*) : LibC::UInt32
fun lsnRecordSequence(plsn : CLS_LSN*) : LibC::UInt32
fun lsnInvalid(plsn : CLS_LSN*) : BOOLEAN
fun lsnIncrement(plsn : CLS_LSN*) : CLS_LSN
fun createLogFile(pszLogFileName : PWSTR, fDesiredAccess : FILE_ACCESS_FLAGS, dwShareMode : FILE_SHARE_MODE, psaLogFile : SECURITY_ATTRIBUTES*, fCreateDisposition : FILE_CREATION_DISPOSITION, fFlagsAndAttributes : FILE_FLAGS_AND_ATTRIBUTES) : HANDLE
fun deleteLogByHandle(hLog : HANDLE) : BOOL
fun deleteLogFile(pszLogFileName : PWSTR, pvReserved : LibC::Void*) : BOOL
fun addLogContainer(hLog : HANDLE, pcbContainer : LibC::UInt64*, pwszContainerPath : PWSTR, pReserved : LibC::Void*) : BOOL
fun addLogContainerSet(hLog : HANDLE, cContainer : LibC::UInt16, pcbContainer : LibC::UInt64*, rgwszContainerPath : , pReserved : LibC::Void*) : BOOL
fun removeLogContainer(hLog : HANDLE, pwszContainerPath : PWSTR, fForce : BOOL, pReserved : LibC::Void*) : BOOL
fun removeLogContainerSet(hLog : HANDLE, cContainer : LibC::UInt16, rgwszContainerPath : , fForce : BOOL, pReserved : LibC::Void*) : BOOL
fun setLogArchiveTail(hLog : HANDLE, plsnArchiveTail : CLS_LSN*, pReserved : LibC::Void*) : BOOL
fun setEndOfLog(hLog : HANDLE, plsnEnd : CLS_LSN*, lpOverlapped : OVERLAPPED*) : BOOL
fun truncateLog(pvMarshal : LibC::Void*, plsnEnd : CLS_LSN*, lpOverlapped : OVERLAPPED*) : BOOL
fun createLogContainerScanContext(hLog : HANDLE, cFromContainer : LibC::UInt32, cContainers : LibC::UInt32, eScanMode : LibC::Byte, pcxScan : CLS_SCAN_CONTEXT*, pOverlapped : OVERLAPPED*) : BOOL
fun scanLogContainers(pcxScan : CLS_SCAN_CONTEXT*, eScanMode : LibC::Byte, pReserved : LibC::Void*) : BOOL
fun alignReservedLog(pvMarshal : LibC::Void*, cReservedRecords : LibC::UInt32, rgcbReservation : LibC::Int64*, pcbAlignReservation : LibC::Int64*) : BOOL
fun allocReservedLog(pvMarshal : LibC::Void*, cReservedRecords : LibC::UInt32, pcbAdjustment : LibC::Int64*) : BOOL
fun freeReservedLog(pvMarshal : LibC::Void*, cReservedRecords : LibC::UInt32, pcbAdjustment : LibC::Int64*) : BOOL
fun getLogFileInformation(hLog : HANDLE, pinfoBuffer : CLS_INFORMATION*, cbBuffer : LibC::UInt32*) : BOOL
fun setLogArchiveMode(hLog : HANDLE, eMode : CLFS_LOG_ARCHIVE_MODE) : BOOL
fun readLogRestartArea(pvMarshal : LibC::Void*, ppvRestartBuffer : LibC::Void**, pcbRestartBuffer : LibC::UInt32*, plsn : CLS_LSN*, ppvContext : LibC::Void**, pOverlapped : OVERLAPPED*) : BOOL
fun readPreviousLogRestartArea(pvReadContext : LibC::Void*, ppvRestartBuffer : LibC::Void**, pcbRestartBuffer : LibC::UInt32*, plsnRestart : CLS_LSN*, pOverlapped : OVERLAPPED*) : BOOL
fun writeLogRestartArea(pvMarshal : LibC::Void*, pvRestartBuffer : LibC::Void*, cbRestartBuffer : LibC::UInt32, plsnBase : CLS_LSN*, fFlags : CLFS_FLAG, pcbWritten : LibC::UInt32*, plsnNext : CLS_LSN*, pOverlapped : OVERLAPPED*) : BOOL
fun getLogReservationInfo(pvMarshal : LibC::Void*, pcbRecordNumber : LibC::UInt32*, pcbUserReservation : LibC::Int64*, pcbCommitReservation : LibC::Int64*) : BOOL
fun advanceLogBase(pvMarshal : LibC::Void*, plsnBase : CLS_LSN*, fFlags : LibC::UInt32, pOverlapped : OVERLAPPED*) : BOOL
fun closeAndResetLogFile(hLog : HANDLE) : BOOL
fun createLogMarshallingArea(hLog : HANDLE, pfnAllocBuffer : CLFS_BLOCK_ALLOCATION, pfnFreeBuffer : CLFS_BLOCK_DEALLOCATION, pvBlockAllocContext : LibC::Void*, cbMarshallingBuffer : LibC::UInt32, cMaxWriteBuffers : LibC::UInt32, cMaxReadBuffers : LibC::UInt32, ppvMarshal : LibC::Void**) : BOOL
fun deleteLogMarshallingArea(pvMarshal : LibC::Void*) : BOOL
fun reserveAndAppendLog(pvMarshal : LibC::Void*, rgWriteEntries : CLS_WRITE_ENTRY*, cWriteEntries : LibC::UInt32, plsnUndoNext : CLS_LSN*, plsnPrevious : CLS_LSN*, cReserveRecords : LibC::UInt32, rgcbReservation : LibC::Int64*, fFlags : CLFS_FLAG, plsn : CLS_LSN*, pOverlapped : OVERLAPPED*) : BOOL
fun reserveAndAppendLogAligned(pvMarshal : LibC::Void*, rgWriteEntries : CLS_WRITE_ENTRY*, cWriteEntries : LibC::UInt32, cbEntryAlignment : LibC::UInt32, plsnUndoNext : CLS_LSN*, plsnPrevious : CLS_LSN*, cReserveRecords : LibC::UInt32, rgcbReservation : LibC::Int64*, fFlags : CLFS_FLAG, plsn : CLS_LSN*, pOverlapped : OVERLAPPED*) : BOOL
fun flushLogBuffers(pvMarshal : LibC::Void*, pOverlapped : OVERLAPPED*) : BOOL
fun flushLogToLsn(pvMarshalContext : LibC::Void*, plsnFlush : CLS_LSN*, plsnLastFlushed : CLS_LSN*, pOverlapped : OVERLAPPED*) : BOOL
fun readLogRecord(pvMarshal : LibC::Void*, plsnFirst : CLS_LSN*, eContextMode : CLFS_CONTEXT_MODE, ppvReadBuffer : LibC::Void**, pcbReadBuffer : LibC::UInt32*, peRecordType : LibC::Byte*, plsnUndoNext : CLS_LSN*, plsnPrevious : CLS_LSN*, ppvReadContext : LibC::Void**, pOverlapped : OVERLAPPED*) : BOOL
fun readNextLogRecord(pvReadContext : LibC::Void*, ppvBuffer : LibC::Void**, pcbBuffer : LibC::UInt32*, peRecordType : LibC::Byte*, plsnUser : CLS_LSN*, plsnUndoNext : CLS_LSN*, plsnPrevious : CLS_LSN*, plsnRecord : CLS_LSN*, pOverlapped : OVERLAPPED*) : BOOL
fun terminateReadLog(pvCursorContext : LibC::Void*) : BOOL
fun prepareLogArchive(hLog : HANDLE, pszBaseLogFileName : , cLen : LibC::UInt32, plsnLow : CLS_LSN*, plsnHigh : CLS_LSN*, pcActualLength : LibC::UInt32*, poffBaseLogFileData : LibC::UInt64*, pcbBaseLogFileLength : LibC::UInt64*, plsnBase : CLS_LSN*, plsnLast : CLS_LSN*, plsnCurrentArchiveTail : CLS_LSN*, ppvArchiveContext : LibC::Void**) : BOOL
fun readLogArchiveMetadata(pvArchiveContext : LibC::Void*, cbOffset : LibC::UInt32, cbBytesToRead : LibC::UInt32, pbReadBuffer : LibC::Byte*, pcbBytesRead : LibC::UInt32*) : BOOL
fun getNextLogArchiveExtent(pvArchiveContext : LibC::Void*, rgadExtent : CLS_ARCHIVE_DESCRIPTOR*, cDescriptors : LibC::UInt32, pcDescriptorsReturned : LibC::UInt32*) : BOOL
fun terminateLogArchive(pvArchiveContext : LibC::Void*) : BOOL
fun validateLog(pszLogFileName : PWSTR, psaLogFile : SECURITY_ATTRIBUTES*, pinfoBuffer : CLS_INFORMATION*, pcbBuffer : LibC::UInt32*) : BOOL
fun getLogContainerName(hLog : HANDLE, cidLogicalContainer : LibC::UInt32, pwstrContainerName : PWSTR, cLenContainerName : LibC::UInt32, pcActualLenContainerName : LibC::UInt32*) : BOOL
fun getLogIoStatistics(hLog : HANDLE, pvStatsBuffer : LibC::Void*, cbStatsBuffer : LibC::UInt32, eStatsClass : CLFS_IOSTATS_CLASS, pcbStatsWritten : LibC::UInt32*) : BOOL
fun registerManageableLogClient(hLog : HANDLE, pCallbacks : LOG_MANAGEMENT_CALLBACKS*) : BOOL
fun deregisterManageableLogClient(hLog : HANDLE) : BOOL
fun readLogNotification(hLog : HANDLE, pNotification : CLFS_MGMT_NOTIFICATION*, lpOverlapped : OVERLAPPED*) : BOOL
fun installLogPolicy(hLog : HANDLE, pPolicy : CLFS_MGMT_POLICY*) : BOOL
fun removeLogPolicy(hLog : HANDLE, ePolicyType : CLFS_MGMT_POLICY_TYPE) : BOOL
fun queryLogPolicy(hLog : HANDLE, ePolicyType : CLFS_MGMT_POLICY_TYPE, pPolicyBuffer : CLFS_MGMT_POLICY*, pcbPolicyBuffer : LibC::UInt32*) : BOOL
fun setLogFileSizeWithPolicy(hLog : HANDLE, pDesiredSize : LibC::UInt64*, pResultingSize : LibC::UInt64*) : BOOL
fun handleLogFull(hLog : HANDLE) : BOOL
fun logTailAdvanceFailure(hLog : HANDLE, dwReason : LibC::UInt32) : BOOL
fun registerForLogWriteNotification(hLog : HANDLE, cbThreshold : LibC::UInt32, fEnable : BOOL) : BOOL
fun queryUsersOnEncryptedFile(lpFileName : PWSTR, pUsers : ENCRYPTION_CERTIFICATE_HASH_LIST**) : LibC::UInt32
fun queryRecoveryAgentsOnEncryptedFile(lpFileName : PWSTR, pRecoveryAgents : ENCRYPTION_CERTIFICATE_HASH_LIST**) : LibC::UInt32
fun removeUsersFromEncryptedFile(lpFileName : PWSTR, pHashes : ENCRYPTION_CERTIFICATE_HASH_LIST*) : LibC::UInt32
fun addUsersToEncryptedFile(lpFileName : PWSTR, pEncryptionCertificates : ENCRYPTION_CERTIFICATE_LIST*) : LibC::UInt32
fun setUserFileEncryptionKey(pEncryptionCertificate : ENCRYPTION_CERTIFICATE*) : LibC::UInt32
fun setUserFileEncryptionKeyEx(pEncryptionCertificate : ENCRYPTION_CERTIFICATE*, dwCapabilities : LibC::UInt32, dwFlags : LibC::UInt32, pvReserved : LibC::Void*) : LibC::UInt32
fun freeEncryptionCertificateHashList(pUsers : ENCRYPTION_CERTIFICATE_HASH_LIST*) : LibC::Void
fun encryptionDisable(dirPath : PWSTR, disable : BOOL) : BOOL
fun duplicateEncryptionInfoFile(srcFileName : PWSTR, dstFileName : PWSTR, dwCreationDistribution : LibC::UInt32, dwAttributes : LibC::UInt32, lpSecurityAttributes : SECURITY_ATTRIBUTES*) : LibC::UInt32
fun getEncryptedFileMetadata(lpFileName : PWSTR, pcbMetadata : LibC::UInt32*, ppbMetadata : LibC::Byte**) : LibC::UInt32
fun setEncryptedFileMetadata(lpFileName : PWSTR, pbOldMetadata : LibC::Byte*, pbNewMetadata : LibC::Byte*, pOwnerHash : ENCRYPTION_CERTIFICATE_HASH*, dwOperation : LibC::UInt32, pCertificatesAdded : ENCRYPTION_CERTIFICATE_HASH_LIST*) : LibC::UInt32
fun freeEncryptedFileMetadata(pbMetadata : LibC::Byte*) : LibC::Void
fun lZStart() : LibC::Int32
fun lZDone() : LibC::Void
fun copyLZFile(hfSource : LibC::Int32, hfDest : LibC::Int32) : LibC::Int32
fun lZCopy(hfSource : LibC::Int32, hfDest : LibC::Int32) : LibC::Int32
fun lZInit(hfSource : LibC::Int32) : LibC::Int32
fun getExpandedNameA(lpszSource : PSTR, lpszBuffer : ) : LibC::Int32
fun getExpandedNameW(lpszSource : PWSTR, lpszBuffer : ) : LibC::Int32
fun lZOpenFileA(lpFileName : PSTR, lpReOpenBuf : OFSTRUCT*, wStyle : LZOPENFILE_STYLE) : LibC::Int32
fun lZOpenFileW(lpFileName : PWSTR, lpReOpenBuf : OFSTRUCT*, wStyle : LZOPENFILE_STYLE) : LibC::Int32
fun lZSeek(hFile : LibC::Int32, lOffset : LibC::Int32, iOrigin : LibC::Int32) : LibC::Int32
fun lZRead(hFile : LibC::Int32, lpBuffer : PSTR, cbRead : LibC::Int32) : LibC::Int32
fun lZClose(hFile : LibC::Int32) : LibC::Void
fun wofShouldCompressBinaries(volume : PWSTR, algorithm : LibC::UInt32*) : BOOL
fun wofGetDriverVersion(fileOrVolumeHandle : HANDLE, provider : LibC::UInt32, wofVersion : LibC::UInt32*) : HRESULT
fun wofSetFileDataLocation(fileHandle : HANDLE, provider : LibC::UInt32, externalFileInfo : LibC::Void*, length : LibC::UInt32) : HRESULT
fun wofIsExternalFile(filePath : PWSTR, isExternalFile : BOOL*, provider : LibC::UInt32*, externalFileInfo : LibC::Void*, bufferLength : LibC::UInt32*) : HRESULT
fun wofEnumEntries(volumeName : PWSTR, provider : LibC::UInt32, enumProc : WofEnumEntryProc, userData : LibC::Void*) : HRESULT
fun wofWimAddEntry(volumeName : PWSTR, wimPath : PWSTR, wimType : LibC::UInt32, wimIndex : LibC::UInt32, dataSourceId : LARGE_INTEGER*) : HRESULT
fun wofWimEnumFiles(volumeName : PWSTR, dataSourceId : LARGE_INTEGER, enumProc : WofEnumFilesProc, userData : LibC::Void*) : HRESULT
fun wofWimSuspendEntry(volumeName : PWSTR, dataSourceId : LARGE_INTEGER) : HRESULT
fun wofWimRemoveEntry(volumeName : PWSTR, dataSourceId : LARGE_INTEGER) : HRESULT
fun wofWimUpdateEntry(volumeName : PWSTR, dataSourceId : LARGE_INTEGER, newWimPath : PWSTR) : HRESULT
fun wofFileEnumFiles(volumeName : PWSTR, algorithm : LibC::UInt32, enumProc : WofEnumFilesProc, userData : LibC::Void*) : HRESULT
fun txfLogCreateFileReadContext(logPath : PWSTR, beginningLsn : CLS_LSN, endingLsn : CLS_LSN, txfFileId : TXF_ID*, txfLogContext : LibC::Void**) : BOOL
fun txfLogCreateRangeReadContext(logPath : PWSTR, beginningLsn : CLS_LSN, endingLsn : CLS_LSN, beginningVirtualClock : LARGE_INTEGER*, endingVirtualClock : LARGE_INTEGER*, recordTypeMask : LibC::UInt32, txfLogContext : LibC::Void**) : BOOL
fun txfLogDestroyReadContext(txfLogContext : LibC::Void*) : BOOL
fun txfLogReadRecords(txfLogContext : LibC::Void*, bufferLength : LibC::UInt32, buffer : LibC::Void*, bytesUsed : LibC::UInt32*, recordCount : LibC::UInt32*) : BOOL
fun txfReadMetadataInfo(fileHandle : HANDLE, txfFileId : TXF_ID*, lastLsn : CLS_LSN*, transactionState : LibC::UInt32*, lockingTransaction : LibC::Guid*) : BOOL
fun txfLogRecordGetFileName(recordBuffer : LibC::Void*, recordBufferLengthInBytes : LibC::UInt32, nameBuffer : PWSTR, nameBufferLengthInBytes : LibC::UInt32*, txfId : TXF_ID*) : BOOL
fun txfLogRecordGetGenericType(recordBuffer : LibC::Void*, recordBufferLengthInBytes : LibC::UInt32, genericType : LibC::UInt32*, virtualClock : LARGE_INTEGER*) : BOOL
fun txfSetThreadMiniVersionForCreate(miniVersion : LibC::UInt16) : LibC::Void
fun txfGetThreadMiniVersionForCreate(miniVersion : LibC::UInt16*) : LibC::Void
fun createTransaction(lpTransactionAttributes : SECURITY_ATTRIBUTES*, uOW : LibC::Guid*, createOptions : LibC::UInt32, isolationLevel : LibC::UInt32, isolationFlags : LibC::UInt32, timeout : LibC::UInt32, description : PWSTR) : HANDLE
fun openTransaction(dwDesiredAccess : LibC::UInt32, transactionId : LibC::Guid*) : HANDLE
fun commitTransaction(transactionHandle : HANDLE) : BOOL
fun commitTransactionAsync(transactionHandle : HANDLE) : BOOL
fun rollbackTransaction(transactionHandle : HANDLE) : BOOL
fun rollbackTransactionAsync(transactionHandle : HANDLE) : BOOL
fun getTransactionId(transactionHandle : HANDLE, transactionId : LibC::Guid*) : BOOL
fun getTransactionInformation(transactionHandle : HANDLE, outcome : LibC::UInt32*, isolationLevel : LibC::UInt32*, isolationFlags : LibC::UInt32*, timeout : LibC::UInt32*, bufferLength : LibC::UInt32, description : ) : BOOL
fun setTransactionInformation(transactionHandle : HANDLE, isolationLevel : LibC::UInt32, isolationFlags : LibC::UInt32, timeout : LibC::UInt32, description : PWSTR) : BOOL
fun createTransactionManager(lpTransactionAttributes : SECURITY_ATTRIBUTES*, logFileName : PWSTR, createOptions : LibC::UInt32, commitStrength : LibC::UInt32) : HANDLE
fun openTransactionManager(logFileName : PWSTR, desiredAccess : LibC::UInt32, openOptions : LibC::UInt32) : HANDLE
fun openTransactionManagerById(transactionManagerId : LibC::Guid*, desiredAccess : LibC::UInt32, openOptions : LibC::UInt32) : HANDLE
fun renameTransactionManager(logFileName : PWSTR, existingTransactionManagerGuid : LibC::Guid*) : BOOL
fun rollforwardTransactionManager(transactionManagerHandle : HANDLE, tmVirtualClock : LARGE_INTEGER*) : BOOL
fun recoverTransactionManager(transactionManagerHandle : HANDLE) : BOOL
fun getCurrentClockTransactionManager(transactionManagerHandle : HANDLE, tmVirtualClock : LARGE_INTEGER*) : BOOL
fun getTransactionManagerId(transactionManagerHandle : HANDLE, transactionManagerId : LibC::Guid*) : BOOL
fun createResourceManager(lpResourceManagerAttributes : SECURITY_ATTRIBUTES*, resourceManagerId : LibC::Guid*, createOptions : LibC::UInt32, tmHandle : HANDLE, description : PWSTR) : HANDLE
fun openResourceManager(dwDesiredAccess : LibC::UInt32, tmHandle : HANDLE, resourceManagerId : LibC::Guid*) : HANDLE
fun recoverResourceManager(resourceManagerHandle : HANDLE) : BOOL
fun getNotificationResourceManager(resourceManagerHandle : HANDLE, transactionNotification : TRANSACTION_NOTIFICATION*, notificationLength : LibC::UInt32, dwMilliseconds : LibC::UInt32, returnLength : LibC::UInt32*) : BOOL
fun getNotificationResourceManagerAsync(resourceManagerHandle : HANDLE, transactionNotification : TRANSACTION_NOTIFICATION*, transactionNotificationLength : LibC::UInt32, returnLength : LibC::UInt32*, lpOverlapped : OVERLAPPED*) : BOOL
fun setResourceManagerCompletionPort(resourceManagerHandle : HANDLE, ioCompletionPortHandle : HANDLE, completionKey : LibC::UIint*) : BOOL
fun createEnlistment(lpEnlistmentAttributes : SECURITY_ATTRIBUTES*, resourceManagerHandle : HANDLE, transactionHandle : HANDLE, notificationMask : LibC::UInt32, createOptions : LibC::UInt32, enlistmentKey : LibC::Void*) : HANDLE
fun openEnlistment(dwDesiredAccess : LibC::UInt32, resourceManagerHandle : HANDLE, enlistmentId : LibC::Guid*) : HANDLE
fun recoverEnlistment(enlistmentHandle : HANDLE, enlistmentKey : LibC::Void*) : BOOL
fun getEnlistmentRecoveryInformation(enlistmentHandle : HANDLE, bufferSize : LibC::UInt32, buffer : LibC::Void*, bufferUsed : LibC::UInt32*) : BOOL
fun getEnlistmentId(enlistmentHandle : HANDLE, enlistmentId : LibC::Guid*) : BOOL
fun setEnlistmentRecoveryInformation(enlistmentHandle : HANDLE, bufferSize : LibC::UInt32, buffer : LibC::Void*) : BOOL
fun prepareEnlistment(enlistmentHandle : HANDLE, tmVirtualClock : LARGE_INTEGER*) : BOOL
fun prePrepareEnlistment(enlistmentHandle : HANDLE, tmVirtualClock : LARGE_INTEGER*) : BOOL
fun commitEnlistment(enlistmentHandle : HANDLE, tmVirtualClock : LARGE_INTEGER*) : BOOL
fun rollbackEnlistment(enlistmentHandle : HANDLE, tmVirtualClock : LARGE_INTEGER*) : BOOL
fun prePrepareComplete(enlistmentHandle : HANDLE, tmVirtualClock : LARGE_INTEGER*) : BOOL
fun prepareComplete(enlistmentHandle : HANDLE, tmVirtualClock : LARGE_INTEGER*) : BOOL
fun readOnlyEnlistment(enlistmentHandle : HANDLE, tmVirtualClock : LARGE_INTEGER*) : BOOL
fun commitComplete(enlistmentHandle : HANDLE, tmVirtualClock : LARGE_INTEGER*) : BOOL
fun rollbackComplete(enlistmentHandle : HANDLE, tmVirtualClock : LARGE_INTEGER*) : BOOL
fun singlePhaseReject(enlistmentHandle : HANDLE, tmVirtualClock : LARGE_INTEGER*) : BOOL
fun netShareAdd(servername : PWSTR, level : LibC::UInt32, buf : LibC::Byte*, parm_err : LibC::UInt32*) : LibC::UInt32
fun netShareEnum(servername : PWSTR, level : LibC::UInt32, bufptr : LibC::Byte**, prefmaxlen : LibC::UInt32, entriesread : LibC::UInt32*, totalentries : LibC::UInt32*, resume_handle : LibC::UInt32*) : LibC::UInt32
fun netShareEnumSticky(servername : PWSTR, level : LibC::UInt32, bufptr : LibC::Byte**, prefmaxlen : LibC::UInt32, entriesread : LibC::UInt32*, totalentries : LibC::UInt32*, resume_handle : LibC::UInt32*) : LibC::UInt32
fun netShareGetInfo(servername : PWSTR, netname : PWSTR, level : LibC::UInt32, bufptr : LibC::Byte**) : LibC::UInt32
fun netShareSetInfo(servername : PWSTR, netname : PWSTR, level : LibC::UInt32, buf : LibC::Byte*, parm_err : LibC::UInt32*) : LibC::UInt32
fun netShareDel(servername : PWSTR, netname : PWSTR, reserved : LibC::UInt32) : LibC::UInt32
fun netShareDelSticky(servername : PWSTR, netname : PWSTR, reserved : LibC::UInt32) : LibC::UInt32
fun netShareCheck(servername : PWSTR, device : PWSTR, type : LibC::UInt32*) : LibC::UInt32
fun netShareDelEx(servername : PWSTR, level : LibC::UInt32, buf : LibC::Byte*) : LibC::UInt32
fun netServerAliasAdd(servername : PWSTR, level : LibC::UInt32, buf : LibC::Byte*) : LibC::UInt32
fun netServerAliasDel(servername : PWSTR, level : LibC::UInt32, buf : LibC::Byte*) : LibC::UInt32
fun netServerAliasEnum(servername : PWSTR, level : LibC::UInt32, bufptr : LibC::Byte**, prefmaxlen : LibC::UInt32, entriesread : LibC::UInt32*, totalentries : LibC::UInt32*, resumehandle : LibC::UInt32*) : LibC::UInt32
fun netSessionEnum(servername : PWSTR, uncClientName : PWSTR, username : PWSTR, level : LibC::UInt32, bufptr : LibC::Byte**, prefmaxlen : LibC::UInt32, entriesread : LibC::UInt32*, totalentries : LibC::UInt32*, resume_handle : LibC::UInt32*) : LibC::UInt32
fun netSessionDel(servername : PWSTR, uncClientName : PWSTR, username : PWSTR) : LibC::UInt32
fun netSessionGetInfo(servername : PWSTR, uncClientName : PWSTR, username : PWSTR, level : LibC::UInt32, bufptr : LibC::Byte**) : LibC::UInt32
fun netConnectionEnum(servername : PWSTR, qualifier : PWSTR, level : LibC::UInt32, bufptr : LibC::Byte**, prefmaxlen : LibC::UInt32, entriesread : LibC::UInt32*, totalentries : LibC::UInt32*, resume_handle : LibC::UInt32*) : LibC::UInt32
fun netFileClose(servername : PWSTR, fileid : LibC::UInt32) : LibC::UInt32
fun netFileEnum(servername : PWSTR, basepath : PWSTR, username : PWSTR, level : LibC::UInt32, bufptr : LibC::Byte**, prefmaxlen : LibC::UInt32, entriesread : LibC::UInt32*, totalentries : LibC::UInt32*, resume_handle : LibC::UIint**) : LibC::UInt32
fun netFileGetInfo(servername : PWSTR, fileid : LibC::UInt32, level : LibC::UInt32, bufptr : LibC::Byte**) : LibC::UInt32
fun netStatisticsGet(serverName : LibC::SByte*, service : LibC::SByte*, level : LibC::UInt32, options : LibC::UInt32, buffer : LibC::Byte**) : LibC::UInt32
fun queryIoRingCapabilities(capabilities : IORING_CAPABILITIES*) : HRESULT
fun isIoRingOpSupported(ioRing : HIORING__*, op : IORING_OP_CODE) : BOOL
fun createIoRing(ioringVersion : IORING_VERSION, flags : IORING_CREATE_FLAGS, submissionQueueSize : LibC::UInt32, completionQueueSize : LibC::UInt32, h : HIORING__**) : HRESULT
fun getIoRingInfo(ioRing : HIORING__*, info : IORING_INFO*) : HRESULT
fun submitIoRing(ioRing : HIORING__*, waitOperations : LibC::UInt32, milliseconds : LibC::UInt32, submittedEntries : LibC::UInt32*) : HRESULT
fun closeIoRing(ioRing : HIORING__*) : HRESULT
fun popIoRingCompletion(ioRing : HIORING__*, cqe : IORING_CQE*) : HRESULT
fun setIoRingCompletionEvent(ioRing : HIORING__*, hEvent : HANDLE) : HRESULT
fun buildIoRingCancelRequest(ioRing : HIORING__*, file : IORING_HANDLE_REF, opToCancel : LibC::UIint*, userData : LibC::UIint*) : HRESULT
fun buildIoRingReadFile(ioRing : HIORING__*, fileRef : IORING_HANDLE_REF, dataRef : IORING_BUFFER_REF, numberOfBytesToRead : LibC::UInt32, fileOffset : LibC::UInt64, userData : LibC::UIint*, flags : IORING_SQE_FLAGS) : HRESULT
fun buildIoRingRegisterFileHandles(ioRing : HIORING__*, count : LibC::UInt32, handles : , userData : LibC::UIint*) : HRESULT
fun buildIoRingRegisterBuffers(ioRing : HIORING__*, count : LibC::UInt32, buffers : , userData : LibC::UIint*) : HRESULT
fun wow64EnableWow64FsRedirection(wow64FsEnableRedirection : BOOLEAN) : BOOLEAN
fun wow64DisableWow64FsRedirection(oldValue : LibC::Void**) : BOOL
fun wow64RevertWow64FsRedirection(olValue : LibC::Void*) : BOOL
fun getBinaryTypeA(lpApplicationName : PSTR, lpBinaryType : LibC::UInt32*) : BOOL
fun getBinaryTypeW(lpApplicationName : PWSTR, lpBinaryType : LibC::UInt32*) : BOOL
fun getShortPathNameA(lpszLongPath : PSTR, lpszShortPath : , cchBuffer : LibC::UInt32) : LibC::UInt32
fun getLongPathNameTransactedA(lpszShortPath : PSTR, lpszLongPath : , cchBuffer : LibC::UInt32, hTransaction : HANDLE) : LibC::UInt32
fun getLongPathNameTransactedW(lpszShortPath : PWSTR, lpszLongPath : , cchBuffer : LibC::UInt32, hTransaction : HANDLE) : LibC::UInt32
fun setFileCompletionNotificationModes(fileHandle : HANDLE, flags : LibC::Byte) : BOOL
fun setFileShortNameA(hFile : HANDLE, lpShortName : PSTR) : BOOL
fun setFileShortNameW(hFile : HANDLE, lpShortName : PWSTR) : BOOL
fun setTapePosition(hDevice : HANDLE, dwPositionMethod : TAPE_POSITION_METHOD, dwPartition : LibC::UInt32, dwOffsetLow : LibC::UInt32, dwOffsetHigh : LibC::UInt32, bImmediate : BOOL) : LibC::UInt32
fun getTapePosition(hDevice : HANDLE, dwPositionType : TAPE_POSITION_TYPE, lpdwPartition : LibC::UInt32*, lpdwOffsetLow : LibC::UInt32*, lpdwOffsetHigh : LibC::UInt32*) : LibC::UInt32
fun prepareTape(hDevice : HANDLE, dwOperation : PREPARE_TAPE_OPERATION, bImmediate : BOOL) : LibC::UInt32
fun eraseTape(hDevice : HANDLE, dwEraseType : ERASE_TAPE_TYPE, bImmediate : BOOL) : LibC::UInt32
fun createTapePartition(hDevice : HANDLE, dwPartitionMethod : CREATE_TAPE_PARTITION_METHOD, dwCount : LibC::UInt32, dwSize : LibC::UInt32) : LibC::UInt32
fun writeTapemark(hDevice : HANDLE, dwTapemarkType : TAPEMARK_TYPE, dwTapemarkCount : LibC::UInt32, bImmediate : BOOL) : LibC::UInt32
fun getTapeStatus(hDevice : HANDLE) : LibC::UInt32
fun getTapeParameters(hDevice : HANDLE, dwOperation : GET_TAPE_DRIVE_PARAMETERS_OPERATION, lpdwSize : LibC::UInt32*, lpTapeInformation : LibC::Void*) : LibC::UInt32
fun setTapeParameters(hDevice : HANDLE, dwOperation : TAPE_INFORMATION_TYPE, lpTapeInformation : LibC::Void*) : LibC::UInt32
fun encryptFileA(lpFileName : PSTR) : BOOL
fun encryptFileW(lpFileName : PWSTR) : BOOL
fun decryptFileA(lpFileName : PSTR, dwReserved : LibC::UInt32) : BOOL
fun decryptFileW(lpFileName : PWSTR, dwReserved : LibC::UInt32) : BOOL
fun fileEncryptionStatusA(lpFileName : PSTR, lpStatus : LibC::UInt32*) : BOOL
fun fileEncryptionStatusW(lpFileName : PWSTR, lpStatus : LibC::UInt32*) : BOOL
fun openEncryptedFileRawA(lpFileName : PSTR, ulFlags : LibC::UInt32, pvContext : LibC::Void**) : LibC::UInt32
fun openEncryptedFileRawW(lpFileName : PWSTR, ulFlags : LibC::UInt32, pvContext : LibC::Void**) : LibC::UInt32
fun readEncryptedFileRaw(pfExportCallback : PFE_EXPORT_FUNC, pvCallbackContext : LibC::Void*, pvContext : LibC::Void*) : LibC::UInt32
fun writeEncryptedFileRaw(pfImportCallback : PFE_IMPORT_FUNC, pvCallbackContext : LibC::Void*, pvContext : LibC::Void*) : LibC::UInt32
fun closeEncryptedFileRaw(pvContext : LibC::Void*) : LibC::Void
fun openFile(lpFileName : PSTR, lpReOpenBuff : OFSTRUCT*, uStyle : LZOPENFILE_STYLE) : LibC::Int32
fun backupRead(hFile : HANDLE, lpBuffer : LibC::Byte*, nNumberOfBytesToRead : LibC::UInt32, lpNumberOfBytesRead : LibC::UInt32*, bAbort : BOOL, bProcessSecurity : BOOL, lpContext : LibC::Void**) : BOOL
fun backupSeek(hFile : HANDLE, dwLowBytesToSeek : LibC::UInt32, dwHighBytesToSeek : LibC::UInt32, lpdwLowByteSeeked : LibC::UInt32*, lpdwHighByteSeeked : LibC::UInt32*, lpContext : LibC::Void**) : BOOL
fun backupWrite(hFile : HANDLE, lpBuffer : LibC::Byte*, nNumberOfBytesToWrite : LibC::UInt32, lpNumberOfBytesWritten : LibC::UInt32*, bAbort : BOOL, bProcessSecurity : BOOL, lpContext : LibC::Void**) : BOOL
fun getLogicalDriveStringsA(nBufferLength : LibC::UInt32, lpBuffer : ) : LibC::UInt32
fun setSearchPathMode(flags : LibC::UInt32) : BOOL
fun createDirectoryExA(lpTemplateDirectory : PSTR, lpNewDirectory : PSTR, lpSecurityAttributes : SECURITY_ATTRIBUTES*) : BOOL
fun createDirectoryExW(lpTemplateDirectory : PWSTR, lpNewDirectory : PWSTR, lpSecurityAttributes : SECURITY_ATTRIBUTES*) : BOOL
fun createDirectoryTransactedA(lpTemplateDirectory : PSTR, lpNewDirectory : PSTR, lpSecurityAttributes : SECURITY_ATTRIBUTES*, hTransaction : HANDLE) : BOOL
fun createDirectoryTransactedW(lpTemplateDirectory : PWSTR, lpNewDirectory : PWSTR, lpSecurityAttributes : SECURITY_ATTRIBUTES*, hTransaction : HANDLE) : BOOL
fun removeDirectoryTransactedA(lpPathName : PSTR, hTransaction : HANDLE) : BOOL
fun removeDirectoryTransactedW(lpPathName : PWSTR, hTransaction : HANDLE) : BOOL
fun getFullPathNameTransactedA(lpFileName : PSTR, nBufferLength : LibC::UInt32, lpBuffer : , lpFilePart : PSTR*, hTransaction : HANDLE) : LibC::UInt32
fun getFullPathNameTransactedW(lpFileName : PWSTR, nBufferLength : LibC::UInt32, lpBuffer : , lpFilePart : PWSTR*, hTransaction : HANDLE) : LibC::UInt32
fun defineDosDeviceA(dwFlags : DEFINE_DOS_DEVICE_FLAGS, lpDeviceName : PSTR, lpTargetPath : PSTR) : BOOL
fun queryDosDeviceA(lpDeviceName : PSTR, lpTargetPath : , ucchMax : LibC::UInt32) : LibC::UInt32
fun createFileTransactedA(lpFileName : PSTR, dwDesiredAccess : LibC::UInt32, dwShareMode : FILE_SHARE_MODE, lpSecurityAttributes : SECURITY_ATTRIBUTES*, dwCreationDisposition : FILE_CREATION_DISPOSITION, dwFlagsAndAttributes : FILE_FLAGS_AND_ATTRIBUTES, hTemplateFile : HANDLE, hTransaction : HANDLE, pusMiniVersion : TXFS_MINIVERSION*, lpExtendedParameter : LibC::Void*) : HANDLE
fun createFileTransactedW(lpFileName : PWSTR, dwDesiredAccess : LibC::UInt32, dwShareMode : FILE_SHARE_MODE, lpSecurityAttributes : SECURITY_ATTRIBUTES*, dwCreationDisposition : FILE_CREATION_DISPOSITION, dwFlagsAndAttributes : FILE_FLAGS_AND_ATTRIBUTES, hTemplateFile : HANDLE, hTransaction : HANDLE, pusMiniVersion : TXFS_MINIVERSION*, lpExtendedParameter : LibC::Void*) : HANDLE
fun reOpenFile(hOriginalFile : HANDLE, dwDesiredAccess : FILE_ACCESS_FLAGS, dwShareMode : FILE_SHARE_MODE, dwFlagsAndAttributes : FILE_FLAGS_AND_ATTRIBUTES) : HANDLE
fun setFileAttributesTransactedA(lpFileName : PSTR, dwFileAttributes : LibC::UInt32, hTransaction : HANDLE) : BOOL
fun setFileAttributesTransactedW(lpFileName : PWSTR, dwFileAttributes : LibC::UInt32, hTransaction : HANDLE) : BOOL
fun getFileAttributesTransactedA(lpFileName : PSTR, fInfoLevelId : GET_FILEEX_INFO_LEVELS, lpFileInformation : LibC::Void*, hTransaction : HANDLE) : BOOL
fun getFileAttributesTransactedW(lpFileName : PWSTR, fInfoLevelId : GET_FILEEX_INFO_LEVELS, lpFileInformation : LibC::Void*, hTransaction : HANDLE) : BOOL
fun getCompressedFileSizeTransactedA(lpFileName : PSTR, lpFileSizeHigh : LibC::UInt32*, hTransaction : HANDLE) : LibC::UInt32
fun getCompressedFileSizeTransactedW(lpFileName : PWSTR, lpFileSizeHigh : LibC::UInt32*, hTransaction : HANDLE) : LibC::UInt32
fun deleteFileTransactedA(lpFileName : PSTR, hTransaction : HANDLE) : BOOL
fun deleteFileTransactedW(lpFileName : PWSTR, hTransaction : HANDLE) : BOOL
fun checkNameLegalDOS8Dot3A(lpName : PSTR, lpOemName : , oemNameSize : LibC::UInt32, pbNameContainsSpaces : BOOL*, pbNameLegal : BOOL*) : BOOL
fun checkNameLegalDOS8Dot3W(lpName : PWSTR, lpOemName : , oemNameSize : LibC::UInt32, pbNameContainsSpaces : BOOL*, pbNameLegal : BOOL*) : BOOL
fun findFirstFileTransactedA(lpFileName : PSTR, fInfoLevelId : FINDEX_INFO_LEVELS, lpFindFileData : LibC::Void*, fSearchOp : FINDEX_SEARCH_OPS, lpSearchFilter : LibC::Void*, dwAdditionalFlags : LibC::UInt32, hTransaction : HANDLE) : FindFileHandle
fun findFirstFileTransactedW(lpFileName : PWSTR, fInfoLevelId : FINDEX_INFO_LEVELS, lpFindFileData : LibC::Void*, fSearchOp : FINDEX_SEARCH_OPS, lpSearchFilter : LibC::Void*, dwAdditionalFlags : LibC::UInt32, hTransaction : HANDLE) : FindFileHandle
fun copyFileA(lpExistingFileName : PSTR, lpNewFileName : PSTR, bFailIfExists : BOOL) : BOOL
fun copyFileW(lpExistingFileName : PWSTR, lpNewFileName : PWSTR, bFailIfExists : BOOL) : BOOL
fun copyFileExA(lpExistingFileName : PSTR, lpNewFileName : PSTR, lpProgressRoutine : LPPROGRESS_ROUTINE, lpData : LibC::Void*, pbCancel : LibC::Int32*, dwCopyFlags : LibC::UInt32) : BOOL
fun copyFileExW(lpExistingFileName : PWSTR, lpNewFileName : PWSTR, lpProgressRoutine : LPPROGRESS_ROUTINE, lpData : LibC::Void*, pbCancel : LibC::Int32*, dwCopyFlags : LibC::UInt32) : BOOL
fun copyFileTransactedA(lpExistingFileName : PSTR, lpNewFileName : PSTR, lpProgressRoutine : LPPROGRESS_ROUTINE, lpData : LibC::Void*, pbCancel : LibC::Int32*, dwCopyFlags : LibC::UInt32, hTransaction : HANDLE) : BOOL
fun copyFileTransactedW(lpExistingFileName : PWSTR, lpNewFileName : PWSTR, lpProgressRoutine : LPPROGRESS_ROUTINE, lpData : LibC::Void*, pbCancel : LibC::Int32*, dwCopyFlags : LibC::UInt32, hTransaction : HANDLE) : BOOL
fun copyFile2(pwszExistingFileName : PWSTR, pwszNewFileName : PWSTR, pExtendedParameters : COPYFILE2_EXTENDED_PARAMETERS*) : HRESULT
fun moveFileA(lpExistingFileName : PSTR, lpNewFileName : PSTR) : BOOL
fun moveFileW(lpExistingFileName : PWSTR, lpNewFileName : PWSTR) : BOOL
fun moveFileExA(lpExistingFileName : PSTR, lpNewFileName : PSTR, dwFlags : MOVE_FILE_FLAGS) : BOOL
fun moveFileExW(lpExistingFileName : PWSTR, lpNewFileName : PWSTR, dwFlags : MOVE_FILE_FLAGS) : BOOL
fun moveFileWithProgressA(lpExistingFileName : PSTR, lpNewFileName : PSTR, lpProgressRoutine : LPPROGRESS_ROUTINE, lpData : LibC::Void*, dwFlags : MOVE_FILE_FLAGS) : BOOL
fun moveFileWithProgressW(lpExistingFileName : PWSTR, lpNewFileName : PWSTR, lpProgressRoutine : LPPROGRESS_ROUTINE, lpData : LibC::Void*, dwFlags : MOVE_FILE_FLAGS) : BOOL
fun moveFileTransactedA(lpExistingFileName : PSTR, lpNewFileName : PSTR, lpProgressRoutine : LPPROGRESS_ROUTINE, lpData : LibC::Void*, dwFlags : MOVE_FILE_FLAGS, hTransaction : HANDLE) : BOOL
fun moveFileTransactedW(lpExistingFileName : PWSTR, lpNewFileName : PWSTR, lpProgressRoutine : LPPROGRESS_ROUTINE, lpData : LibC::Void*, dwFlags : MOVE_FILE_FLAGS, hTransaction : HANDLE) : BOOL
fun replaceFileA(lpReplacedFileName : PSTR, lpReplacementFileName : PSTR, lpBackupFileName : PSTR, dwReplaceFlags : REPLACE_FILE_FLAGS, lpExclude : LibC::Void*, lpReserved : LibC::Void*) : BOOL
fun replaceFileW(lpReplacedFileName : PWSTR, lpReplacementFileName : PWSTR, lpBackupFileName : PWSTR, dwReplaceFlags : REPLACE_FILE_FLAGS, lpExclude : LibC::Void*, lpReserved : LibC::Void*) : BOOL
fun createHardLinkA(lpFileName : PSTR, lpExistingFileName : PSTR, lpSecurityAttributes : SECURITY_ATTRIBUTES*) : BOOL
fun createHardLinkW(lpFileName : PWSTR, lpExistingFileName : PWSTR, lpSecurityAttributes : SECURITY_ATTRIBUTES*) : BOOL
fun createHardLinkTransactedA(lpFileName : PSTR, lpExistingFileName : PSTR, lpSecurityAttributes : SECURITY_ATTRIBUTES*, hTransaction : HANDLE) : BOOL
fun createHardLinkTransactedW(lpFileName : PWSTR, lpExistingFileName : PWSTR, lpSecurityAttributes : SECURITY_ATTRIBUTES*, hTransaction : HANDLE) : BOOL
fun findFirstStreamTransactedW(lpFileName : PWSTR, infoLevel : STREAM_INFO_LEVELS, lpFindStreamData : LibC::Void*, dwFlags : LibC::UInt32, hTransaction : HANDLE) : FindStreamHandle
fun findFirstFileNameTransactedW(lpFileName : PWSTR, dwFlags : LibC::UInt32, stringLength : LibC::UInt32*, linkName : , hTransaction : HANDLE) : FindFileNameHandle
fun setVolumeLabelA(lpRootPathName : PSTR, lpVolumeName : PSTR) : BOOL
fun setVolumeLabelW(lpRootPathName : PWSTR, lpVolumeName : PWSTR) : BOOL
fun setFileBandwidthReservation(hFile : HANDLE, nPeriodMilliseconds : LibC::UInt32, nBytesPerPeriod : LibC::UInt32, bDiscardable : BOOL, lpTransferSize : LibC::UInt32*, lpNumOutstandingRequests : LibC::UInt32*) : BOOL
fun getFileBandwidthReservation(hFile : HANDLE, lpPeriodMilliseconds : LibC::UInt32*, lpBytesPerPeriod : LibC::UInt32*, pDiscardable : LibC::Int32*, lpTransferSize : LibC::UInt32*, lpNumOutstandingRequests : LibC::UInt32*) : BOOL
fun readDirectoryChangesW(hDirectory : HANDLE, lpBuffer : LibC::Void*, nBufferLength : LibC::UInt32, bWatchSubtree : BOOL, dwNotifyFilter : FILE_NOTIFY_CHANGE, lpBytesReturned : LibC::UInt32*, lpOverlapped : OVERLAPPED*, lpCompletionRoutine : LPOVERLAPPED_COMPLETION_ROUTINE) : BOOL
fun readDirectoryChangesExW(hDirectory : HANDLE, lpBuffer : LibC::Void*, nBufferLength : LibC::UInt32, bWatchSubtree : BOOL, dwNotifyFilter : FILE_NOTIFY_CHANGE, lpBytesReturned : LibC::UInt32*, lpOverlapped : OVERLAPPED*, lpCompletionRoutine : LPOVERLAPPED_COMPLETION_ROUTINE, readDirectoryNotifyInformationClass : READ_DIRECTORY_NOTIFY_INFORMATION_CLASS) : BOOL
fun findFirstVolumeA(lpszVolumeName : , cchBufferLength : LibC::UInt32) : FindVolumeHandle
fun findNextVolumeA(hFindVolume : FindVolumeHandle, lpszVolumeName : , cchBufferLength : LibC::UInt32) : BOOL
fun findFirstVolumeMountPointA(lpszRootPathName : PSTR, lpszVolumeMountPoint : , cchBufferLength : LibC::UInt32) : FindVolumeMointPointHandle
fun findFirstVolumeMountPointW(lpszRootPathName : PWSTR, lpszVolumeMountPoint : , cchBufferLength : LibC::UInt32) : FindVolumeMointPointHandle
fun findNextVolumeMountPointA(hFindVolumeMountPoint : FindVolumeMointPointHandle, lpszVolumeMountPoint : , cchBufferLength : LibC::UInt32) : BOOL
fun findNextVolumeMountPointW(hFindVolumeMountPoint : FindVolumeMointPointHandle, lpszVolumeMountPoint : , cchBufferLength : LibC::UInt32) : BOOL
fun findVolumeMountPointClose(hFindVolumeMountPoint : FindVolumeMointPointHandle) : BOOL
fun setVolumeMountPointA(lpszVolumeMountPoint : PSTR, lpszVolumeName : PSTR) : BOOL
fun setVolumeMountPointW(lpszVolumeMountPoint : PWSTR, lpszVolumeName : PWSTR) : BOOL
fun deleteVolumeMountPointA(lpszVolumeMountPoint : PSTR) : BOOL
fun getVolumeNameForVolumeMountPointA(lpszVolumeMountPoint : PSTR, lpszVolumeName : , cchBufferLength : LibC::UInt32) : BOOL
fun getVolumePathNameA(lpszFileName : PSTR, lpszVolumePathName : , cchBufferLength : LibC::UInt32) : BOOL
fun getVolumePathNamesForVolumeNameA(lpszVolumeName : PSTR, lpszVolumePathNames : , cchBufferLength : LibC::UInt32, lpcchReturnLength : LibC::UInt32*) : BOOL
fun getFileInformationByHandleEx(hFile : HANDLE, fileInformationClass : FILE_INFO_BY_HANDLE_CLASS, lpFileInformation : LibC::Void*, dwBufferSize : LibC::UInt32) : BOOL
fun openFileById(hVolumeHint : HANDLE, lpFileId : FILE_ID_DESCRIPTOR*, dwDesiredAccess : FILE_ACCESS_FLAGS, dwShareMode : FILE_SHARE_MODE, lpSecurityAttributes : SECURITY_ATTRIBUTES*, dwFlagsAndAttributes : FILE_FLAGS_AND_ATTRIBUTES) : HANDLE
fun createSymbolicLinkA(lpSymlinkFileName : PSTR, lpTargetFileName : PSTR, dwFlags : SYMBOLIC_LINK_FLAGS) : BOOLEAN
fun createSymbolicLinkW(lpSymlinkFileName : PWSTR, lpTargetFileName : PWSTR, dwFlags : SYMBOLIC_LINK_FLAGS) : BOOLEAN
fun createSymbolicLinkTransactedA(lpSymlinkFileName : PSTR, lpTargetFileName : PSTR, dwFlags : SYMBOLIC_LINK_FLAGS, hTransaction : HANDLE) : BOOLEAN
fun createSymbolicLinkTransactedW(lpSymlinkFileName : PWSTR, lpTargetFileName : PWSTR, dwFlags : SYMBOLIC_LINK_FLAGS, hTransaction : HANDLE) : BOOLEAN
fun ntCreateFile(fileHandle : HANDLE*, desiredAccess : LibC::UInt32, objectAttributes : OBJECT_ATTRIBUTES*, ioStatusBlock : IO_STATUS_BLOCK*, allocationSize : LARGE_INTEGER*, fileAttributes : LibC::UInt32, shareAccess : FILE_SHARE_MODE, createDisposition : NT_CREATE_FILE_DISPOSITION, createOptions : LibC::UInt32, eaBuffer : LibC::Void*, eaLength : LibC::UInt32) : NTSTATUS

  end
