  @[Link("Media.Audio")]
  lib LibMediaAudio
    MIXERCONTROL_CONTROLTYPE_CUSTOM = 0
MIXERCONTROL_CONTROLTYPE_BOOLEANMETER = 268500992
MIXERCONTROL_CONTROLTYPE_SIGNEDMETER = 268566528
MIXERCONTROL_CONTROLTYPE_PEAKMETER = 268566529
MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER = 268632064
MIXERCONTROL_CONTROLTYPE_BOOLEAN = 536936448
MIXERCONTROL_CONTROLTYPE_ONOFF = 536936449
MIXERCONTROL_CONTROLTYPE_MUTE = 536936450
MIXERCONTROL_CONTROLTYPE_MONO = 536936451
MIXERCONTROL_CONTROLTYPE_LOUDNESS = 536936452
MIXERCONTROL_CONTROLTYPE_STEREOENH = 536936453
MIXERCONTROL_CONTROLTYPE_BASS_BOOST = 536945271
MIXERCONTROL_CONTROLTYPE_BUTTON = 553713664
MIXERCONTROL_CONTROLTYPE_DECIBELS = 805568512
MIXERCONTROL_CONTROLTYPE_SIGNED = 805437440
MIXERCONTROL_CONTROLTYPE_UNSIGNED = 805502976
MIXERCONTROL_CONTROLTYPE_PERCENT = 805634048
MIXERCONTROL_CONTROLTYPE_SLIDER = 1073872896
MIXERCONTROL_CONTROLTYPE_PAN = 1073872897
MIXERCONTROL_CONTROLTYPE_QSOUNDPAN = 1073872898
MIXERCONTROL_CONTROLTYPE_FADER = 1342373888
MIXERCONTROL_CONTROLTYPE_VOLUME = 1342373889
MIXERCONTROL_CONTROLTYPE_BASS = 1342373890
MIXERCONTROL_CONTROLTYPE_TREBLE = 1342373891
MIXERCONTROL_CONTROLTYPE_EQUALIZER = 1342373892
MIXERCONTROL_CONTROLTYPE_SINGLESELECT = 1879113728
MIXERCONTROL_CONTROLTYPE_MUX = 1879113729
MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT = 1895890944
MIXERCONTROL_CONTROLTYPE_MIXER = 1895890945
MIXERCONTROL_CONTROLTYPE_MICROTIME = 1610809344
MIXERCONTROL_CONTROLTYPE_MILLITIME = 1627586560
WAVE_MAPPER = 4294967295
ENDPOINT_FORMAT_RESET_MIX_ONLY = 1
ENDPOINT_HARDWARE_SUPPORT_VOLUME = 1
ENDPOINT_HARDWARE_SUPPORT_MUTE = 2
ENDPOINT_HARDWARE_SUPPORT_METER = 4
AUDIOCLOCK_CHARACTERISTIC_FIXED_FREQ = 1
AMBISONICS_PARAM_VERSION_1 = 1
AUDCLNT_E_NOT_INITIALIZED = -2004287487
AUDCLNT_E_ALREADY_INITIALIZED = -2004287486
AUDCLNT_E_WRONG_ENDPOINT_TYPE = -2004287485
AUDCLNT_E_DEVICE_INVALIDATED = -2004287484
AUDCLNT_E_NOT_STOPPED = -2004287483
AUDCLNT_E_BUFFER_TOO_LARGE = -2004287482
AUDCLNT_E_OUT_OF_ORDER = -2004287481
AUDCLNT_E_UNSUPPORTED_FORMAT = -2004287480
AUDCLNT_E_INVALID_SIZE = -2004287479
AUDCLNT_E_DEVICE_IN_USE = -2004287478
AUDCLNT_E_BUFFER_OPERATION_PENDING = -2004287477
AUDCLNT_E_THREAD_NOT_REGISTERED = -2004287476
AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED = -2004287474
AUDCLNT_E_ENDPOINT_CREATE_FAILED = -2004287473
AUDCLNT_E_SERVICE_NOT_RUNNING = -2004287472
AUDCLNT_E_EVENTHANDLE_NOT_EXPECTED = -2004287471
AUDCLNT_E_EXCLUSIVE_MODE_ONLY = -2004287470
AUDCLNT_E_BUFDURATION_PERIOD_NOT_EQUAL = -2004287469
AUDCLNT_E_EVENTHANDLE_NOT_SET = -2004287468
AUDCLNT_E_INCORRECT_BUFFER_SIZE = -2004287467
AUDCLNT_E_BUFFER_SIZE_ERROR = -2004287466
AUDCLNT_E_CPUUSAGE_EXCEEDED = -2004287465
AUDCLNT_E_BUFFER_ERROR = -2004287464
AUDCLNT_E_BUFFER_SIZE_NOT_ALIGNED = -2004287463
AUDCLNT_E_INVALID_DEVICE_PERIOD = -2004287456
AUDCLNT_E_INVALID_STREAM_FLAG = -2004287455
AUDCLNT_E_ENDPOINT_OFFLOAD_NOT_CAPABLE = -2004287454
AUDCLNT_E_OUT_OF_OFFLOAD_RESOURCES = -2004287453
AUDCLNT_E_OFFLOAD_MODE_ONLY = -2004287452
AUDCLNT_E_NONOFFLOAD_MODE_ONLY = -2004287451
AUDCLNT_E_RESOURCES_INVALIDATED = -2004287450
AUDCLNT_E_RAW_MODE_UNSUPPORTED = -2004287449
AUDCLNT_E_ENGINE_PERIODICITY_LOCKED = -2004287448
AUDCLNT_E_ENGINE_FORMAT_LOCKED = -2004287447
AUDCLNT_E_HEADTRACKING_ENABLED = -2004287440
AUDCLNT_E_HEADTRACKING_UNSUPPORTED = -2004287424
AUDCLNT_E_EFFECT_NOT_AVAILABLE = -2004287423
AUDCLNT_E_EFFECT_STATE_READ_ONLY = -2004287422
AUDCLNT_S_BUFFER_EMPTY = 143196161
AUDCLNT_S_THREAD_ALREADY_REGISTERED = 143196162
AUDCLNT_S_POSITION_STALLED = 143196163
AUDCLNT_STREAMFLAGS_CROSSPROCESS = 65536
AUDCLNT_STREAMFLAGS_LOOPBACK = 131072
AUDCLNT_STREAMFLAGS_EVENTCALLBACK = 262144
AUDCLNT_STREAMFLAGS_NOPERSIST = 524288
AUDCLNT_STREAMFLAGS_RATEADJUST = 1048576
AUDCLNT_STREAMFLAGS_SRC_DEFAULT_QUALITY = 134217728
AUDCLNT_STREAMFLAGS_AUTOCONVERTPCM = 2147483648
AUDCLNT_SESSIONFLAGS_EXPIREWHENUNOWNED = 268435456
AUDCLNT_SESSIONFLAGS_DISPLAY_HIDE = 536870912
AUDCLNT_SESSIONFLAGS_DISPLAY_HIDEWHENEXPIRED = 1073741824
SPTLAUDCLNT_E_DESTROYED = -2004287232
SPTLAUDCLNT_E_OUT_OF_ORDER = -2004287231
SPTLAUDCLNT_E_RESOURCES_INVALIDATED = -2004287230
SPTLAUDCLNT_E_NO_MORE_OBJECTS = -2004287229
SPTLAUDCLNT_E_PROPERTY_NOT_SUPPORTED = -2004287228
SPTLAUDCLNT_E_ERRORS_IN_OBJECT_CALLS = -2004287227
SPTLAUDCLNT_E_METADATA_FORMAT_NOT_SUPPORTED = -2004287226
SPTLAUDCLNT_E_STREAM_NOT_AVAILABLE = -2004287225
SPTLAUDCLNT_E_INVALID_LICENSE = -2004287224
SPTLAUDCLNT_E_STREAM_NOT_STOPPED = -2004287222
SPTLAUDCLNT_E_STATIC_OBJECT_NOT_AVAILABLE = -2004287221
SPTLAUDCLNT_E_OBJECT_ALREADY_ACTIVE = -2004287220
SPTLAUDCLNT_E_INTERNAL = -2004287219
DEVICE_STATE_ACTIVE = 1
DEVICE_STATE_DISABLED = 2
DEVICE_STATE_NOTPRESENT = 4
DEVICE_STATE_UNPLUGGED = 8
DEVICE_STATEMASK_ALL = 15
PKEY_AudioEndpoint_FormFactor = {"Fmtid"=>"1da5d803-d492-4edd-8c23-e0c0ffee7f0e", "Pid"=>0}
PKEY_AudioEndpoint_ControlPanelPageProvider = {"Fmtid"=>"1da5d803-d492-4edd-8c23-e0c0ffee7f0e", "Pid"=>1}
PKEY_AudioEndpoint_Association = {"Fmtid"=>"1da5d803-d492-4edd-8c23-e0c0ffee7f0e", "Pid"=>2}
PKEY_AudioEndpoint_PhysicalSpeakers = {"Fmtid"=>"1da5d803-d492-4edd-8c23-e0c0ffee7f0e", "Pid"=>3}
PKEY_AudioEndpoint_GUID = {"Fmtid"=>"1da5d803-d492-4edd-8c23-e0c0ffee7f0e", "Pid"=>4}
PKEY_AudioEndpoint_Disable_SysFx = {"Fmtid"=>"1da5d803-d492-4edd-8c23-e0c0ffee7f0e", "Pid"=>5}
ENDPOINT_SYSFX_ENABLED = 0
ENDPOINT_SYSFX_DISABLED = 1
PKEY_AudioEndpoint_FullRangeSpeakers = {"Fmtid"=>"1da5d803-d492-4edd-8c23-e0c0ffee7f0e", "Pid"=>6}
PKEY_AudioEndpoint_Supports_EventDriven_Mode = {"Fmtid"=>"1da5d803-d492-4edd-8c23-e0c0ffee7f0e", "Pid"=>7}
PKEY_AudioEndpoint_JackSubType = {"Fmtid"=>"1da5d803-d492-4edd-8c23-e0c0ffee7f0e", "Pid"=>8}
PKEY_AudioEndpoint_Default_VolumeInDb = {"Fmtid"=>"1da5d803-d492-4edd-8c23-e0c0ffee7f0e", "Pid"=>9}
PKEY_AudioEngine_DeviceFormat = {"Fmtid"=>"f19f064d-082c-4e27-bc73-6882a1bb8e4c", "Pid"=>0}
PKEY_AudioEngine_OEMFormat = {"Fmtid"=>"e4870e26-3cc5-4cd2-ba46-ca0a9a70ed04", "Pid"=>3}
PKEY_AudioEndpointLogo_IconEffects = {"Fmtid"=>"f1ab780d-2010-4ed3-a3a6-8b87f0f0c476", "Pid"=>0}
PKEY_AudioEndpointLogo_IconPath = {"Fmtid"=>"f1ab780d-2010-4ed3-a3a6-8b87f0f0c476", "Pid"=>1}
PKEY_AudioEndpointSettings_MenuText = {"Fmtid"=>"14242002-0320-4de4-9555-a7d82b73c286", "Pid"=>0}
PKEY_AudioEndpointSettings_LaunchContract = {"Fmtid"=>"14242002-0320-4de4-9555-a7d82b73c286", "Pid"=>1}
DEVINTERFACE_AUDIO_RENDER = "e6327cad-dcec-4949-ae8a-991e976a79d2"
DEVINTERFACE_AUDIO_CAPTURE = "2eef81be-33fa-4800-9670-1cd474972c3f"
DEVINTERFACE_MIDI_OUTPUT = "6dc23320-ab33-4ce4-80d4-bbb3ebbf2814"
DEVINTERFACE_MIDI_INPUT = "504be32c-ccf6-4d2c-b73f-6f8b3747e22b"
EVENTCONTEXT_VOLUMESLIDER = "e2c2e9de-09b1-4b04-84e5-07931225ee04"
SPATIAL_AUDIO_STANDARD_COMMANDS_START = 200
SPATIAL_AUDIO_POSITION = 200
SPTLAUD_MD_CLNT_E_COMMAND_NOT_FOUND = -2004286976
SPTLAUD_MD_CLNT_E_OBJECT_NOT_INITIALIZED = -2004286975
SPTLAUD_MD_CLNT_E_INVALID_ARGS = -2004286974
SPTLAUD_MD_CLNT_E_METADATA_FORMAT_NOT_FOUND = -2004286973
SPTLAUD_MD_CLNT_E_VALUE_BUFFER_INCORRECT_SIZE = -2004286972
SPTLAUD_MD_CLNT_E_MEMORY_BOUNDS = -2004286971
SPTLAUD_MD_CLNT_E_NO_MORE_COMMANDS = -2004286970
SPTLAUD_MD_CLNT_E_BUFFER_ALREADY_ATTACHED = -2004286969
SPTLAUD_MD_CLNT_E_BUFFER_NOT_ATTACHED = -2004286968
SPTLAUD_MD_CLNT_E_FRAMECOUNT_OUT_OF_RANGE = -2004286967
SPTLAUD_MD_CLNT_E_NO_ITEMS_FOUND = -2004286960
SPTLAUD_MD_CLNT_E_ITEM_COPY_OVERFLOW = -2004286959
SPTLAUD_MD_CLNT_E_NO_ITEMS_OPEN = -2004286958
SPTLAUD_MD_CLNT_E_ITEMS_ALREADY_OPEN = -2004286957
SPTLAUD_MD_CLNT_E_ATTACH_FAILED_INTERNAL_BUFFER = -2004286956
SPTLAUD_MD_CLNT_E_DETACH_FAILED_INTERNAL_BUFFER = -2004286955
SPTLAUD_MD_CLNT_E_NO_BUFFER_ATTACHED = -2004286954
SPTLAUD_MD_CLNT_E_NO_MORE_ITEMS = -2004286953
SPTLAUD_MD_CLNT_E_FRAMEOFFSET_OUT_OF_RANGE = -2004286952
SPTLAUD_MD_CLNT_E_ITEM_MUST_HAVE_COMMANDS = -2004286951
SPTLAUD_MD_CLNT_E_NO_ITEMOFFSET_WRITTEN = -2004286944
SPTLAUD_MD_CLNT_E_NO_ITEMS_WRITTEN = -2004286943
SPTLAUD_MD_CLNT_E_COMMAND_ALREADY_WRITTEN = -2004286942
SPTLAUD_MD_CLNT_E_FORMAT_MISMATCH = -2004286941
SPTLAUD_MD_CLNT_E_BUFFER_STILL_ATTACHED = -2004286940
SPTLAUD_MD_CLNT_E_ITEMS_LOCKED_FOR_WRITING = -2004286939
WAVERR_BADFORMAT = 32
WAVERR_STILLPLAYING = 33
WAVERR_UNPREPARED = 34
WAVERR_SYNC = 35
WAVERR_LASTERROR = 35
WHDR_DONE = 1
WHDR_PREPARED = 2
WHDR_BEGINLOOP = 4
WHDR_ENDLOOP = 8
WHDR_INQUEUE = 16
WAVECAPS_PITCH = 1
WAVECAPS_PLAYBACKRATE = 2
WAVECAPS_VOLUME = 4
WAVECAPS_LRVOLUME = 8
WAVECAPS_SYNC = 16
WAVECAPS_SAMPLEACCURATE = 32
WAVE_INVALIDFORMAT = 0
WAVE_FORMAT_1M08 = 1
WAVE_FORMAT_1S08 = 2
WAVE_FORMAT_1M16 = 4
WAVE_FORMAT_1S16 = 8
WAVE_FORMAT_2M08 = 16
WAVE_FORMAT_2S08 = 32
WAVE_FORMAT_2M16 = 64
WAVE_FORMAT_2S16 = 128
WAVE_FORMAT_4M08 = 256
WAVE_FORMAT_4S08 = 512
WAVE_FORMAT_4M16 = 1024
WAVE_FORMAT_4S16 = 2048
WAVE_FORMAT_44M08 = 256
WAVE_FORMAT_44S08 = 512
WAVE_FORMAT_44M16 = 1024
WAVE_FORMAT_44S16 = 2048
WAVE_FORMAT_48M08 = 4096
WAVE_FORMAT_48S08 = 8192
WAVE_FORMAT_48M16 = 16384
WAVE_FORMAT_48S16 = 32768
WAVE_FORMAT_96M08 = 65536
WAVE_FORMAT_96S08 = 131072
WAVE_FORMAT_96M16 = 262144
WAVE_FORMAT_96S16 = 524288
WAVE_FORMAT_PCM = 1
MIDIERR_UNPREPARED = 64
MIDIERR_STILLPLAYING = 65
MIDIERR_NOMAP = 66
MIDIERR_NOTREADY = 67
MIDIERR_NODEVICE = 68
MIDIERR_INVALIDSETUP = 69
MIDIERR_BADOPENMODE = 70
MIDIERR_DONT_CONTINUE = 71
MIDIERR_LASTERROR = 71
MIDIPATCHSIZE = 128
MIDI_CACHE_ALL = 1
MIDI_CACHE_BESTFIT = 2
MIDI_CACHE_QUERY = 3
MIDI_UNCACHE = 4
MOD_MIDIPORT = 1
MOD_SYNTH = 2
MOD_SQSYNTH = 3
MOD_FMSYNTH = 4
MOD_MAPPER = 5
MOD_WAVETABLE = 6
MOD_SWSYNTH = 7
MIDICAPS_VOLUME = 1
MIDICAPS_LRVOLUME = 2
MIDICAPS_CACHE = 4
MIDICAPS_STREAM = 8
MHDR_DONE = 1
MHDR_PREPARED = 2
MHDR_INQUEUE = 4
MHDR_ISSTRM = 8
MEVT_F_SHORT = 0
MEVT_F_LONG = -2147483648
MEVT_F_CALLBACK = 1073741824
MIDISTRM_ERROR = -2
MIDIPROP_SET = -2147483648
MIDIPROP_GET = 1073741824
MIDIPROP_TIMEDIV = 1
MIDIPROP_TEMPO = 2
AUXCAPS_CDAUDIO = 1
AUXCAPS_AUXIN = 2
AUXCAPS_VOLUME = 1
AUXCAPS_LRVOLUME = 2
MIXER_SHORT_NAME_CHARS = 16
MIXER_LONG_NAME_CHARS = 64
MIXERR_INVALLINE = 1024
MIXERR_INVALCONTROL = 1025
MIXERR_INVALVALUE = 1026
MIXERR_LASTERROR = 1026
MIXER_OBJECTF_HANDLE = -2147483648
MIXER_OBJECTF_MIXER = 0
MIXER_OBJECTF_WAVEOUT = 268435456
MIXER_OBJECTF_WAVEIN = 536870912
MIXER_OBJECTF_MIDIOUT = 805306368
MIXER_OBJECTF_MIDIIN = 1073741824
MIXER_OBJECTF_AUX = 1342177280
MIXERLINE_LINEF_ACTIVE = 1
MIXERLINE_LINEF_DISCONNECTED = 32768
MIXERLINE_LINEF_SOURCE = -2147483648
MIXERLINE_COMPONENTTYPE_DST_FIRST = 0
MIXERLINE_COMPONENTTYPE_DST_LAST = 8
MIXERLINE_COMPONENTTYPE_SRC_FIRST = 4096
MIXERLINE_COMPONENTTYPE_SRC_LAST = 4106
MIXERLINE_TARGETTYPE_UNDEFINED = 0
MIXERLINE_TARGETTYPE_WAVEOUT = 1
MIXERLINE_TARGETTYPE_WAVEIN = 2
MIXERLINE_TARGETTYPE_MIDIOUT = 3
MIXERLINE_TARGETTYPE_MIDIIN = 4
MIXERLINE_TARGETTYPE_AUX = 5
MIXER_GETLINEINFOF_DESTINATION = 0
MIXER_GETLINEINFOF_SOURCE = 1
MIXER_GETLINEINFOF_LINEID = 2
MIXER_GETLINEINFOF_COMPONENTTYPE = 3
MIXER_GETLINEINFOF_TARGETTYPE = 4
MIXER_GETLINEINFOF_QUERYMASK = 15
MIXERCONTROL_CONTROLF_UNIFORM = 1
MIXERCONTROL_CONTROLF_MULTIPLE = 2
MIXERCONTROL_CONTROLF_DISABLED = -2147483648
MIXERCONTROL_CT_CLASS_MASK = -268435456
MIXERCONTROL_CT_CLASS_CUSTOM = 0
MIXERCONTROL_CT_CLASS_METER = 268435456
MIXERCONTROL_CT_CLASS_SWITCH = 536870912
MIXERCONTROL_CT_CLASS_NUMBER = 805306368
MIXERCONTROL_CT_CLASS_SLIDER = 1073741824
MIXERCONTROL_CT_CLASS_FADER = 1342177280
MIXERCONTROL_CT_CLASS_TIME = 1610612736
MIXERCONTROL_CT_CLASS_LIST = 1879048192
MIXERCONTROL_CT_SUBCLASS_MASK = 251658240
MIXERCONTROL_CT_SC_SWITCH_BOOLEAN = 0
MIXERCONTROL_CT_SC_SWITCH_BUTTON = 16777216
MIXERCONTROL_CT_SC_METER_POLLED = 0
MIXERCONTROL_CT_SC_TIME_MICROSECS = 0
MIXERCONTROL_CT_SC_TIME_MILLISECS = 16777216
MIXERCONTROL_CT_SC_LIST_SINGLE = 0
MIXERCONTROL_CT_SC_LIST_MULTIPLE = 16777216
MIXERCONTROL_CT_UNITS_MASK = 16711680
MIXERCONTROL_CT_UNITS_CUSTOM = 0
MIXERCONTROL_CT_UNITS_BOOLEAN = 65536
MIXERCONTROL_CT_UNITS_SIGNED = 131072
MIXERCONTROL_CT_UNITS_UNSIGNED = 196608
MIXERCONTROL_CT_UNITS_DECIBELS = 262144
MIXERCONTROL_CT_UNITS_PERCENT = 327680
MIXER_GETLINECONTROLSF_ALL = 0
MIXER_GETLINECONTROLSF_ONEBYID = 1
MIXER_GETLINECONTROLSF_ONEBYTYPE = 2
MIXER_GETLINECONTROLSF_QUERYMASK = 15
MIXER_GETCONTROLDETAILSF_VALUE = 0
MIXER_GETCONTROLDETAILSF_LISTTEXT = 1
MIXER_GETCONTROLDETAILSF_QUERYMASK = 15
MIXER_SETCONTROLDETAILSF_VALUE = 0
MIXER_SETCONTROLDETAILSF_CUSTOM = 1
MIXER_SETCONTROLDETAILSF_QUERYMASK = 15
DRV_MAPPER_PREFERRED_INPUT_GET = 16384
DRV_MAPPER_PREFERRED_OUTPUT_GET = 16386
DRVM_MAPPER = 8192
DRVM_MAPPER_STATUS = 8192
WIDM_MAPPER_STATUS = 8192
WAVEIN_MAPPER_STATUS_DEVICE = 0
WAVEIN_MAPPER_STATUS_MAPPED = 1
WAVEIN_MAPPER_STATUS_FORMAT = 2
WODM_MAPPER_STATUS = 8192
WAVEOUT_MAPPER_STATUS_DEVICE = 0
WAVEOUT_MAPPER_STATUS_MAPPED = 1
WAVEOUT_MAPPER_STATUS_FORMAT = 2
ACMERR_BASE = 512
ACMERR_NOTPOSSIBLE = 512
ACMERR_BUSY = 513
ACMERR_UNPREPARED = 514
ACMERR_CANCELED = 515
ACM_METRIC_COUNT_DRIVERS = 1
ACM_METRIC_COUNT_CODECS = 2
ACM_METRIC_COUNT_CONVERTERS = 3
ACM_METRIC_COUNT_FILTERS = 4
ACM_METRIC_COUNT_DISABLED = 5
ACM_METRIC_COUNT_HARDWARE = 6
ACM_METRIC_COUNT_LOCAL_DRIVERS = 20
ACM_METRIC_COUNT_LOCAL_CODECS = 21
ACM_METRIC_COUNT_LOCAL_CONVERTERS = 22
ACM_METRIC_COUNT_LOCAL_FILTERS = 23
ACM_METRIC_COUNT_LOCAL_DISABLED = 24
ACM_METRIC_HARDWARE_WAVE_INPUT = 30
ACM_METRIC_HARDWARE_WAVE_OUTPUT = 31
ACM_METRIC_MAX_SIZE_FORMAT = 50
ACM_METRIC_MAX_SIZE_FILTER = 51
ACM_METRIC_DRIVER_SUPPORT = 100
ACM_METRIC_DRIVER_PRIORITY = 101
ACM_DRIVERENUMF_NOLOCAL = 1073741824
ACM_DRIVERENUMF_DISABLED = -2147483648
ACM_DRIVERADDF_NAME = 1
ACM_DRIVERADDF_FUNCTION = 3
ACM_DRIVERADDF_NOTIFYHWND = 4
ACM_DRIVERADDF_TYPEMASK = 7
ACM_DRIVERADDF_LOCAL = 0
ACM_DRIVERADDF_GLOBAL = 8
ACMDM_USER = 16384
ACMDM_RESERVED_LOW = 24576
ACMDM_RESERVED_HIGH = 28671
ACMDM_DRIVER_ABOUT = 24587
ACM_DRIVERPRIORITYF_ENABLE = 1
ACM_DRIVERPRIORITYF_DISABLE = 2
ACM_DRIVERPRIORITYF_ABLEMASK = 3
ACM_DRIVERPRIORITYF_BEGIN = 65536
ACM_DRIVERPRIORITYF_END = 131072
ACM_DRIVERPRIORITYF_DEFERMASK = 196608
ACMDRIVERDETAILS_SHORTNAME_CHARS = 32
ACMDRIVERDETAILS_LONGNAME_CHARS = 128
ACMDRIVERDETAILS_COPYRIGHT_CHARS = 80
ACMDRIVERDETAILS_LICENSING_CHARS = 128
ACMDRIVERDETAILS_FEATURES_CHARS = 512
ACMDRIVERDETAILS_SUPPORTF_CODEC = 1
ACMDRIVERDETAILS_SUPPORTF_CONVERTER = 2
ACMDRIVERDETAILS_SUPPORTF_FILTER = 4
ACMDRIVERDETAILS_SUPPORTF_HARDWARE = 8
ACMDRIVERDETAILS_SUPPORTF_ASYNC = 16
ACMDRIVERDETAILS_SUPPORTF_LOCAL = 1073741824
ACMDRIVERDETAILS_SUPPORTF_DISABLED = -2147483648
ACMFORMATTAGDETAILS_FORMATTAG_CHARS = 48
ACM_FORMATTAGDETAILSF_INDEX = 0
ACM_FORMATTAGDETAILSF_FORMATTAG = 1
ACM_FORMATTAGDETAILSF_LARGESTSIZE = 2
ACM_FORMATTAGDETAILSF_QUERYMASK = 15
ACMFORMATDETAILS_FORMAT_CHARS = 128
ACM_FORMATDETAILSF_INDEX = 0
ACM_FORMATDETAILSF_FORMAT = 1
ACM_FORMATDETAILSF_QUERYMASK = 15
ACM_FORMATENUMF_WFORMATTAG = 65536
ACM_FORMATENUMF_NCHANNELS = 131072
ACM_FORMATENUMF_NSAMPLESPERSEC = 262144
ACM_FORMATENUMF_WBITSPERSAMPLE = 524288
ACM_FORMATENUMF_CONVERT = 1048576
ACM_FORMATENUMF_SUGGEST = 2097152
ACM_FORMATENUMF_HARDWARE = 4194304
ACM_FORMATENUMF_INPUT = 8388608
ACM_FORMATENUMF_OUTPUT = 16777216
ACM_FORMATSUGGESTF_WFORMATTAG = 65536
ACM_FORMATSUGGESTF_NCHANNELS = 131072
ACM_FORMATSUGGESTF_NSAMPLESPERSEC = 262144
ACM_FORMATSUGGESTF_WBITSPERSAMPLE = 524288
ACM_FORMATSUGGESTF_TYPEMASK = 16711680
MM_ACM_FORMATCHOOSE = 32768
FORMATCHOOSE_MESSAGE = 0
FORMATCHOOSE_FORMATTAG_VERIFY = 0
FORMATCHOOSE_FORMAT_VERIFY = 1
FORMATCHOOSE_CUSTOM_VERIFY = 2
ACMFORMATCHOOSE_STYLEF_SHOWHELP = 4
ACMFORMATCHOOSE_STYLEF_ENABLEHOOK = 8
ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATE = 16
ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE = 32
ACMFORMATCHOOSE_STYLEF_INITTOWFXSTRUCT = 64
ACMFORMATCHOOSE_STYLEF_CONTEXTHELP = 128
ACMFILTERTAGDETAILS_FILTERTAG_CHARS = 48
ACM_FILTERTAGDETAILSF_INDEX = 0
ACM_FILTERTAGDETAILSF_FILTERTAG = 1
ACM_FILTERTAGDETAILSF_LARGESTSIZE = 2
ACM_FILTERTAGDETAILSF_QUERYMASK = 15
ACMFILTERDETAILS_FILTER_CHARS = 128
ACM_FILTERDETAILSF_INDEX = 0
ACM_FILTERDETAILSF_FILTER = 1
ACM_FILTERDETAILSF_QUERYMASK = 15
ACM_FILTERENUMF_DWFILTERTAG = 65536
MM_ACM_FILTERCHOOSE = 32768
FILTERCHOOSE_MESSAGE = 0
FILTERCHOOSE_FILTERTAG_VERIFY = 0
FILTERCHOOSE_FILTER_VERIFY = 1
FILTERCHOOSE_CUSTOM_VERIFY = 2
ACMFILTERCHOOSE_STYLEF_SHOWHELP = 4
ACMFILTERCHOOSE_STYLEF_ENABLEHOOK = 8
ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATE = 16
ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATEHANDLE = 32
ACMFILTERCHOOSE_STYLEF_INITTOFILTERSTRUCT = 64
ACMFILTERCHOOSE_STYLEF_CONTEXTHELP = 128
ACMSTREAMHEADER_STATUSF_DONE = 65536
ACMSTREAMHEADER_STATUSF_PREPARED = 131072
ACMSTREAMHEADER_STATUSF_INQUEUE = 1048576
ACM_STREAMOPENF_QUERY = 1
ACM_STREAMOPENF_ASYNC = 2
ACM_STREAMOPENF_NONREALTIME = 4
ACM_STREAMSIZEF_SOURCE = 0
ACM_STREAMSIZEF_DESTINATION = 1
ACM_STREAMSIZEF_QUERYMASK = 15
ACM_STREAMCONVERTF_BLOCKALIGN = 4
ACM_STREAMCONVERTF_START = 16
ACM_STREAMCONVERTF_END = 32
SND_SYNC = 0
SND_ASYNC = 1
SND_NODEFAULT = 2
SND_MEMORY = 4
SND_LOOP = 8
SND_NOSTOP = 16
SND_NOWAIT = 8192
SND_ALIAS = 65536
SND_ALIAS_ID = 1114112
SND_FILENAME = 131072
SND_RESOURCE = 262148
SND_PURGE = 64
SND_APPLICATION = 128
SND_SENTRY = 524288
SND_RING = 1048576
SND_SYSTEM = 2097152
SND_ALIAS_START = 0
ACMDM_DRIVER_NOTIFY = 24577
ACMDM_DRIVER_DETAILS = 24586
ACMDM_HARDWARE_WAVE_CAPS_INPUT = 24596
ACMDM_HARDWARE_WAVE_CAPS_OUTPUT = 24597
ACMDM_FORMATTAG_DETAILS = 24601
ACMDM_FORMAT_DETAILS = 24602
ACMDM_FORMAT_SUGGEST = 24603
ACMDM_FILTERTAG_DETAILS = 24626
ACMDM_FILTER_DETAILS = 24627
ACMDM_STREAM_OPEN = 24652
ACMDM_STREAM_CLOSE = 24653
ACMDM_STREAM_SIZE = 24654
ACMDM_STREAM_CONVERT = 24655
ACMDM_STREAM_RESET = 24656
ACMDM_STREAM_PREPARE = 24657
ACMDM_STREAM_UNPREPARE = 24658
ACMDM_STREAM_UPDATE = 24659
alias LPWAVECALLBACK = (HDRVR, LibC::UInt32, LibC::UIint*, LibC::UIint*, LibC::UIint* -> LibC::Void)
alias LPMIDICALLBACK = (HDRVR, LibC::UInt32, LibC::UIint*, LibC::UIint*, LibC::UIint* -> LibC::Void)
enum MIDI_WAVE_OPEN_TYPE : UInt32
CALLBACK_TYPEMASK = 458752

CALLBACK_NULL = 0

CALLBACK_WINDOW = 65536

CALLBACK_TASK = 131072

CALLBACK_FUNCTION = 196608

CALLBACK_THREAD = 131072

CALLBACK_EVENT = 327680

WAVE_FORMAT_QUERY = 1

WAVE_ALLOWSYNC = 2

WAVE_MAPPED = 4

WAVE_FORMAT_DIRECT = 8

WAVE_FORMAT_DIRECT_QUERY = 9

WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE = 16

MIDI_IO_STATUS = 32

end
enum MIXERLINE_COMPONENTTYPE : UInt32
MIXERLINE_COMPONENTTYPE_DST_DIGITAL = 1

MIXERLINE_COMPONENTTYPE_DST_HEADPHONES = 5

MIXERLINE_COMPONENTTYPE_DST_LINE = 2

MIXERLINE_COMPONENTTYPE_DST_MONITOR = 3

MIXERLINE_COMPONENTTYPE_DST_SPEAKERS = 4

MIXERLINE_COMPONENTTYPE_DST_TELEPHONE = 6

MIXERLINE_COMPONENTTYPE_DST_UNDEFINED = 0

MIXERLINE_COMPONENTTYPE_DST_VOICEIN = 8

MIXERLINE_COMPONENTTYPE_DST_WAVEIN = 7

MIXERLINE_COMPONENTTYPE_SRC_ANALOG = 4106

MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY = 4105

MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = 4101

MIXERLINE_COMPONENTTYPE_SRC_DIGITAL = 4097

MIXERLINE_COMPONENTTYPE_SRC_LINE = 4098

MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE = 4099

MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER = 4103

MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = 4100

MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE = 4102

MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED = 4096

MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT = 4104

end
struct AUDIO_VOLUME_NOTIFICATION_DATA
  guidEventContext : LibC::Guid
  bMuted : BOOL
  fMasterVolume : LibC::Single
  nChannels : LibC::UInt32
  afChannelVolumes : Array(LibC::Single)
end
type HMIDI = LibC::Int*
type HMIDIIN = LibC::Int*
type HMIDIOUT = LibC::Int*
type HMIDISTRM = LibC::Int*
type HMIXER = LibC::Int*
type HMIXEROBJ = LibC::Int*
type HWAVE = LibC::Int*
type HWAVEOUT = LibC::Int*
type HWAVEIN = LibC::Int*
type HACMDRIVERID = LibC::Int*
type HACMDRIVER = LibC::Int*
type HACMSTREAM = LibC::Int*
type HACMOBJ = LibC::Int*
type Othere5027c91480f = LibC::UInt16 | LibC::UInt16 | LibC::UInt16
struct WAVEFORMATEXTENSIBLE
  format : WAVEFORMATEX
  samples : Othere5027c91480f
  dwChannelMask : LibC::UInt32
  subFormat : LibC::Guid
end
struct WAVEFILTER
  cbStruct : LibC::UInt32
  dwFilterTag : LibC::UInt32
  fdwFilter : LibC::UInt32
  dwReserved : Array(LibC::UInt32)
end
struct VOLUMEWAVEFILTER
  wfltr : WAVEFILTER
  dwVolume : LibC::UInt32
end
struct ECHOWAVEFILTER
  wfltr : WAVEFILTER
  dwVolume : LibC::UInt32
  dwDelay : LibC::UInt32
end
struct WAVEHDR
  lpData : PSTR
  dwBufferLength : LibC::UInt32
  dwBytesRecorded : LibC::UInt32
  dwUser : LibC::UIint*
  dwFlags : LibC::UInt32
  dwLoops : LibC::UInt32
  lpNext : WAVEHDR*
  reserved : LibC::UIint*
end
struct WAVEOUTCAPSA
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(CHAR)
  dwFormats : LibC::UInt32
  wChannels : LibC::UInt16
  wReserved1 : LibC::UInt16
  dwSupport : LibC::UInt32
end
struct WAVEOUTCAPSW
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(LibC::Char)
  dwFormats : LibC::UInt32
  wChannels : LibC::UInt16
  wReserved1 : LibC::UInt16
  dwSupport : LibC::UInt32
end
struct WAVEOUTCAPS2A
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(CHAR)
  dwFormats : LibC::UInt32
  wChannels : LibC::UInt16
  wReserved1 : LibC::UInt16
  dwSupport : LibC::UInt32
  manufacturerGuid : LibC::Guid
  productGuid : LibC::Guid
  nameGuid : LibC::Guid
end
struct WAVEOUTCAPS2W
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(LibC::Char)
  dwFormats : LibC::UInt32
  wChannels : LibC::UInt16
  wReserved1 : LibC::UInt16
  dwSupport : LibC::UInt32
  manufacturerGuid : LibC::Guid
  productGuid : LibC::Guid
  nameGuid : LibC::Guid
end
struct WAVEINCAPSA
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(CHAR)
  dwFormats : LibC::UInt32
  wChannels : LibC::UInt16
  wReserved1 : LibC::UInt16
end
struct WAVEINCAPSW
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(LibC::Char)
  dwFormats : LibC::UInt32
  wChannels : LibC::UInt16
  wReserved1 : LibC::UInt16
end
struct WAVEINCAPS2A
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(CHAR)
  dwFormats : LibC::UInt32
  wChannels : LibC::UInt16
  wReserved1 : LibC::UInt16
  manufacturerGuid : LibC::Guid
  productGuid : LibC::Guid
  nameGuid : LibC::Guid
end
struct WAVEINCAPS2W
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(LibC::Char)
  dwFormats : LibC::UInt32
  wChannels : LibC::UInt16
  wReserved1 : LibC::UInt16
  manufacturerGuid : LibC::Guid
  productGuid : LibC::Guid
  nameGuid : LibC::Guid
end
struct WAVEFORMAT
  wFormatTag : LibC::UInt16
  nChannels : LibC::UInt16
  nSamplesPerSec : LibC::UInt32
  nAvgBytesPerSec : LibC::UInt32
  nBlockAlign : LibC::UInt16
end
struct PCMWAVEFORMAT
  wf : WAVEFORMAT
  wBitsPerSample : LibC::UInt16
end
struct WAVEFORMATEX
  wFormatTag : LibC::UInt16
  nChannels : LibC::UInt16
  nSamplesPerSec : LibC::UInt32
  nAvgBytesPerSec : LibC::UInt32
  nBlockAlign : LibC::UInt16
  wBitsPerSample : LibC::UInt16
  cbSize : LibC::UInt16
end
struct MIDIOUTCAPSA
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(CHAR)
  wTechnology : LibC::UInt16
  wVoices : LibC::UInt16
  wNotes : LibC::UInt16
  wChannelMask : LibC::UInt16
  dwSupport : LibC::UInt32
end
struct MIDIOUTCAPSW
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(LibC::Char)
  wTechnology : LibC::UInt16
  wVoices : LibC::UInt16
  wNotes : LibC::UInt16
  wChannelMask : LibC::UInt16
  dwSupport : LibC::UInt32
end
struct MIDIOUTCAPS2A
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(CHAR)
  wTechnology : LibC::UInt16
  wVoices : LibC::UInt16
  wNotes : LibC::UInt16
  wChannelMask : LibC::UInt16
  dwSupport : LibC::UInt32
  manufacturerGuid : LibC::Guid
  productGuid : LibC::Guid
  nameGuid : LibC::Guid
end
struct MIDIOUTCAPS2W
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(LibC::Char)
  wTechnology : LibC::UInt16
  wVoices : LibC::UInt16
  wNotes : LibC::UInt16
  wChannelMask : LibC::UInt16
  dwSupport : LibC::UInt32
  manufacturerGuid : LibC::Guid
  productGuid : LibC::Guid
  nameGuid : LibC::Guid
end
struct MIDIINCAPSA
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(CHAR)
  dwSupport : LibC::UInt32
end
struct MIDIINCAPSW
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(LibC::Char)
  dwSupport : LibC::UInt32
end
struct MIDIINCAPS2A
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(CHAR)
  dwSupport : LibC::UInt32
  manufacturerGuid : LibC::Guid
  productGuid : LibC::Guid
  nameGuid : LibC::Guid
end
struct MIDIINCAPS2W
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(LibC::Char)
  dwSupport : LibC::UInt32
  manufacturerGuid : LibC::Guid
  productGuid : LibC::Guid
  nameGuid : LibC::Guid
end
struct MIDIHDR
  lpData : PSTR
  dwBufferLength : LibC::UInt32
  dwBytesRecorded : LibC::UInt32
  dwUser : LibC::UIint*
  dwFlags : LibC::UInt32
  lpNext : MIDIHDR*
  reserved : LibC::UIint*
  dwOffset : LibC::UInt32
  dwReserved : Array(LibC::UIntPtr)
end
struct MIDIEVENT
  dwDeltaTime : LibC::UInt32
  dwStreamID : LibC::UInt32
  dwEvent : LibC::UInt32
  dwParms : Array(LibC::UInt32)
end
struct MIDISTRMBUFFVER
  dwVersion : LibC::UInt32
  dwMid : LibC::UInt32
  dwOEMVersion : LibC::UInt32
end
struct MIDIPROPTIMEDIV
  cbStruct : LibC::UInt32
  dwTimeDiv : LibC::UInt32
end
struct MIDIPROPTEMPO
  cbStruct : LibC::UInt32
  dwTempo : LibC::UInt32
end
struct AUXCAPSA
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(CHAR)
  wTechnology : LibC::UInt16
  wReserved1 : LibC::UInt16
  dwSupport : LibC::UInt32
end
struct AUXCAPSW
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(LibC::Char)
  wTechnology : LibC::UInt16
  wReserved1 : LibC::UInt16
  dwSupport : LibC::UInt32
end
struct AUXCAPS2A
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(CHAR)
  wTechnology : LibC::UInt16
  wReserved1 : LibC::UInt16
  dwSupport : LibC::UInt32
  manufacturerGuid : LibC::Guid
  productGuid : LibC::Guid
  nameGuid : LibC::Guid
end
struct AUXCAPS2W
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(LibC::Char)
  wTechnology : LibC::UInt16
  wReserved1 : LibC::UInt16
  dwSupport : LibC::UInt32
  manufacturerGuid : LibC::Guid
  productGuid : LibC::Guid
  nameGuid : LibC::Guid
end
struct MIXERCAPSA
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(CHAR)
  fdwSupport : LibC::UInt32
  cDestinations : LibC::UInt32
end
struct MIXERCAPSW
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(LibC::Char)
  fdwSupport : LibC::UInt32
  cDestinations : LibC::UInt32
end
struct MIXERCAPS2A
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(CHAR)
  fdwSupport : LibC::UInt32
  cDestinations : LibC::UInt32
  manufacturerGuid : LibC::Guid
  productGuid : LibC::Guid
  nameGuid : LibC::Guid
end
struct MIXERCAPS2W
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(LibC::Char)
  fdwSupport : LibC::UInt32
  cDestinations : LibC::UInt32
  manufacturerGuid : LibC::Guid
  productGuid : LibC::Guid
  nameGuid : LibC::Guid
end
struct Rabbit771e67c26248
  dwType : LibC::UInt32
  dwDeviceID : LibC::UInt32
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(CHAR)
end
struct MIXERLINEA
  cbStruct : LibC::UInt32
  dwDestination : LibC::UInt32
  dwSource : LibC::UInt32
  dwLineID : LibC::UInt32
  fdwLine : LibC::UInt32
  dwUser : LibC::UIint*
  dwComponentType : MIXERLINE_COMPONENTTYPE
  cChannels : LibC::UInt32
  cConnections : LibC::UInt32
  cControls : LibC::UInt32
  szShortName : Array(CHAR)
  szName : Array(CHAR)
  target : Rabbit771e67c26248
end
struct Duckf9ff6bc34d98
  dwType : LibC::UInt32
  dwDeviceID : LibC::UInt32
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vDriverVersion : LibC::UInt32
  szPname : Array(LibC::Char)
end
struct MIXERLINEW
  cbStruct : LibC::UInt32
  dwDestination : LibC::UInt32
  dwSource : LibC::UInt32
  dwLineID : LibC::UInt32
  fdwLine : LibC::UInt32
  dwUser : LibC::UIint*
  dwComponentType : MIXERLINE_COMPONENTTYPE
  cChannels : LibC::UInt32
  cConnections : LibC::UInt32
  cControls : LibC::UInt32
  szShortName : Array(LibC::Char)
  szName : Array(LibC::Char)
  target : Duckf9ff6bc34d98
end
struct Other745752e7feba
  dwMinimum : LibC::UInt32
  dwMaximum : LibC::UInt32
end
struct Other263c50425b3e
  lMinimum : LibC::Int32
  lMaximum : LibC::Int32
end
type Owl132e1ed33e09 = Other263c50425b3e | Other745752e7feba | Array(LibC::UInt32)
type Duck0996368ae788 = LibC::UInt32 | LibC::UInt32 | Array(LibC::UInt32)
struct MIXERCONTROLA
  cbStruct : LibC::UInt32
  dwControlID : LibC::UInt32
  dwControlType : LibC::UInt32
  fdwControl : LibC::UInt32
  cMultipleItems : LibC::UInt32
  szShortName : Array(CHAR)
  szName : Array(CHAR)
  bounds : Owl132e1ed33e09
  metrics : Duck0996368ae788
end
struct Piga9f63b8c075a
  lMinimum : LibC::Int32
  lMaximum : LibC::Int32
end
struct Rabbite8077deef9f9
  dwMinimum : LibC::UInt32
  dwMaximum : LibC::UInt32
end
type Rabbita1d6e5ca543d = Piga9f63b8c075a | Rabbite8077deef9f9 | Array(LibC::UInt32)
type Duck869974e60183 = LibC::UInt32 | LibC::UInt32 | Array(LibC::UInt32)
struct MIXERCONTROLW
  cbStruct : LibC::UInt32
  dwControlID : LibC::UInt32
  dwControlType : LibC::UInt32
  fdwControl : LibC::UInt32
  cMultipleItems : LibC::UInt32
  szShortName : Array(LibC::Char)
  szName : Array(LibC::Char)
  bounds : Rabbita1d6e5ca543d
  metrics : Duck869974e60183
end
type Duckf2cf9f87c03b = LibC::UInt32 | LibC::UInt32
struct MIXERLINECONTROLSA
  cbStruct : LibC::UInt32
  dwLineID : LibC::UInt32
  cControls : LibC::UInt32
  cbmxctrl : LibC::UInt32
  pamxctrl : MIXERCONTROLA*
end
type Duck0c0b50c619aa = LibC::UInt32 | LibC::UInt32
struct MIXERLINECONTROLSW
  cbStruct : LibC::UInt32
  dwLineID : LibC::UInt32
  cControls : LibC::UInt32
  cbmxctrl : LibC::UInt32
  pamxctrl : MIXERCONTROLW*
end
type Other3569c5051196 = HWND | LibC::UInt32
struct MIXERCONTROLDETAILS
  cbStruct : LibC::UInt32
  dwControlID : LibC::UInt32
  cChannels : LibC::UInt32
  cbDetails : LibC::UInt32
  paDetails : LibC::Void*
end
struct MIXERCONTROLDETAILS_LISTTEXTA
  dwParam1 : LibC::UInt32
  dwParam2 : LibC::UInt32
  szName : Array(CHAR)
end
struct MIXERCONTROLDETAILS_LISTTEXTW
  dwParam1 : LibC::UInt32
  dwParam2 : LibC::UInt32
  szName : Array(LibC::Char)
end
struct MIXERCONTROLDETAILS_BOOLEAN
  fValue : LibC::Int32
end
struct MIXERCONTROLDETAILS_SIGNED
  lValue : LibC::Int32
end
struct MIXERCONTROLDETAILS_UNSIGNED
  dwValue : LibC::UInt32
end
enum AUDCLNT_SHAREMODE : Int32
AUDCLNT_SHAREMODE_SHARED = 0

AUDCLNT_SHAREMODE_EXCLUSIVE = 1

end
enum AUDIO_STREAM_CATEGORY : Int32
AudioCategory_Other = 0

AudioCategory_ForegroundOnlyMedia = 1

AudioCategory_Communications = 3

AudioCategory_Alerts = 4

AudioCategory_SoundEffects = 5

AudioCategory_GameEffects = 6

AudioCategory_GameMedia = 7

AudioCategory_GameChat = 8

AudioCategory_Speech = 9

AudioCategory_Movie = 10

AudioCategory_Media = 11

AudioCategory_FarFieldSpeech = 12

AudioCategory_UniformSpeech = 13

AudioCategory_VoiceTyping = 14

end
enum AudioSessionState : Int32
AudioSessionStateInactive = 0

AudioSessionStateActive = 1

AudioSessionStateExpired = 2

end
enum AUDCLNT_BUFFERFLAGS : Int32
AUDCLNT_BUFFERFLAGS_DATA_DISCONTINUITY = 1

AUDCLNT_BUFFERFLAGS_SILENT = 2

AUDCLNT_BUFFERFLAGS_TIMESTAMP_ERROR = 4

end
enum AUDCLNT_STREAMOPTIONS : UInt32
AUDCLNT_STREAMOPTIONS_NONE = 0

AUDCLNT_STREAMOPTIONS_RAW = 1

AUDCLNT_STREAMOPTIONS_MATCH_FORMAT = 2

AUDCLNT_STREAMOPTIONS_AMBISONICS = 4

end
struct AudioClientProperties
  cbSize : LibC::UInt32
  bIsOffload : BOOL
  eCategory : AUDIO_STREAM_CATEGORY
  options : AUDCLNT_STREAMOPTIONS
end
struct AudioClient3ActivationParams
  tracingContextId : LibC::Guid
end
enum AUDIO_DUCKING_OPTIONS : UInt32
AUDIO_DUCKING_OPTIONS_DEFAULT = 0

AUDIO_DUCKING_OPTIONS_DO_NOT_DUCK_OTHER_STREAMS = 1

end
enum AUDIO_EFFECT_STATE : Int32
AUDIO_EFFECT_STATE_OFF = 0

AUDIO_EFFECT_STATE_ON = 1

end
struct AUDIO_EFFECT
  id : LibC::Guid
  canSetState : BOOL
  state : AUDIO_EFFECT_STATE
end
enum AMBISONICS_TYPE : Int32
AMBISONICS_TYPE_FULL3D = 0

end
enum AMBISONICS_CHANNEL_ORDERING : Int32
AMBISONICS_CHANNEL_ORDERING_ACN = 0

end
enum AMBISONICS_NORMALIZATION : Int32
AMBISONICS_NORMALIZATION_SN3D = 0

AMBISONICS_NORMALIZATION_N3D = 1

end
struct AMBISONICS_PARAMS
  u32Size : LibC::UInt32
  u32Version : LibC::UInt32
  u32Type : AMBISONICS_TYPE
  u32ChannelOrdering : AMBISONICS_CHANNEL_ORDERING
  u32Normalization : AMBISONICS_NORMALIZATION
  u32Order : LibC::UInt32
  u32NumChannels : LibC::UInt32
  pu32ChannelMap : LibC::UInt32*
end
enum AudioObjectType : UInt32
AudioObjectType_None = 0

AudioObjectType_Dynamic = 1

AudioObjectType_FrontLeft = 2

AudioObjectType_FrontRight = 4

AudioObjectType_FrontCenter = 8

AudioObjectType_LowFrequency = 16

AudioObjectType_SideLeft = 32

AudioObjectType_SideRight = 64

AudioObjectType_BackLeft = 128

AudioObjectType_BackRight = 256

AudioObjectType_TopFrontLeft = 512

AudioObjectType_TopFrontRight = 1024

AudioObjectType_TopBackLeft = 2048

AudioObjectType_TopBackRight = 4096

AudioObjectType_BottomFrontLeft = 8192

AudioObjectType_BottomFrontRight = 16384

AudioObjectType_BottomBackLeft = 32768

AudioObjectType_BottomBackRight = 65536

AudioObjectType_BackCenter = 131072

end
enum SPATIAL_AUDIO_STREAM_OPTIONS : UInt32
SPATIAL_AUDIO_STREAM_OPTIONS_NONE = 0

SPATIAL_AUDIO_STREAM_OPTIONS_OFFLOAD = 1

end
struct SpatialAudioObjectRenderStreamActivationParams
  objectFormat : WAVEFORMATEX*
  staticObjectTypeMask : AudioObjectType
  minDynamicObjectCount : LibC::UInt32
  maxDynamicObjectCount : LibC::UInt32
  category : AUDIO_STREAM_CATEGORY
  eventHandle : HANDLE
  notifyObject : ISpatialAudioObjectRenderStreamNotify
end
struct SpatialAudioObjectRenderStreamActivationParams2
  objectFormat : WAVEFORMATEX*
  staticObjectTypeMask : AudioObjectType
  minDynamicObjectCount : LibC::UInt32
  maxDynamicObjectCount : LibC::UInt32
  category : AUDIO_STREAM_CATEGORY
  eventHandle : HANDLE
  notifyObject : ISpatialAudioObjectRenderStreamNotify
  options : SPATIAL_AUDIO_STREAM_OPTIONS
end
struct SpatialAudioClientActivationParams
  tracingContextId : LibC::Guid
  appId : LibC::Guid
  majorVersion : LibC::Int32
  minorVersion1 : LibC::Int32
  minorVersion2 : LibC::Int32
  minorVersion3 : LibC::Int32
end
enum SpatialAudioHrtfDirectivityType : Int32
SpatialAudioHrtfDirectivity_OmniDirectional = 0

SpatialAudioHrtfDirectivity_Cardioid = 1

SpatialAudioHrtfDirectivity_Cone = 2

end
enum SpatialAudioHrtfEnvironmentType : Int32
SpatialAudioHrtfEnvironment_Small = 0

SpatialAudioHrtfEnvironment_Medium = 1

SpatialAudioHrtfEnvironment_Large = 2

SpatialAudioHrtfEnvironment_Outdoors = 3

SpatialAudioHrtfEnvironment_Average = 4

end
enum SpatialAudioHrtfDistanceDecayType : Int32
SpatialAudioHrtfDistanceDecay_NaturalDecay = 0

SpatialAudioHrtfDistanceDecay_CustomDecay = 1

end
struct SpatialAudioHrtfDirectivity
  type : SpatialAudioHrtfDirectivityType
  scaling : LibC::Single
end
struct SpatialAudioHrtfDirectivityCardioid
  directivity : SpatialAudioHrtfDirectivity
  order : LibC::Single
end
struct SpatialAudioHrtfDirectivityCone
  directivity : SpatialAudioHrtfDirectivity
  innerAngle : LibC::Single
  outerAngle : LibC::Single
end
type SpatialAudioHrtfDirectivityUnion = SpatialAudioHrtfDirectivityCone | SpatialAudioHrtfDirectivityCardioid | SpatialAudioHrtfDirectivity
struct SpatialAudioHrtfDistanceDecay
  type : SpatialAudioHrtfDistanceDecayType
  maxGain : LibC::Single
  minGain : LibC::Single
  unityGainDistance : LibC::Single
  cutoffDistance : LibC::Single
end
struct SpatialAudioHrtfActivationParams
  objectFormat : WAVEFORMATEX*
  staticObjectTypeMask : AudioObjectType
  minDynamicObjectCount : LibC::UInt32
  maxDynamicObjectCount : LibC::UInt32
  category : AUDIO_STREAM_CATEGORY
  eventHandle : HANDLE
  notifyObject : ISpatialAudioObjectRenderStreamNotify
  distanceDecay : SpatialAudioHrtfDistanceDecay*
  directivity : SpatialAudioHrtfDirectivityUnion*
  environment : SpatialAudioHrtfEnvironmentType*
  orientation : LibC::Single*
end
struct SpatialAudioHrtfActivationParams2
  objectFormat : WAVEFORMATEX*
  staticObjectTypeMask : AudioObjectType
  minDynamicObjectCount : LibC::UInt32
  maxDynamicObjectCount : LibC::UInt32
  category : AUDIO_STREAM_CATEGORY
  eventHandle : HANDLE
  notifyObject : ISpatialAudioObjectRenderStreamNotify
  distanceDecay : SpatialAudioHrtfDistanceDecay*
  directivity : SpatialAudioHrtfDirectivityUnion*
  environment : SpatialAudioHrtfEnvironmentType*
  orientation : LibC::Single*
  options : SPATIAL_AUDIO_STREAM_OPTIONS
end
struct DIRECTX_AUDIO_ACTIVATION_PARAMS
  cbDirectXAudioActivationParams : LibC::UInt32
  guidAudioSession : LibC::Guid
  dwAudioStreamFlags : LibC::UInt32
end
enum EDataFlow : Int32
ERender = 0

ECapture = 1

EAll = 2

EDataFlow_enum_count = 3

end
enum ERole : Int32
EConsole = 0

EMultimedia = 1

ECommunications = 2

ERole_enum_count = 3

end
enum EndpointFormFactor : Int32
RemoteNetworkDevice = 0

Speakers = 1

LineLevel = 2

Headphones = 3

Microphone = 4

Headset = 5

Handset = 6

UnknownDigitalPassthrough = 7

SPDIF = 8

DigitalAudioDisplayDevice = 9

UnknownFormFactor = 10

EndpointFormFactor_enum_count = 11

end
struct AudioExtensionParams
  addPageParam : LPARAM
  pEndpoint : IMMDevice
  pPnpInterface : IMMDevice
  pPnpDevnode : IMMDevice
end
enum _MIDL___MIDL_itf_mmdeviceapi_0000_0008_0002 : Int32
AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_DEFAULT = 0

AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_USER = 1

AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_VOLATILE = 2

AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_ENUM_COUNT = 3

end
enum DataFlow : Int32
In = 0

Out = 1

end
enum PartType : Int32
Connector = 0

Subunit = 1

end
enum ConnectorType : Int32
Unknown_Connector = 0

Physical_Internal = 1

Physical_External = 2

Software_IO = 3

Software_Fixed = 4

Network = 5

end
enum AudioSessionDisconnectReason : Int32
DisconnectReasonDeviceRemoval = 0

DisconnectReasonServerShutdown = 1

DisconnectReasonFormatChanged = 2

DisconnectReasonSessionLogoff = 3

DisconnectReasonSessionDisconnected = 4

DisconnectReasonExclusiveModeOverride = 5

end
enum SpatialAudioMetadataWriterOverflowMode : Int32
SpatialAudioMetadataWriterOverflow_Fail = 0

SpatialAudioMetadataWriterOverflow_MergeWithNew = 1

SpatialAudioMetadataWriterOverflow_MergeWithLast = 2

end
enum SpatialAudioMetadataCopyMode : Int32
SpatialAudioMetadataCopy_Overwrite = 0

SpatialAudioMetadataCopy_Append = 1

SpatialAudioMetadataCopy_AppendMergeWithLast = 2

SpatialAudioMetadataCopy_AppendMergeWithFirst = 3

end
struct SpatialAudioMetadataItemsInfo
  frameCount : LibC::UInt16
  itemCount : LibC::UInt16
  maxItemCount : LibC::UInt16
  maxValueBufferLength : LibC::UInt32
end
struct SpatialAudioObjectRenderStreamForMetadataActivationParams
  objectFormat : WAVEFORMATEX*
  staticObjectTypeMask : AudioObjectType
  minDynamicObjectCount : LibC::UInt32
  maxDynamicObjectCount : LibC::UInt32
  category : AUDIO_STREAM_CATEGORY
  eventHandle : HANDLE
  metadataFormatId : LibC::Guid
  maxMetadataItemCount : LibC::UInt16
  metadataActivationParams : PROPVARIANT*
  notifyObject : ISpatialAudioObjectRenderStreamNotify
end
struct SpatialAudioObjectRenderStreamForMetadataActivationParams2
  objectFormat : WAVEFORMATEX*
  staticObjectTypeMask : AudioObjectType
  minDynamicObjectCount : LibC::UInt32
  maxDynamicObjectCount : LibC::UInt32
  category : AUDIO_STREAM_CATEGORY
  eventHandle : HANDLE
  metadataFormatId : LibC::Guid
  maxMetadataItemCount : LibC::UInt32
  metadataActivationParams : PROPVARIANT*
  notifyObject : ISpatialAudioObjectRenderStreamNotify
  options : SPATIAL_AUDIO_STREAM_OPTIONS
end
enum PROCESS_LOOPBACK_MODE : Int32
PROCESS_LOOPBACK_MODE_INCLUDE_TARGET_PROCESS_TREE = 0

PROCESS_LOOPBACK_MODE_EXCLUDE_TARGET_PROCESS_TREE = 1

end
struct AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS
  targetProcessId : LibC::UInt32
  processLoopbackMode : PROCESS_LOOPBACK_MODE
end
enum AUDIOCLIENT_ACTIVATION_TYPE : Int32
AUDIOCLIENT_ACTIVATION_TYPE_DEFAULT = 0

AUDIOCLIENT_ACTIVATION_TYPE_PROCESS_LOOPBACK = 1

end
type Duckf400ea31e9d5 = AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS
struct AUDIOCLIENT_ACTIVATION_PARAMS
  activationType : AUDIOCLIENT_ACTIVATION_TYPE
end
alias PAudioStateMonitorCallback = (IAudioStateMonitor, LibC::Void* -> LibC::Void)
enum AudioStateMonitorSoundLevel : Int32
Muted = 0

Low = 1

Full = 2

end
alias ACMDRIVERENUMCB = (HACMDRIVERID, LibC::UIint*, LibC::UInt32 -> BOOL)
alias LPACMDRIVERPROC = (LibC::UIint*, HACMDRIVERID, LibC::UInt32, LPARAM, LPARAM -> LRESULT)
struct ACMDRIVERDETAILSA
  cbStruct : LibC::UInt32
  fccType : LibC::UInt32
  fccComp : LibC::UInt32
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vdwACM : LibC::UInt32
  vdwDriver : LibC::UInt32
  fdwSupport : LibC::UInt32
  cFormatTags : LibC::UInt32
  cFilterTags : LibC::UInt32
  hicon : HICON
  szShortName : Array(CHAR)
  szLongName : Array(CHAR)
  szCopyright : Array(CHAR)
  szLicensing : Array(CHAR)
  szFeatures : Array(CHAR)
end
struct ACMDRIVERDETAILSW
  cbStruct : LibC::UInt32
  fccType : LibC::UInt32
  fccComp : LibC::UInt32
  wMid : LibC::UInt16
  wPid : LibC::UInt16
  vdwACM : LibC::UInt32
  vdwDriver : LibC::UInt32
  fdwSupport : LibC::UInt32
  cFormatTags : LibC::UInt32
  cFilterTags : LibC::UInt32
  hicon : HICON
  szShortName : Array(LibC::Char)
  szLongName : Array(LibC::Char)
  szCopyright : Array(LibC::Char)
  szLicensing : Array(LibC::Char)
  szFeatures : Array(LibC::Char)
end
struct ACMFORMATTAGDETAILSA
  cbStruct : LibC::UInt32
  dwFormatTagIndex : LibC::UInt32
  dwFormatTag : LibC::UInt32
  cbFormatSize : LibC::UInt32
  fdwSupport : LibC::UInt32
  cStandardFormats : LibC::UInt32
  szFormatTag : Array(CHAR)
end
struct ACMFORMATTAGDETAILSW
  cbStruct : LibC::UInt32
  dwFormatTagIndex : LibC::UInt32
  dwFormatTag : LibC::UInt32
  cbFormatSize : LibC::UInt32
  fdwSupport : LibC::UInt32
  cStandardFormats : LibC::UInt32
  szFormatTag : Array(LibC::Char)
end
alias ACMFORMATTAGENUMCBA = (HACMDRIVERID, ACMFORMATTAGDETAILSA*, LibC::UIint*, LibC::UInt32 -> BOOL)
alias ACMFORMATTAGENUMCBW = (HACMDRIVERID, ACMFORMATTAGDETAILSW*, LibC::UIint*, LibC::UInt32 -> BOOL)
struct ACMFORMATDETAILSA
  cbStruct : LibC::UInt32
  dwFormatIndex : LibC::UInt32
  dwFormatTag : LibC::UInt32
  fdwSupport : LibC::UInt32
  pwfx : WAVEFORMATEX*
  cbwfx : LibC::UInt32
  szFormat : Array(CHAR)
end
struct TACMFORMATDETAILSW
  cbStruct : LibC::UInt32
  dwFormatIndex : LibC::UInt32
  dwFormatTag : LibC::UInt32
  fdwSupport : LibC::UInt32
  pwfx : WAVEFORMATEX*
  cbwfx : LibC::UInt32
  szFormat : Array(LibC::Char)
end
alias ACMFORMATENUMCBA = (HACMDRIVERID, ACMFORMATDETAILSA*, LibC::UIint*, LibC::UInt32 -> BOOL)
alias ACMFORMATENUMCBW = (HACMDRIVERID, TACMFORMATDETAILSW*, LibC::UIint*, LibC::UInt32 -> BOOL)
alias ACMFORMATCHOOSEHOOKPROCA = (HWND, LibC::UInt32, WPARAM, LPARAM -> LibC::UInt32)
alias ACMFORMATCHOOSEHOOKPROCW = (HWND, LibC::UInt32, WPARAM, LPARAM -> LibC::UInt32)
struct ACMFORMATCHOOSEA
  cbStruct : LibC::UInt32
  fdwStyle : LibC::UInt32
  hwndOwner : HWND
  pwfx : WAVEFORMATEX*
  cbwfx : LibC::UInt32
  pszTitle : PSTR
  szFormatTag : Array(CHAR)
  szFormat : Array(CHAR)
  pszName : PSTR
  cchName : LibC::UInt32
  fdwEnum : LibC::UInt32
  pwfxEnum : WAVEFORMATEX*
  hInstance : HINSTANCE
  pszTemplateName : PSTR
  lCustData : LPARAM
  pfnHook : ACMFORMATCHOOSEHOOKPROCA
end
struct ACMFORMATCHOOSEW
  cbStruct : LibC::UInt32
  fdwStyle : LibC::UInt32
  hwndOwner : HWND
  pwfx : WAVEFORMATEX*
  cbwfx : LibC::UInt32
  pszTitle : PWSTR
  szFormatTag : Array(LibC::Char)
  szFormat : Array(LibC::Char)
  pszName : PWSTR
  cchName : LibC::UInt32
  fdwEnum : LibC::UInt32
  pwfxEnum : WAVEFORMATEX*
  hInstance : HINSTANCE
  pszTemplateName : PWSTR
  lCustData : LPARAM
  pfnHook : ACMFORMATCHOOSEHOOKPROCW
end
struct ACMFILTERTAGDETAILSA
  cbStruct : LibC::UInt32
  dwFilterTagIndex : LibC::UInt32
  dwFilterTag : LibC::UInt32
  cbFilterSize : LibC::UInt32
  fdwSupport : LibC::UInt32
  cStandardFilters : LibC::UInt32
  szFilterTag : Array(CHAR)
end
struct ACMFILTERTAGDETAILSW
  cbStruct : LibC::UInt32
  dwFilterTagIndex : LibC::UInt32
  dwFilterTag : LibC::UInt32
  cbFilterSize : LibC::UInt32
  fdwSupport : LibC::UInt32
  cStandardFilters : LibC::UInt32
  szFilterTag : Array(LibC::Char)
end
alias ACMFILTERTAGENUMCBA = (HACMDRIVERID, ACMFILTERTAGDETAILSA*, LibC::UIint*, LibC::UInt32 -> BOOL)
alias ACMFILTERTAGENUMCBW = (HACMDRIVERID, ACMFILTERTAGDETAILSW*, LibC::UIint*, LibC::UInt32 -> BOOL)
struct ACMFILTERDETAILSA
  cbStruct : LibC::UInt32
  dwFilterIndex : LibC::UInt32
  dwFilterTag : LibC::UInt32
  fdwSupport : LibC::UInt32
  pwfltr : WAVEFILTER*
  cbwfltr : LibC::UInt32
  szFilter : Array(CHAR)
end
struct ACMFILTERDETAILSW
  cbStruct : LibC::UInt32
  dwFilterIndex : LibC::UInt32
  dwFilterTag : LibC::UInt32
  fdwSupport : LibC::UInt32
  pwfltr : WAVEFILTER*
  cbwfltr : LibC::UInt32
  szFilter : Array(LibC::Char)
end
alias ACMFILTERENUMCBA = (HACMDRIVERID, ACMFILTERDETAILSA*, LibC::UIint*, LibC::UInt32 -> BOOL)
alias ACMFILTERENUMCBW = (HACMDRIVERID, ACMFILTERDETAILSW*, LibC::UIint*, LibC::UInt32 -> BOOL)
alias ACMFILTERCHOOSEHOOKPROCA = (HWND, LibC::UInt32, WPARAM, LPARAM -> LibC::UInt32)
alias ACMFILTERCHOOSEHOOKPROCW = (HWND, LibC::UInt32, WPARAM, LPARAM -> LibC::UInt32)
struct ACMFILTERCHOOSEA
  cbStruct : LibC::UInt32
  fdwStyle : LibC::UInt32
  hwndOwner : HWND
  pwfltr : WAVEFILTER*
  cbwfltr : LibC::UInt32
  pszTitle : PSTR
  szFilterTag : Array(CHAR)
  szFilter : Array(CHAR)
  pszName : PSTR
  cchName : LibC::UInt32
  fdwEnum : LibC::UInt32
  pwfltrEnum : WAVEFILTER*
  hInstance : HINSTANCE
  pszTemplateName : PSTR
  lCustData : LPARAM
  pfnHook : ACMFILTERCHOOSEHOOKPROCA
end
struct ACMFILTERCHOOSEW
  cbStruct : LibC::UInt32
  fdwStyle : LibC::UInt32
  hwndOwner : HWND
  pwfltr : WAVEFILTER*
  cbwfltr : LibC::UInt32
  pszTitle : PWSTR
  szFilterTag : Array(LibC::Char)
  szFilter : Array(LibC::Char)
  pszName : PWSTR
  cchName : LibC::UInt32
  fdwEnum : LibC::UInt32
  pwfltrEnum : WAVEFILTER*
  hInstance : HINSTANCE
  pszTemplateName : PWSTR
  lCustData : LPARAM
  pfnHook : ACMFILTERCHOOSEHOOKPROCW
end
struct ACMSTREAMHEADER
  cbStruct : LibC::UInt32
  fdwStatus : LibC::UInt32
  dwUser : LibC::UIint*
  pbSrc : LibC::Byte*
  cbSrcLength : LibC::UInt32
  cbSrcLengthUsed : LibC::UInt32
  dwSrcUser : LibC::UIint*
  pbDst : LibC::Byte*
  cbDstLength : LibC::UInt32
  cbDstLengthUsed : LibC::UInt32
  dwDstUser : LibC::UIint*
  dwReservedDriver : Array(LibC::UInt32)
end
struct TACMDRVOPENDESCA
  cbStruct : LibC::UInt32
  fccType : LibC::UInt32
  fccComp : LibC::UInt32
  dwVersion : LibC::UInt32
  dwFlags : LibC::UInt32
  dwError : LibC::UInt32
  pszSectionName : PSTR
  pszAliasName : PSTR
  dnDevNode : LibC::UInt32
end
struct TACMDRVOPENDESCW
  cbStruct : LibC::UInt32
  fccType : LibC::UInt32
  fccComp : LibC::UInt32
  dwVersion : LibC::UInt32
  dwFlags : LibC::UInt32
  dwError : LibC::UInt32
  pszSectionName : PWSTR
  pszAliasName : PWSTR
  dnDevNode : LibC::UInt32
end
struct ACMDRVSTREAMINSTANCE
  cbStruct : LibC::UInt32
  pwfxSrc : WAVEFORMATEX*
  pwfxDst : WAVEFORMATEX*
  pwfltr : WAVEFILTER*
  dwCallback : LibC::UIint*
  dwInstance : LibC::UIint*
  fdwOpen : LibC::UInt32
  fdwDriver : LibC::UInt32
  dwDriver : LibC::UIint*
  has : HACMSTREAM
end
struct ACMDRVSTREAMHEADER
  cbStruct : LibC::UInt32
  fdwStatus : LibC::UInt32
  dwUser : LibC::UIint*
  pbSrc : LibC::Byte*
  cbSrcLength : LibC::UInt32
  cbSrcLengthUsed : LibC::UInt32
  dwSrcUser : LibC::UIint*
  pbDst : LibC::Byte*
  cbDstLength : LibC::UInt32
  cbDstLengthUsed : LibC::UInt32
  dwDstUser : LibC::UIint*
  fdwConvert : LibC::UInt32
  padshNext : ACMDRVSTREAMHEADER*
  fdwDriver : LibC::UInt32
  dwDriver : LibC::UIint*
  fdwPrepared : LibC::UInt32
  dwPrepared : LibC::UIint*
  pbPreparedSrc : LibC::Byte*
  cbPreparedSrcLength : LibC::UInt32
  pbPreparedDst : LibC::Byte*
  cbPreparedDstLength : LibC::UInt32
end
struct ACMDRVSTREAMSIZE
  cbStruct : LibC::UInt32
  fdwSize : LibC::UInt32
  cbSrcLength : LibC::UInt32
  cbDstLength : LibC::UInt32
end
struct ACMDRVFORMATSUGGEST
  cbStruct : LibC::UInt32
  fdwSuggest : LibC::UInt32
  pwfxSrc : WAVEFORMATEX*
  cbwfxSrc : LibC::UInt32
  pwfxDst : WAVEFORMATEX*
  cbwfxDst : LibC::UInt32
end
struct ACMSTREAMHEADER
  cbStruct : LibC::UInt32
  fdwStatus : LibC::UInt32
  dwUser : LibC::UIint*
  pbSrc : LibC::Byte*
  cbSrcLength : LibC::UInt32
  cbSrcLengthUsed : LibC::UInt32
  dwSrcUser : LibC::UIint*
  pbDst : LibC::Byte*
  cbDstLength : LibC::UInt32
  cbDstLengthUsed : LibC::UInt32
  dwDstUser : LibC::UIint*
  dwReservedDriver : Array(LibC::UInt32)
end
fun coRegisterMessageFilter(lpMessageFilter : IMessageFilter, lplpMessageFilter : IMessageFilter*) : HRESULT
fun sndPlaySoundA(pszSound : PSTR, fuSound : LibC::UInt32) : BOOL
fun sndPlaySoundW(pszSound : PWSTR, fuSound : LibC::UInt32) : BOOL
fun playSoundA(pszSound : PSTR, hmod : HINSTANCE, fdwSound : LibC::UInt32) : BOOL
fun playSoundW(pszSound : PWSTR, hmod : HINSTANCE, fdwSound : LibC::UInt32) : BOOL
fun waveOutGetNumDevs() : LibC::UInt32
fun waveOutGetDevCapsA(uDeviceID : LibC::UIint*, pwoc : WAVEOUTCAPSA*, cbwoc : LibC::UInt32) : LibC::UInt32
fun waveOutGetDevCapsW(uDeviceID : LibC::UIint*, pwoc : WAVEOUTCAPSW*, cbwoc : LibC::UInt32) : LibC::UInt32
fun waveOutGetVolume(hwo : HWAVEOUT, pdwVolume : LibC::UInt32*) : LibC::UInt32
fun waveOutSetVolume(hwo : HWAVEOUT, dwVolume : LibC::UInt32) : LibC::UInt32
fun waveOutOpen(phwo : HWAVEOUT*, uDeviceID : LibC::UInt32, pwfx : WAVEFORMATEX*, dwCallback : LibC::UIint*, dwInstance : LibC::UIint*, fdwOpen : MIDI_WAVE_OPEN_TYPE) : LibC::UInt32
fun waveOutClose(hwo : HWAVEOUT) : LibC::UInt32
fun waveOutPrepareHeader(hwo : HWAVEOUT, pwh : WAVEHDR*, cbwh : LibC::UInt32) : LibC::UInt32
fun waveOutUnprepareHeader(hwo : HWAVEOUT, pwh : WAVEHDR*, cbwh : LibC::UInt32) : LibC::UInt32
fun waveOutWrite(hwo : HWAVEOUT, pwh : WAVEHDR*, cbwh : LibC::UInt32) : LibC::UInt32
fun waveOutPause(hwo : HWAVEOUT) : LibC::UInt32
fun waveOutRestart(hwo : HWAVEOUT) : LibC::UInt32
fun waveOutReset(hwo : HWAVEOUT) : LibC::UInt32
fun waveOutBreakLoop(hwo : HWAVEOUT) : LibC::UInt32
fun waveOutGetPosition(hwo : HWAVEOUT, pmmt : MMTIME*, cbmmt : LibC::UInt32) : LibC::UInt32
fun waveOutGetPitch(hwo : HWAVEOUT, pdwPitch : LibC::UInt32*) : LibC::UInt32
fun waveOutSetPitch(hwo : HWAVEOUT, dwPitch : LibC::UInt32) : LibC::UInt32
fun waveOutGetPlaybackRate(hwo : HWAVEOUT, pdwRate : LibC::UInt32*) : LibC::UInt32
fun waveOutSetPlaybackRate(hwo : HWAVEOUT, dwRate : LibC::UInt32) : LibC::UInt32
fun waveOutGetID(hwo : HWAVEOUT, puDeviceID : LibC::UInt32*) : LibC::UInt32
fun waveOutMessage(hwo : HWAVEOUT, uMsg : LibC::UInt32, dw1 : LibC::UIint*, dw2 : LibC::UIint*) : LibC::UInt32
fun waveInGetNumDevs() : LibC::UInt32
fun waveInGetDevCapsA(uDeviceID : LibC::UIint*, pwic : WAVEINCAPSA*, cbwic : LibC::UInt32) : LibC::UInt32
fun waveInGetDevCapsW(uDeviceID : LibC::UIint*, pwic : WAVEINCAPSW*, cbwic : LibC::UInt32) : LibC::UInt32
fun waveInOpen(phwi : HWAVEIN*, uDeviceID : LibC::UInt32, pwfx : WAVEFORMATEX*, dwCallback : LibC::UIint*, dwInstance : LibC::UIint*, fdwOpen : MIDI_WAVE_OPEN_TYPE) : LibC::UInt32
fun waveInClose(hwi : HWAVEIN) : LibC::UInt32
fun waveInPrepareHeader(hwi : HWAVEIN, pwh : WAVEHDR*, cbwh : LibC::UInt32) : LibC::UInt32
fun waveInUnprepareHeader(hwi : HWAVEIN, pwh : WAVEHDR*, cbwh : LibC::UInt32) : LibC::UInt32
fun waveInAddBuffer(hwi : HWAVEIN, pwh : WAVEHDR*, cbwh : LibC::UInt32) : LibC::UInt32
fun waveInStart(hwi : HWAVEIN) : LibC::UInt32
fun waveInStop(hwi : HWAVEIN) : LibC::UInt32
fun waveInReset(hwi : HWAVEIN) : LibC::UInt32
fun waveInGetPosition(hwi : HWAVEIN, pmmt : MMTIME*, cbmmt : LibC::UInt32) : LibC::UInt32
fun waveInGetID(hwi : HWAVEIN, puDeviceID : LibC::UInt32*) : LibC::UInt32
fun waveInMessage(hwi : HWAVEIN, uMsg : LibC::UInt32, dw1 : LibC::UIint*, dw2 : LibC::UIint*) : LibC::UInt32
fun midiOutGetNumDevs() : LibC::UInt32
fun midiStreamClose(hms : HMIDISTRM) : LibC::UInt32
fun midiStreamProperty(hms : HMIDISTRM, lppropdata : LibC::Byte*, dwProperty : LibC::UInt32) : LibC::UInt32
fun midiStreamPosition(hms : HMIDISTRM, lpmmt : MMTIME*, cbmmt : LibC::UInt32) : LibC::UInt32
fun midiStreamOut(hms : HMIDISTRM, pmh : MIDIHDR*, cbmh : LibC::UInt32) : LibC::UInt32
fun midiStreamPause(hms : HMIDISTRM) : LibC::UInt32
fun midiStreamRestart(hms : HMIDISTRM) : LibC::UInt32
fun midiStreamStop(hms : HMIDISTRM) : LibC::UInt32
fun midiConnect(hmi : HMIDI, hmo : HMIDIOUT, pReserved : LibC::Void*) : LibC::UInt32
fun midiDisconnect(hmi : HMIDI, hmo : HMIDIOUT, pReserved : LibC::Void*) : LibC::UInt32
fun midiOutGetDevCapsA(uDeviceID : LibC::UIint*, pmoc : MIDIOUTCAPSA*, cbmoc : LibC::UInt32) : LibC::UInt32
fun midiOutGetDevCapsW(uDeviceID : LibC::UIint*, pmoc : MIDIOUTCAPSW*, cbmoc : LibC::UInt32) : LibC::UInt32
fun midiOutGetVolume(hmo : HMIDIOUT, pdwVolume : LibC::UInt32*) : LibC::UInt32
fun midiOutSetVolume(hmo : HMIDIOUT, dwVolume : LibC::UInt32) : LibC::UInt32
fun midiOutOpen(phmo : HMIDIOUT*, uDeviceID : LibC::UInt32, dwCallback : LibC::UIint*, dwInstance : LibC::UIint*, fdwOpen : MIDI_WAVE_OPEN_TYPE) : LibC::UInt32
fun midiOutClose(hmo : HMIDIOUT) : LibC::UInt32
fun midiOutPrepareHeader(hmo : HMIDIOUT, pmh : MIDIHDR*, cbmh : LibC::UInt32) : LibC::UInt32
fun midiOutUnprepareHeader(hmo : HMIDIOUT, pmh : MIDIHDR*, cbmh : LibC::UInt32) : LibC::UInt32
fun midiOutShortMsg(hmo : HMIDIOUT, dwMsg : LibC::UInt32) : LibC::UInt32
fun midiOutLongMsg(hmo : HMIDIOUT, pmh : MIDIHDR*, cbmh : LibC::UInt32) : LibC::UInt32
fun midiOutReset(hmo : HMIDIOUT) : LibC::UInt32
fun midiOutGetID(hmo : HMIDIOUT, puDeviceID : LibC::UInt32*) : LibC::UInt32
fun midiOutMessage(hmo : HMIDIOUT, uMsg : LibC::UInt32, dw1 : LibC::UIint*, dw2 : LibC::UIint*) : LibC::UInt32
fun midiInGetNumDevs() : LibC::UInt32
fun midiInGetDevCapsA(uDeviceID : LibC::UIint*, pmic : MIDIINCAPSA*, cbmic : LibC::UInt32) : LibC::UInt32
fun midiInGetDevCapsW(uDeviceID : LibC::UIint*, pmic : MIDIINCAPSW*, cbmic : LibC::UInt32) : LibC::UInt32
fun midiInOpen(phmi : HMIDIIN*, uDeviceID : LibC::UInt32, dwCallback : LibC::UIint*, dwInstance : LibC::UIint*, fdwOpen : MIDI_WAVE_OPEN_TYPE) : LibC::UInt32
fun midiInClose(hmi : HMIDIIN) : LibC::UInt32
fun midiInPrepareHeader(hmi : HMIDIIN, pmh : MIDIHDR*, cbmh : LibC::UInt32) : LibC::UInt32
fun midiInUnprepareHeader(hmi : HMIDIIN, pmh : MIDIHDR*, cbmh : LibC::UInt32) : LibC::UInt32
fun midiInAddBuffer(hmi : HMIDIIN, pmh : MIDIHDR*, cbmh : LibC::UInt32) : LibC::UInt32
fun midiInStart(hmi : HMIDIIN) : LibC::UInt32
fun midiInStop(hmi : HMIDIIN) : LibC::UInt32
fun midiInReset(hmi : HMIDIIN) : LibC::UInt32
fun midiInGetID(hmi : HMIDIIN, puDeviceID : LibC::UInt32*) : LibC::UInt32
fun midiInMessage(hmi : HMIDIIN, uMsg : LibC::UInt32, dw1 : LibC::UIint*, dw2 : LibC::UIint*) : LibC::UInt32
fun auxGetNumDevs() : LibC::UInt32
fun auxGetDevCapsA(uDeviceID : LibC::UIint*, pac : AUXCAPSA*, cbac : LibC::UInt32) : LibC::UInt32
fun auxGetDevCapsW(uDeviceID : LibC::UIint*, pac : AUXCAPSW*, cbac : LibC::UInt32) : LibC::UInt32
fun auxSetVolume(uDeviceID : LibC::UInt32, dwVolume : LibC::UInt32) : LibC::UInt32
fun auxGetVolume(uDeviceID : LibC::UInt32, pdwVolume : LibC::UInt32*) : LibC::UInt32
fun auxOutMessage(uDeviceID : LibC::UInt32, uMsg : LibC::UInt32, dw1 : LibC::UIint*, dw2 : LibC::UIint*) : LibC::UInt32
fun mixerGetNumDevs() : LibC::UInt32
fun mixerGetDevCapsA(uMxId : LibC::UIint*, pmxcaps : MIXERCAPSA*, cbmxcaps : LibC::UInt32) : LibC::UInt32
fun mixerGetDevCapsW(uMxId : LibC::UIint*, pmxcaps : MIXERCAPSW*, cbmxcaps : LibC::UInt32) : LibC::UInt32
fun mixerOpen(phmx : LibC::Int**, uMxId : LibC::UInt32, dwCallback : LibC::UIint*, dwInstance : LibC::UIint*, fdwOpen : LibC::UInt32) : LibC::UInt32
fun mixerClose(hmx : HMIXER) : LibC::UInt32
fun mixerMessage(hmx : HMIXER, uMsg : LibC::UInt32, dwParam1 : LibC::UIint*, dwParam2 : LibC::UIint*) : LibC::UInt32
fun mixerGetLineInfoA(hmxobj : HMIXEROBJ, pmxl : MIXERLINEA*, fdwInfo : LibC::UInt32) : LibC::UInt32
fun mixerGetLineInfoW(hmxobj : HMIXEROBJ, pmxl : MIXERLINEW*, fdwInfo : LibC::UInt32) : LibC::UInt32
fun mixerGetID(hmxobj : HMIXEROBJ, puMxId : LibC::UInt32*, fdwId : LibC::UInt32) : LibC::UInt32
fun mixerGetLineControlsA(hmxobj : HMIXEROBJ, pmxlc : MIXERLINECONTROLSA*, fdwControls : LibC::UInt32) : LibC::UInt32
fun mixerGetLineControlsW(hmxobj : HMIXEROBJ, pmxlc : MIXERLINECONTROLSW*, fdwControls : LibC::UInt32) : LibC::UInt32
fun mixerGetControlDetailsA(hmxobj : HMIXEROBJ, pmxcd : MIXERCONTROLDETAILS*, fdwDetails : LibC::UInt32) : LibC::UInt32
fun mixerGetControlDetailsW(hmxobj : HMIXEROBJ, pmxcd : MIXERCONTROLDETAILS*, fdwDetails : LibC::UInt32) : LibC::UInt32
fun mixerSetControlDetails(hmxobj : HMIXEROBJ, pmxcd : MIXERCONTROLDETAILS*, fdwDetails : LibC::UInt32) : LibC::UInt32
fun activateAudioInterfaceAsync(deviceInterfacePath : PWSTR, riid : LibC::Guid*, activationParams : PROPVARIANT*, completionHandler : IActivateAudioInterfaceCompletionHandler, activationOperation : IActivateAudioInterfaceAsyncOperation*) : HRESULT
fun createRenderAudioStateMonitor(audioStateMonitor : IAudioStateMonitor*) : HRESULT
fun createRenderAudioStateMonitorForCategory(category : AUDIO_STREAM_CATEGORY, audioStateMonitor : IAudioStateMonitor*) : HRESULT
fun createRenderAudioStateMonitorForCategoryAndDeviceRole(category : AUDIO_STREAM_CATEGORY, role : ERole, audioStateMonitor : IAudioStateMonitor*) : HRESULT
fun createRenderAudioStateMonitorForCategoryAndDeviceId(category : AUDIO_STREAM_CATEGORY, deviceId : PWSTR, audioStateMonitor : IAudioStateMonitor*) : HRESULT
fun createCaptureAudioStateMonitor(audioStateMonitor : IAudioStateMonitor*) : HRESULT
fun createCaptureAudioStateMonitorForCategory(category : AUDIO_STREAM_CATEGORY, audioStateMonitor : IAudioStateMonitor*) : HRESULT
fun createCaptureAudioStateMonitorForCategoryAndDeviceRole(category : AUDIO_STREAM_CATEGORY, role : ERole, audioStateMonitor : IAudioStateMonitor*) : HRESULT
fun createCaptureAudioStateMonitorForCategoryAndDeviceId(category : AUDIO_STREAM_CATEGORY, deviceId : PWSTR, audioStateMonitor : IAudioStateMonitor*) : HRESULT
fun acmGetVersion() : LibC::UInt32
fun acmMetrics(hao : HACMOBJ, uMetric : LibC::UInt32, pMetric : LibC::Void*) : LibC::UInt32
fun acmDriverEnum(fnCallback : ACMDRIVERENUMCB, dwInstance : LibC::UIint*, fdwEnum : LibC::UInt32) : LibC::UInt32
fun acmDriverID(hao : HACMOBJ, phadid : LibC::Int**, fdwDriverID : LibC::UInt32) : LibC::UInt32
fun acmDriverAddA(phadid : LibC::Int**, hinstModule : HINSTANCE, lParam : LPARAM, dwPriority : LibC::UInt32, fdwAdd : LibC::UInt32) : LibC::UInt32
fun acmDriverAddW(phadid : LibC::Int**, hinstModule : HINSTANCE, lParam : LPARAM, dwPriority : LibC::UInt32, fdwAdd : LibC::UInt32) : LibC::UInt32
fun acmDriverRemove(hadid : HACMDRIVERID, fdwRemove : LibC::UInt32) : LibC::UInt32
fun acmDriverOpen(phad : LibC::Int**, hadid : HACMDRIVERID, fdwOpen : LibC::UInt32) : LibC::UInt32
fun acmDriverClose(had : HACMDRIVER, fdwClose : LibC::UInt32) : LibC::UInt32
fun acmDriverMessage(had : HACMDRIVER, uMsg : LibC::UInt32, lParam1 : LPARAM, lParam2 : LPARAM) : LRESULT
fun acmDriverPriority(hadid : HACMDRIVERID, dwPriority : LibC::UInt32, fdwPriority : LibC::UInt32) : LibC::UInt32
fun acmDriverDetailsA(hadid : HACMDRIVERID, padd : ACMDRIVERDETAILSA*, fdwDetails : LibC::UInt32) : LibC::UInt32
fun acmDriverDetailsW(hadid : HACMDRIVERID, padd : ACMDRIVERDETAILSW*, fdwDetails : LibC::UInt32) : LibC::UInt32
fun acmFormatTagDetailsA(had : HACMDRIVER, paftd : ACMFORMATTAGDETAILSA*, fdwDetails : LibC::UInt32) : LibC::UInt32
fun acmFormatTagDetailsW(had : HACMDRIVER, paftd : ACMFORMATTAGDETAILSW*, fdwDetails : LibC::UInt32) : LibC::UInt32
fun acmFormatTagEnumA(had : HACMDRIVER, paftd : ACMFORMATTAGDETAILSA*, fnCallback : ACMFORMATTAGENUMCBA, dwInstance : LibC::UIint*, fdwEnum : LibC::UInt32) : LibC::UInt32
fun acmFormatTagEnumW(had : HACMDRIVER, paftd : ACMFORMATTAGDETAILSW*, fnCallback : ACMFORMATTAGENUMCBW, dwInstance : LibC::UIint*, fdwEnum : LibC::UInt32) : LibC::UInt32
fun acmFormatDetailsA(had : HACMDRIVER, pafd : ACMFORMATDETAILSA*, fdwDetails : LibC::UInt32) : LibC::UInt32
fun acmFormatDetailsW(had : HACMDRIVER, pafd : TACMFORMATDETAILSW*, fdwDetails : LibC::UInt32) : LibC::UInt32
fun acmFormatEnumA(had : HACMDRIVER, pafd : ACMFORMATDETAILSA*, fnCallback : ACMFORMATENUMCBA, dwInstance : LibC::UIint*, fdwEnum : LibC::UInt32) : LibC::UInt32
fun acmFormatEnumW(had : HACMDRIVER, pafd : TACMFORMATDETAILSW*, fnCallback : ACMFORMATENUMCBW, dwInstance : LibC::UIint*, fdwEnum : LibC::UInt32) : LibC::UInt32
fun acmFormatSuggest(had : HACMDRIVER, pwfxSrc : WAVEFORMATEX*, pwfxDst : WAVEFORMATEX*, cbwfxDst : LibC::UInt32, fdwSuggest : LibC::UInt32) : LibC::UInt32
fun acmFormatChooseA(pafmtc : ACMFORMATCHOOSEA*) : LibC::UInt32
fun acmFormatChooseW(pafmtc : ACMFORMATCHOOSEW*) : LibC::UInt32
fun acmFilterTagDetailsA(had : HACMDRIVER, paftd : ACMFILTERTAGDETAILSA*, fdwDetails : LibC::UInt32) : LibC::UInt32
fun acmFilterTagDetailsW(had : HACMDRIVER, paftd : ACMFILTERTAGDETAILSW*, fdwDetails : LibC::UInt32) : LibC::UInt32
fun acmFilterTagEnumA(had : HACMDRIVER, paftd : ACMFILTERTAGDETAILSA*, fnCallback : ACMFILTERTAGENUMCBA, dwInstance : LibC::UIint*, fdwEnum : LibC::UInt32) : LibC::UInt32
fun acmFilterTagEnumW(had : HACMDRIVER, paftd : ACMFILTERTAGDETAILSW*, fnCallback : ACMFILTERTAGENUMCBW, dwInstance : LibC::UIint*, fdwEnum : LibC::UInt32) : LibC::UInt32
fun acmFilterDetailsA(had : HACMDRIVER, pafd : ACMFILTERDETAILSA*, fdwDetails : LibC::UInt32) : LibC::UInt32
fun acmFilterDetailsW(had : HACMDRIVER, pafd : ACMFILTERDETAILSW*, fdwDetails : LibC::UInt32) : LibC::UInt32
fun acmFilterEnumA(had : HACMDRIVER, pafd : ACMFILTERDETAILSA*, fnCallback : ACMFILTERENUMCBA, dwInstance : LibC::UIint*, fdwEnum : LibC::UInt32) : LibC::UInt32
fun acmFilterEnumW(had : HACMDRIVER, pafd : ACMFILTERDETAILSW*, fnCallback : ACMFILTERENUMCBW, dwInstance : LibC::UIint*, fdwEnum : LibC::UInt32) : LibC::UInt32
fun acmFilterChooseA(pafltrc : ACMFILTERCHOOSEA*) : LibC::UInt32
fun acmFilterChooseW(pafltrc : ACMFILTERCHOOSEW*) : LibC::UInt32
fun acmStreamOpen(phas : LibC::Int**, had : HACMDRIVER, pwfxSrc : WAVEFORMATEX*, pwfxDst : WAVEFORMATEX*, pwfltr : WAVEFILTER*, dwCallback : LibC::UIint*, dwInstance : LibC::UIint*, fdwOpen : LibC::UInt32) : LibC::UInt32
fun acmStreamClose(has : HACMSTREAM, fdwClose : LibC::UInt32) : LibC::UInt32
fun acmStreamSize(has : HACMSTREAM, cbInput : LibC::UInt32, pdwOutputBytes : LibC::UInt32*, fdwSize : LibC::UInt32) : LibC::UInt32
fun acmStreamReset(has : HACMSTREAM, fdwReset : LibC::UInt32) : LibC::UInt32
fun acmStreamMessage(has : HACMSTREAM, uMsg : LibC::UInt32, lParam1 : LPARAM, lParam2 : LPARAM) : LibC::UInt32
fun acmStreamConvert(has : HACMSTREAM, pash : ACMSTREAMHEADER*, fdwConvert : LibC::UInt32) : LibC::UInt32
fun acmStreamPrepareHeader(has : HACMSTREAM, pash : ACMSTREAMHEADER*, fdwPrepare : LibC::UInt32) : LibC::UInt32
fun acmStreamUnprepareHeader(has : HACMSTREAM, pash : ACMSTREAMHEADER*, fdwUnprepare : LibC::UInt32) : LibC::UInt32

  end
