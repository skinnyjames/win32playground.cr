  @[Link("Security.Cryptography")]
  lib LibSecurityCryptography
    CERT_COMPARE_SHIFT = 16
BCRYPT_OBJECT_ALIGNMENT = 16
KDF_HASH_ALGORITHM = 0
KDF_SECRET_PREPEND = 1
KDF_SECRET_APPEND = 2
KDF_HMAC_KEY = 3
KDF_TLS_PRF_LABEL = 4
KDF_TLS_PRF_SEED = 5
KDF_SECRET_HANDLE = 6
KDF_TLS_PRF_PROTOCOL = 7
KDF_ALGORITHMID = 8
KDF_PARTYUINFO = 9
KDF_PARTYVINFO = 10
KDF_SUPPPUBINFO = 11
KDF_SUPPPRIVINFO = 12
KDF_LABEL = 13
KDF_CONTEXT = 14
KDF_SALT = 15
KDF_ITERATION_COUNT = 16
KDF_GENERIC_PARAMETER = 17
KDF_KEYBITLENGTH = 18
KDF_HKDF_SALT = 19
KDF_HKDF_INFO = 20
KDF_USE_SECRET_AS_HMAC_KEY_FLAG = 1
BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION = 1
BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG = 1
BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG = 2
BCRYPT_SUPPORTED_PAD_ROUTER = 1
BCRYPT_SUPPORTED_PAD_PKCS1_ENC = 2
BCRYPT_SUPPORTED_PAD_PKCS1_SIG = 4
BCRYPT_SUPPORTED_PAD_OAEP = 8
BCRYPT_SUPPORTED_PAD_PSS = 16
BCRYPT_BLOCK_PADDING = 1
BCRYPT_GENERATE_IV = 32
BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID = 16
BCRYPTBUFFER_VERSION = 0
BCRYPT_ECDH_PUBLIC_P256_MAGIC = 827016005
BCRYPT_ECDH_PRIVATE_P256_MAGIC = 843793221
BCRYPT_ECDH_PUBLIC_P384_MAGIC = 860570437
BCRYPT_ECDH_PRIVATE_P384_MAGIC = 877347653
BCRYPT_ECDH_PUBLIC_P521_MAGIC = 894124869
BCRYPT_ECDH_PRIVATE_P521_MAGIC = 910902085
BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC = 1347109701
BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC = 1447772997
BCRYPT_ECDSA_PUBLIC_P256_MAGIC = 827540293
BCRYPT_ECDSA_PRIVATE_P256_MAGIC = 844317509
BCRYPT_ECDSA_PUBLIC_P384_MAGIC = 861094725
BCRYPT_ECDSA_PRIVATE_P384_MAGIC = 877871941
BCRYPT_ECDSA_PUBLIC_P521_MAGIC = 894649157
BCRYPT_ECDSA_PRIVATE_P521_MAGIC = 911426373
BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC = 1346650949
BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC = 1447314245
BCRYPT_ECC_FULLKEY_BLOB_V1 = 1
BCRYPT_DH_PARAMETERS_MAGIC = 1297107012
BCRYPT_DSA_PUBLIC_MAGIC_V2 = 843206724
BCRYPT_DSA_PRIVATE_MAGIC_V2 = 844517444
BCRYPT_KEY_DATA_BLOB_MAGIC = 1296188491
BCRYPT_KEY_DATA_BLOB_VERSION1 = 1
BCRYPT_DSA_PARAMETERS_MAGIC = 1297109828
BCRYPT_DSA_PARAMETERS_MAGIC_V2 = 843927620
BCRYPT_ECC_PARAMETERS_MAGIC = 1346585413
BCRYPT_KEY_DERIVATION_INTERFACE = 7
BCRYPT_MD2_ALG_HANDLE = 1
BCRYPT_MD4_ALG_HANDLE = 17
BCRYPT_MD5_ALG_HANDLE = 33
BCRYPT_SHA1_ALG_HANDLE = 49
BCRYPT_SHA256_ALG_HANDLE = 65
BCRYPT_SHA384_ALG_HANDLE = 81
BCRYPT_SHA512_ALG_HANDLE = 97
BCRYPT_RC4_ALG_HANDLE = 113
BCRYPT_RNG_ALG_HANDLE = 129
BCRYPT_HMAC_MD5_ALG_HANDLE = 145
BCRYPT_HMAC_SHA1_ALG_HANDLE = 161
BCRYPT_HMAC_SHA256_ALG_HANDLE = 177
BCRYPT_HMAC_SHA384_ALG_HANDLE = 193
BCRYPT_HMAC_SHA512_ALG_HANDLE = 209
BCRYPT_RSA_ALG_HANDLE = 225
BCRYPT_ECDSA_ALG_HANDLE = 241
BCRYPT_AES_CMAC_ALG_HANDLE = 257
BCRYPT_AES_GMAC_ALG_HANDLE = 273
BCRYPT_HMAC_MD2_ALG_HANDLE = 289
BCRYPT_HMAC_MD4_ALG_HANDLE = 305
BCRYPT_3DES_CBC_ALG_HANDLE = 321
BCRYPT_3DES_ECB_ALG_HANDLE = 337
BCRYPT_3DES_CFB_ALG_HANDLE = 353
BCRYPT_3DES_112_CBC_ALG_HANDLE = 369
BCRYPT_3DES_112_ECB_ALG_HANDLE = 385
BCRYPT_3DES_112_CFB_ALG_HANDLE = 401
BCRYPT_AES_CBC_ALG_HANDLE = 417
BCRYPT_AES_ECB_ALG_HANDLE = 433
BCRYPT_AES_CFB_ALG_HANDLE = 449
BCRYPT_AES_CCM_ALG_HANDLE = 465
BCRYPT_AES_GCM_ALG_HANDLE = 481
BCRYPT_DES_CBC_ALG_HANDLE = 497
BCRYPT_DES_ECB_ALG_HANDLE = 513
BCRYPT_DES_CFB_ALG_HANDLE = 529
BCRYPT_DESX_CBC_ALG_HANDLE = 545
BCRYPT_DESX_ECB_ALG_HANDLE = 561
BCRYPT_DESX_CFB_ALG_HANDLE = 577
BCRYPT_RC2_CBC_ALG_HANDLE = 593
BCRYPT_RC2_ECB_ALG_HANDLE = 609
BCRYPT_RC2_CFB_ALG_HANDLE = 625
BCRYPT_DH_ALG_HANDLE = 641
BCRYPT_ECDH_ALG_HANDLE = 657
BCRYPT_ECDH_P256_ALG_HANDLE = 673
BCRYPT_ECDH_P384_ALG_HANDLE = 689
BCRYPT_ECDH_P521_ALG_HANDLE = 705
BCRYPT_DSA_ALG_HANDLE = 721
BCRYPT_ECDSA_P256_ALG_HANDLE = 737
BCRYPT_ECDSA_P384_ALG_HANDLE = 753
BCRYPT_ECDSA_P521_ALG_HANDLE = 769
BCRYPT_RSA_SIGN_ALG_HANDLE = 785
BCRYPT_CAPI_KDF_ALG_HANDLE = 801
BCRYPT_PBKDF2_ALG_HANDLE = 817
BCRYPT_SP800108_CTR_HMAC_ALG_HANDLE = 833
BCRYPT_SP80056A_CONCAT_ALG_HANDLE = 849
BCRYPT_TLS1_1_KDF_ALG_HANDLE = 865
BCRYPT_TLS1_2_KDF_ALG_HANDLE = 881
BCRYPT_XTS_AES_ALG_HANDLE = 897
BCRYPT_HKDF_ALG_HANDLE = 913
BCRYPT_CHACHA20_POLY1305_ALG_HANDLE = 929
BCRYPT_CAPI_AES_FLAG = 16
BCRYPT_MULTI_FLAG = 64
BCRYPT_TLS_CBC_HMAC_VERIFY_FLAG = 4
BCRYPT_BUFFERS_LOCKED_FLAG = 64
BCRYPT_EXTENDED_KEYSIZE = 128
BCRYPT_ENABLE_INCOMPATIBLE_FIPS_CHECKS = 256
BCRYPT_KEY_DERIVATION_OPERATION = 64
BCRYPT_PUBLIC_KEY_FLAG = 1
BCRYPT_PRIVATE_KEY_FLAG = 2
BCRYPT_NO_KEY_VALIDATION = 8
BCRYPT_KEY_VALIDATION_RANGE = 16
BCRYPT_KEY_VALIDATION_RANGE_AND_ORDER = 24
BCRYPT_KEY_VALIDATION_REGENERATE = 32
BCRYPT_RNG_USE_ENTROPY_IN_BUFFER = 1
BCRYPT_USE_SYSTEM_PREFERRED_RNG = 2
BCRYPT_HASH_INTERFACE_MAJORVERSION_2 = 2
CRYPT_OVERWRITE = 1
CRYPT_PRIORITY_TOP = 0
CRYPT_PRIORITY_BOTTOM = 4294967295
CRYPT_XML_BLOB_MAX = 2147483640
CRYPT_XML_ID_MAX = 256
CRYPT_XML_SIGNATURES_MAX = 16
CRYPT_XML_TRANSFORM_MAX = 16
CRYPT_XML_SIGNATURE_VALUE_MAX = 2048
CRYPT_XML_DIGEST_VALUE_MAX = 128
CRYPT_XML_OBJECTS_MAX = 256
CRYPT_XML_REFERENCES_MAX = 32760
CRYPT_XML_E_BASE = -2146885376
CRYPT_XML_E_LARGE = -2146885375
CRYPT_XML_E_TOO_MANY_TRANSFORMS = -2146885374
CRYPT_XML_E_ENCODING = -2146885373
CRYPT_XML_E_ALGORITHM = -2146885372
CRYPT_XML_E_TRANSFORM = -2146885371
CRYPT_XML_E_HANDLE = -2146885370
CRYPT_XML_E_OPERATION = -2146885369
CRYPT_XML_E_UNRESOLVED_REFERENCE = -2146885368
CRYPT_XML_E_INVALID_DIGEST = -2146885367
CRYPT_XML_E_INVALID_SIGNATURE = -2146885366
CRYPT_XML_E_HASH_FAILED = -2146885365
CRYPT_XML_E_SIGN_FAILED = -2146885364
CRYPT_XML_E_VERIFY_FAILED = -2146885363
CRYPT_XML_E_TOO_MANY_SIGNATURES = -2146885362
CRYPT_XML_E_INVALID_KEYVALUE = -2146885361
CRYPT_XML_E_UNEXPECTED_XML = -2146885360
CRYPT_XML_E_SIGNER = -2146885359
CRYPT_XML_E_NON_UNIQUE_ID = -2146885358
CRYPT_XML_E_LAST = -2146885358
CRYPT_XML_FLAG_ALWAYS_RETURN_ENCODED_OBJECT = 1073741824
CRYPT_XML_FLAG_ENFORCE_ID_NCNAME_FORMAT = 536870912
CRYPT_XML_FLAG_ENFORCE_ID_NAME_FORMAT = 134217728
CRYPT_XML_FLAG_ECDSA_DSIG11 = 67108864
CRYPT_XML_STATUS_NO_ERROR = 0
CRYPT_XML_FLAG_ADD_OBJECT_CREATE_COPY = 1
CRYPT_XML_FLAG_CREATE_REFERENCE_AS_OBJECT = 1
CRYPT_XML_DIGEST_REFERENCE_DATA_TRANSFORMED = 1
CRYPT_XML_GROUP_ID_HASH = 1
CRYPT_XML_GROUP_ID_SIGN = 2
CRYPT_XML_ALGORITHM_INFO_FIND_BY_URI = 1
CRYPT_XML_ALGORITHM_INFO_FIND_BY_NAME = 2
CRYPT_XML_ALGORITHM_INFO_FIND_BY_CNG_ALGID = 3
CRYPT_XML_ALGORITHM_INFO_FIND_BY_CNG_SIGN_ALGID = 4
CRYPTPROTECT_PROMPT_ON_UNPROTECT = 1
CRYPTPROTECT_PROMPT_ON_PROTECT = 2
CRYPTPROTECT_PROMPT_RESERVED = 4
CRYPTPROTECT_PROMPT_STRONG = 8
CRYPTPROTECT_PROMPT_REQUIRE_STRONG = 16
CRYPTPROTECT_UI_FORBIDDEN = 1
CRYPTPROTECT_LOCAL_MACHINE = 4
CRYPTPROTECT_CRED_SYNC = 8
CRYPTPROTECT_AUDIT = 16
CRYPTPROTECT_NO_RECOVERY = 32
CRYPTPROTECT_VERIFY_PROTECTION = 64
CRYPTPROTECT_CRED_REGENERATE = 128
CRYPTPROTECT_FIRST_RESERVED_FLAGVAL = 268435455
CRYPTPROTECT_LAST_RESERVED_FLAGVAL = 4294967295
CRYPTPROTECTMEMORY_BLOCK_SIZE = 16
CRYPTPROTECTMEMORY_SAME_PROCESS = 0
CRYPTPROTECTMEMORY_CROSS_PROCESS = 1
CRYPTPROTECTMEMORY_SAME_LOGON = 2
NCRYPT_MAX_KEY_NAME_LENGTH = 512
NCRYPT_MAX_ALG_ID_LENGTH = 512
NCRYPT_KEY_DERIVATION_INTERFACE = 7
NCRYPT_KEY_PROTECTION_INTERFACE = 65540
NCRYPTBUFFER_VERSION = 0
NCRYPTBUFFER_EMPTY = 0
NCRYPTBUFFER_DATA = 1
NCRYPTBUFFER_PROTECTION_DESCRIPTOR_STRING = 3
NCRYPTBUFFER_PROTECTION_FLAGS = 4
NCRYPTBUFFER_SSL_CLIENT_RANDOM = 20
NCRYPTBUFFER_SSL_SERVER_RANDOM = 21
NCRYPTBUFFER_SSL_HIGHEST_VERSION = 22
NCRYPTBUFFER_SSL_CLEAR_KEY = 23
NCRYPTBUFFER_SSL_KEY_ARG_DATA = 24
NCRYPTBUFFER_SSL_SESSION_HASH = 25
NCRYPTBUFFER_PKCS_OID = 40
NCRYPTBUFFER_PKCS_ALG_OID = 41
NCRYPTBUFFER_PKCS_ALG_PARAM = 42
NCRYPTBUFFER_PKCS_ALG_ID = 43
NCRYPTBUFFER_PKCS_ATTRS = 44
NCRYPTBUFFER_PKCS_KEY_NAME = 45
NCRYPTBUFFER_PKCS_SECRET = 46
NCRYPTBUFFER_CERT_BLOB = 47
NCRYPTBUFFER_CLAIM_IDBINDING_NONCE = 48
NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE = 49
NCRYPTBUFFER_KEY_PROPERTY_FLAGS = 50
NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB = 51
NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE = 52
NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED = 53
NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = 54
NCRYPTBUFFER_ECC_CURVE_NAME = 60
NCRYPTBUFFER_ECC_PARAMETERS = 61
NCRYPTBUFFER_TPM_SEAL_PASSWORD = 70
NCRYPTBUFFER_TPM_SEAL_POLICYINFO = 71
NCRYPTBUFFER_TPM_SEAL_TICKET = 72
NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION = 73
NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK = 80
NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE = 81
NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE = 82
NCRYPT_CIPHER_NO_PADDING_FLAG = 0
NCRYPT_CIPHER_BLOCK_PADDING_FLAG = 1
NCRYPT_CIPHER_OTHER_PADDING_FLAG = 2
NCRYPT_PLATFORM_ATTEST_MAGIC = 1146110288
NCRYPT_KEY_ATTEST_MAGIC = 1146110283
NCRYPT_CLAIM_AUTHORITY_ONLY = 1
NCRYPT_CLAIM_SUBJECT_ONLY = 2
NCRYPT_CLAIM_WEB_AUTH_SUBJECT_ONLY = 258
NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = 3
NCRYPT_CLAIM_VSM_KEY_ATTESTATION_STATEMENT = 4
NCRYPT_CLAIM_UNKNOWN = 4096
NCRYPT_CLAIM_PLATFORM = 65536
NCRYPT_ISOLATED_KEY_FLAG_CREATED_IN_ISOLATION = 1
NCRYPT_ISOLATED_KEY_FLAG_IMPORT_ONLY = 2
NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0 = 0
NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_CURRENT_VERSION = 0
NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0 = 0
NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_CURRENT_VERSION = 0
NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0 = 0
NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_CURRENT_VERSION = 0
NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0 = 0
NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_CURRENT_VERSION = 0
NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0 = 0
NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_CURRENT_VERSION = 0
NCRYPT_PAD_CIPHER_FLAG = 16
NCRYPT_ATTESTATION_FLAG = 32
NCRYPT_SEALING_FLAG = 256
NCRYPT_DO_NOT_FINALIZE_FLAG = 1024
NCRYPT_EXPORT_LEGACY_FLAG = 2048
NCRYPT_IGNORE_DEVICE_STATE_FLAG = 4096
NCRYPT_TREAT_NIST_AS_GENERIC_ECC_FLAG = 8192
NCRYPT_NO_CACHED_PASSWORD = 16384
NCRYPT_PROTECT_TO_LOCAL_SYSTEM = 32768
NCRYPT_PREFER_VIRTUAL_ISOLATION_FLAG = 65536
NCRYPT_USE_VIRTUAL_ISOLATION_FLAG = 131072
NCRYPT_USE_PER_BOOT_KEY_FLAG = 262144
NCRYPT_KEY_DERIVATION_OPERATION = 64
NCRYPT_AUTHORITY_KEY_FLAG = 256
IFX_RSA_KEYGEN_VUL_NOT_AFFECTED = 0
IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_1 = 1
IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_2 = 2
NCRYPT_TPM_PSS_SALT_SIZE_UNKNOWN = 0
NCRYPT_TPM_PSS_SALT_SIZE_MAXIMUM = 1
NCRYPT_TPM_PSS_SALT_SIZE_HASHSIZE = 2
NCRYPT_TPM_PAD_PSS_IGNORE_SALT = 32
NCRYPT_TPM12_PROVIDER = 65536
NCRYPT_PCP_SIGNATURE_KEY = 1
NCRYPT_PCP_ENCRYPTION_KEY = 2
NCRYPT_PCP_STORAGE_KEY = 4
NCRYPT_PCP_IDENTITY_KEY = 8
NCRYPT_PCP_HMACVERIFICATION_KEY = 16
NCRYPT_MAX_PROPERTY_NAME = 64
NCRYPT_MAX_PROPERTY_DATA = 1048576
NCRYPT_ALLOW_EXPORT_FLAG = 1
NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = 2
NCRYPT_ALLOW_ARCHIVING_FLAG = 4
NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = 8
NCRYPT_IMPL_HARDWARE_FLAG = 1
NCRYPT_IMPL_SOFTWARE_FLAG = 2
NCRYPT_IMPL_REMOVABLE_FLAG = 8
NCRYPT_IMPL_HARDWARE_RNG_FLAG = 16
NCRYPT_IMPL_VIRTUAL_ISOLATION_FLAG = 32
NCRYPT_ALLOW_DECRYPT_FLAG = 1
NCRYPT_ALLOW_SIGNING_FLAG = 2
NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = 4
NCRYPT_ALLOW_KEY_IMPORT_FLAG = 8
NCRYPT_ALLOW_ALL_USAGES = 16777215
NCRYPT_UI_PROTECT_KEY_FLAG = 1
NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG = 2
NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG = 4
NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = 8
NCRYPT_PIN_CACHE_DISABLE_DPL_FLAG = 1
NCRYPT_PIN_CACHE_REQUIRE_GESTURE_FLAG = 1
NCRYPT_PIN_CACHE_APPLICATION_TICKET_BYTE_LENGTH = 90
NCRYPT_PIN_CACHE_CLEAR_FOR_CALLING_PROCESS_OPTION = 1
NCRYPT_KEY_ACCESS_POLICY_VERSION = 1
NCRYPT_ALLOW_SILENT_KEY_ACCESS = 1
NCRYPT_CIPHER_KEY_BLOB_MAGIC = 1380470851
NCRYPT_KDF_KEY_BLOB_MAGIC = 826688587
NCRYPT_PROTECTED_KEY_BLOB_MAGIC = 1263817296
NCRYPT_TPM_LOADABLE_KEY_BLOB_MAGIC = 1297371211
NCRYPT_NAMED_DESCRIPTOR_FLAG = 1
NCRYPT_PROTECTION_INFO_TYPE_DESCRIPTOR_STRING = 1
ALG_CLASS_ANY = 0
ALG_CLASS_SIGNATURE = 8192
ALG_CLASS_MSG_ENCRYPT = 16384
ALG_CLASS_DATA_ENCRYPT = 24576
ALG_CLASS_HASH = 32768
ALG_CLASS_KEY_EXCHANGE = 40960
ALG_CLASS_ALL = 57344
ALG_TYPE_ANY = 0
ALG_TYPE_DSS = 512
ALG_TYPE_RSA = 1024
ALG_TYPE_BLOCK = 1536
ALG_TYPE_STREAM = 2048
ALG_TYPE_DH = 2560
ALG_TYPE_SECURECHANNEL = 3072
ALG_TYPE_ECDH = 3584
ALG_TYPE_THIRDPARTY = 4096
ALG_SID_ANY = 0
ALG_SID_THIRDPARTY_ANY = 0
ALG_SID_RSA_ANY = 0
ALG_SID_RSA_PKCS = 1
ALG_SID_RSA_MSATWORK = 2
ALG_SID_RSA_ENTRUST = 3
ALG_SID_RSA_PGP = 4
ALG_SID_DSS_ANY = 0
ALG_SID_DSS_PKCS = 1
ALG_SID_DSS_DMS = 2
ALG_SID_ECDSA = 3
ALG_SID_DES = 1
ALG_SID_3DES = 3
ALG_SID_DESX = 4
ALG_SID_IDEA = 5
ALG_SID_CAST = 6
ALG_SID_SAFERSK64 = 7
ALG_SID_SAFERSK128 = 8
ALG_SID_3DES_112 = 9
ALG_SID_CYLINK_MEK = 12
ALG_SID_RC5 = 13
ALG_SID_AES_128 = 14
ALG_SID_AES_192 = 15
ALG_SID_AES_256 = 16
ALG_SID_AES = 17
ALG_SID_SKIPJACK = 10
ALG_SID_TEK = 11
CRYPT_MODE_CBCI = 6
CRYPT_MODE_CFBP = 7
CRYPT_MODE_OFBP = 8
CRYPT_MODE_CBCOFM = 9
CRYPT_MODE_CBCOFMI = 10
ALG_SID_RC2 = 2
ALG_SID_RC4 = 1
ALG_SID_SEAL = 2
ALG_SID_DH_SANDF = 1
ALG_SID_DH_EPHEM = 2
ALG_SID_AGREED_KEY_ANY = 3
ALG_SID_KEA = 4
ALG_SID_ECDH = 5
ALG_SID_ECDH_EPHEM = 6
ALG_SID_MD2 = 1
ALG_SID_MD4 = 2
ALG_SID_MD5 = 3
ALG_SID_SHA = 4
ALG_SID_SHA1 = 4
ALG_SID_MAC = 5
ALG_SID_RIPEMD = 6
ALG_SID_RIPEMD160 = 7
ALG_SID_SSL3SHAMD5 = 8
ALG_SID_HMAC = 9
ALG_SID_TLS1PRF = 10
ALG_SID_HASH_REPLACE_OWF = 11
ALG_SID_SHA_256 = 12
ALG_SID_SHA_384 = 13
ALG_SID_SHA_512 = 14
ALG_SID_SSL3_MASTER = 1
ALG_SID_SCHANNEL_MASTER_HASH = 2
ALG_SID_SCHANNEL_MAC_KEY = 3
ALG_SID_PCT1_MASTER = 4
ALG_SID_SSL2_MASTER = 5
ALG_SID_TLS1_MASTER = 6
ALG_SID_SCHANNEL_ENC_KEY = 7
ALG_SID_ECMQV = 1
ALG_SID_EXAMPLE = 80
SIGNATURE_RESOURCE_NUMBER = 666
CRYPT_VERIFYCONTEXT = 4026531840
CRYPT_NEWKEYSET = 8
CRYPT_DELETEKEYSET = 16
CRYPT_SILENT = 64
CRYPT_DEFAULT_CONTAINER_OPTIONAL = 128
CRYPT_UPDATE_KEY = 8
CRYPT_USER_PROTECTED_STRONG = 1048576
RSA1024BIT_KEY = 67108864
CRYPT_SERVER = 1024
KEY_LENGTH_MASK = 4294901760
CRYPT_DECRYPT_RSA_NO_PADDING_CHECK = 32
CRYPT_SECRETDIGEST = 1
CRYPT_OWF_REPL_LM_HASH = 1
CRYPT_LITTLE_ENDIAN = 1
CRYPT_NOHASHOID = 1
CRYPT_TYPE2_FORMAT = 2
CRYPT_X931_FORMAT = 4
CRYPT_MACHINE_DEFAULT = 1
CRYPT_USER_DEFAULT = 2
CRYPT_DELETE_DEFAULT = 4
SIMPLEBLOB = 1
PUBLICKEYBLOB = 6
PRIVATEKEYBLOB = 7
PLAINTEXTKEYBLOB = 8
OPAQUEKEYBLOB = 9
PUBLICKEYBLOBEX = 10
SYMMETRICWRAPKEYBLOB = 11
KEYSTATEBLOB = 12
CRYPT_USERDATA = 1
KP_IV = 1
KP_PADDING = 3
KP_MODE = 4
KP_MODE_BITS = 5
KP_P = 11
KP_G = 12
KP_Q = 13
KP_X = 14
KP_Y = 15
KP_RA = 16
KP_RB = 17
KP_INFO = 18
KP_EFFECTIVE_KEYLEN = 19
KP_SCHANNEL_ALG = 20
KP_CLIENT_RANDOM = 21
KP_SERVER_RANDOM = 22
KP_RP = 23
KP_PRECOMP_MD5 = 24
KP_PRECOMP_SHA = 25
KP_CLEAR_KEY = 27
KP_PUB_EX_LEN = 28
KP_PUB_EX_VAL = 29
KP_KEYVAL = 30
KP_ADMIN_PIN = 31
KP_KEYEXCHANGE_PIN = 32
KP_SIGNATURE_PIN = 33
KP_PREHASH = 34
KP_ROUNDS = 35
KP_OAEP_PARAMS = 36
KP_CMS_KEY_INFO = 37
KP_CMS_DH_KEY_INFO = 38
KP_PUB_PARAMS = 39
KP_VERIFY_PARAMS = 40
KP_HIGHEST_VERSION = 41
KP_PIN_ID = 43
KP_PIN_INFO = 44
PKCS5_PADDING = 1
RANDOM_PADDING = 2
ZERO_PADDING = 3
CRYPT_MODE_CBC = 1
CRYPT_MODE_ECB = 2
CRYPT_MODE_OFB = 3
CRYPT_MODE_CFB = 4
CRYPT_MODE_CTS = 5
CRYPT_ENCRYPT = 1
CRYPT_DECRYPT = 2
CRYPT_EXPORT = 4
CRYPT_READ = 8
CRYPT_WRITE = 16
CRYPT_MAC = 32
CRYPT_EXPORT_KEY = 64
CRYPT_IMPORT_KEY = 128
CRYPT_ARCHIVE = 256
HP_ALGID = 1
HP_HASHSIZE = 4
HP_TLS1PRF_LABEL = 6
HP_TLS1PRF_SEED = 7
CRYPT_FAILED = 0
CRYPT_SUCCEED = 1
PP_ENUMALGS = 1
PP_ENUMCONTAINERS = 2
PP_IMPTYPE = 3
PP_NAME = 4
PP_VERSION = 5
PP_CONTAINER = 6
PP_CHANGE_PASSWORD = 7
PP_CERTCHAIN = 9
PP_KEY_TYPE_SUBTYPE = 10
PP_PROVTYPE = 16
PP_KEYSTORAGE = 17
PP_APPLI_CERT = 18
PP_SYM_KEYSIZE = 19
PP_SESSION_KEYSIZE = 20
PP_ENUMALGS_EX = 22
PP_ENUMMANDROOTS = 25
PP_ENUMELECTROOTS = 26
PP_KEYSET_TYPE = 27
PP_ADMIN_PIN = 31
PP_SIG_KEYSIZE_INC = 34
PP_KEYX_KEYSIZE_INC = 35
PP_UNIQUE_CONTAINER = 36
PP_SGC_INFO = 37
PP_KEYSPEC = 39
PP_ENUMEX_SIGNING_PROT = 40
PP_CRYPT_COUNT_KEY_USE = 41
PP_SMARTCARD_GUID = 45
PP_SMARTCARD_READER_ICON = 47
CRYPT_FIRST = 1
CRYPT_NEXT = 2
CRYPT_SGC_ENUM = 4
CRYPT_IMPL_HARDWARE = 1
CRYPT_IMPL_SOFTWARE = 2
CRYPT_IMPL_MIXED = 3
CRYPT_IMPL_UNKNOWN = 4
CRYPT_IMPL_REMOVABLE = 8
CRYPT_SEC_DESCR = 1
CRYPT_PSTORE = 2
CRYPT_UI_PROMPT = 4
CRYPT_FLAG_PCT1 = 1
CRYPT_FLAG_SSL2 = 2
CRYPT_FLAG_SSL3 = 4
CRYPT_FLAG_TLS1 = 8
CRYPT_FLAG_IPSEC = 16
CRYPT_FLAG_SIGNING = 32
CRYPT_SGC = 1
CRYPT_FASTSGC = 2
PP_CONTEXT_INFO = 11
PP_DISMISS_PIN_UI_SEC = 49
PROV_RSA_FULL = 1
PROV_RSA_SIG = 2
PROV_DSS = 3
PROV_FORTEZZA = 4
PROV_MS_EXCHANGE = 5
PROV_SSL = 6
PROV_RSA_SCHANNEL = 12
PROV_DSS_DH = 13
PROV_EC_ECDSA_SIG = 14
PROV_EC_ECNRA_SIG = 15
PROV_EC_ECDSA_FULL = 16
PROV_EC_ECNRA_FULL = 17
PROV_DH_SCHANNEL = 18
PROV_SPYRUS_LYNKS = 20
PROV_RNG = 21
PROV_INTEL_SEC = 22
PROV_REPLACE_OWF = 23
PROV_RSA_AES = 24
PROV_STT_MER = 7
PROV_STT_ACQ = 8
PROV_STT_BRND = 9
PROV_STT_ROOT = 10
PROV_STT_ISS = 11
MAXUIDLEN = 64
CUR_BLOB_VERSION = 2
SCHANNEL_MAC_KEY = 0
SCHANNEL_ENC_KEY = 1
INTERNATIONAL_USAGE = 1
CERT_RDN_TYPE_MASK = 255
CERT_RDN_FLAGS_MASK = 4278190080
CERT_RDN_ENABLE_T61_UNICODE_FLAG = 2147483648
CERT_RDN_ENABLE_UTF8_UNICODE_FLAG = 536870912
CERT_RDN_FORCE_UTF8_UNICODE_FLAG = 268435456
CERT_RDN_DISABLE_CHECK_TYPE_FLAG = 1073741824
CERT_RDN_DISABLE_IE4_UTF8_FLAG = 16777216
CERT_RDN_ENABLE_PUNYCODE_FLAG = 33554432
CRYPT_ECC_PRIVATE_KEY_INFO_v1 = 1
CERT_V1 = 0
CERT_V2 = 1
CERT_V3 = 2
CERT_INFO_VERSION_FLAG = 1
CERT_INFO_SERIAL_NUMBER_FLAG = 2
CERT_INFO_SIGNATURE_ALGORITHM_FLAG = 3
CERT_INFO_ISSUER_FLAG = 4
CERT_INFO_NOT_BEFORE_FLAG = 5
CERT_INFO_NOT_AFTER_FLAG = 6
CERT_INFO_SUBJECT_FLAG = 7
CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG = 8
CERT_INFO_ISSUER_UNIQUE_ID_FLAG = 9
CERT_INFO_SUBJECT_UNIQUE_ID_FLAG = 10
CERT_INFO_EXTENSION_FLAG = 11
CRL_V1 = 0
CRL_V2 = 1
CERT_BUNDLE_CERTIFICATE = 0
CERT_BUNDLE_CRL = 1
CERT_REQUEST_V1 = 0
CERT_KEYGEN_REQUEST_V1 = 0
CTL_V1 = 0
CERT_ENCODING_TYPE_MASK = 65535
CMSG_ENCODING_TYPE_MASK = 4294901760
CRYPT_ASN_ENCODING = 1
CRYPT_NDR_ENCODING = 2
X509_NDR_ENCODING = 2
PKCS_7_NDR_ENCODING = 131072
CRYPT_FORMAT_STR_MULTI_LINE = 1
CRYPT_FORMAT_STR_NO_HEX = 16
CRYPT_FORMAT_SIMPLE = 1
CRYPT_FORMAT_X509 = 2
CRYPT_FORMAT_OID = 4
CRYPT_FORMAT_RDN_SEMICOLON = 256
CRYPT_FORMAT_RDN_CRLF = 512
CRYPT_FORMAT_RDN_UNQUOTE = 1024
CRYPT_FORMAT_RDN_REVERSE = 2048
CRYPT_FORMAT_COMMA = 4096
CRYPT_FORMAT_SEMICOLON = 256
CRYPT_FORMAT_CRLF = 512
CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 8
CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG = 268435456
CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 65536
CRYPT_ENCODE_ENABLE_UTF8PERCENT_FLAG = 262144
CRYPT_DECODE_NOCOPY_FLAG = 1
CRYPT_DECODE_TO_BE_SIGNED_FLAG = 2
CRYPT_DECODE_SHARE_OID_STRING_FLAG = 4
CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 8
CRYPT_DECODE_ALLOC_FLAG = 32768
CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG = 16777216
CRYPT_DECODE_ENABLE_PUNYCODE_FLAG = 33554432
CRYPT_DECODE_ENABLE_UTF8PERCENT_FLAG = 67108864
CRYPT_ENCODE_DECODE_NONE = 0
SITE_PIN_RULES_ALL_SUBDOMAINS_FLAG = 1
CERT_ROOT_PROGRAM_FLAG_OU = 16
CERT_ROOT_PROGRAM_FLAG_ADDRESS = 8
CERT_UNICODE_RDN_ERR_INDEX_MASK = 1023
CERT_UNICODE_RDN_ERR_INDEX_SHIFT = 22
CERT_UNICODE_ATTR_ERR_INDEX_MASK = 63
CERT_UNICODE_ATTR_ERR_INDEX_SHIFT = 16
CERT_UNICODE_VALUE_ERR_INDEX_MASK = 65535
CERT_UNICODE_VALUE_ERR_INDEX_SHIFT = 0
CERT_DIGITAL_SIGNATURE_KEY_USAGE = 128
CERT_NON_REPUDIATION_KEY_USAGE = 64
CERT_KEY_ENCIPHERMENT_KEY_USAGE = 32
CERT_DATA_ENCIPHERMENT_KEY_USAGE = 16
CERT_KEY_AGREEMENT_KEY_USAGE = 8
CERT_KEY_CERT_SIGN_KEY_USAGE = 4
CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 2
CERT_CRL_SIGN_KEY_USAGE = 2
CERT_ENCIPHER_ONLY_KEY_USAGE = 1
CERT_DECIPHER_ONLY_KEY_USAGE = 128
CERT_ALT_NAME_X400_ADDRESS = 4
CERT_ALT_NAME_EDI_PARTY_NAME = 6
CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK = 255
CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT = 16
CERT_ALT_NAME_VALUE_ERR_INDEX_MASK = 65535
CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT = 0
CERT_CA_SUBJECT_FLAG = 128
CERT_END_ENTITY_SUBJECT_FLAG = 64
CRL_REASON_PRIVILEGE_WITHDRAWN = 9
CRL_REASON_AA_COMPROMISE = 10
CRL_DIST_POINT_NO_NAME = 0
CRL_DIST_POINT_FULL_NAME = 1
CRL_DIST_POINT_ISSUER_RDN_NAME = 2
CRL_REASON_UNUSED_FLAG = 128
CRL_REASON_KEY_COMPROMISE_FLAG = 64
CRL_REASON_CA_COMPROMISE_FLAG = 32
CRL_REASON_AFFILIATION_CHANGED_FLAG = 16
CRL_REASON_SUPERSEDED_FLAG = 8
CRL_REASON_CESSATION_OF_OPERATION_FLAG = 4
CRL_REASON_CERTIFICATE_HOLD_FLAG = 2
CRL_REASON_PRIVILEGE_WITHDRAWN_FLAG = 1
CRL_REASON_AA_COMPROMISE_FLAG = 128
CRL_DIST_POINT_ERR_INDEX_MASK = 127
CRL_DIST_POINT_ERR_INDEX_SHIFT = 24
CRL_DIST_POINT_ERR_CRL_ISSUER_BIT = -2147483648
CROSS_CERT_DIST_POINT_ERR_INDEX_MASK = 255
CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT = 24
CERT_EXCLUDED_SUBTREE_BIT = -2147483648
SORTED_CTL_EXT_HASHED_SUBJECT_IDENTIFIER_FLAG = 1
CERT_DSS_R_LEN = 20
CERT_DSS_S_LEN = 20
CRYPT_X942_COUNTER_BYTE_LENGTH = 4
CRYPT_X942_KEY_LENGTH_BYTE_LENGTH = 4
CRYPT_ECC_CMS_SHARED_INFO_SUPPPUBINFO_BYTE_LENGTH = 4
CRYPT_RC2_40BIT_VERSION = 160
CRYPT_RC2_56BIT_VERSION = 52
CRYPT_RC2_64BIT_VERSION = 120
CRYPT_RC2_128BIT_VERSION = 58
PKCS_RSA_SSA_PSS_TRAILER_FIELD_BC = 1
NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE = 128
NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE = 64
NETSCAPE_SMIME_CERT_TYPE = 32
NETSCAPE_SIGN_CERT_TYPE = 16
NETSCAPE_SSL_CA_CERT_TYPE = 4
NETSCAPE_SMIME_CA_CERT_TYPE = 2
NETSCAPE_SIGN_CA_CERT_TYPE = 1
CMC_TAGGED_CERT_REQUEST_CHOICE = 1
CMC_OTHER_INFO_NO_CHOICE = 0
CMC_OTHER_INFO_FAIL_CHOICE = 1
CMC_OTHER_INFO_PEND_CHOICE = 2
CMC_STATUS_SUCCESS = 0
CMC_STATUS_FAILED = 2
CMC_STATUS_PENDING = 3
CMC_STATUS_NO_SUPPORT = 4
CMC_STATUS_CONFIRM_REQUIRED = 5
CMC_FAIL_BAD_ALG = 0
CMC_FAIL_BAD_MESSAGE_CHECK = 1
CMC_FAIL_BAD_REQUEST = 2
CMC_FAIL_BAD_TIME = 3
CMC_FAIL_BAD_CERT_ID = 4
CMC_FAIL_UNSUPORTED_EXT = 5
CMC_FAIL_MUST_ARCHIVE_KEYS = 6
CMC_FAIL_BAD_IDENTITY = 7
CMC_FAIL_POP_REQUIRED = 8
CMC_FAIL_POP_FAILED = 9
CMC_FAIL_NO_KEY_REUSE = 10
CMC_FAIL_INTERNAL_CA_ERROR = 11
CMC_FAIL_TRY_LATER = 12
CERT_BIOMETRIC_PICTURE_TYPE = 0
CERT_BIOMETRIC_SIGNATURE_TYPE = 1
OCSP_REQUEST_V1 = 0
OCSP_SUCCESSFUL_RESPONSE = 0
OCSP_MALFORMED_REQUEST_RESPONSE = 1
OCSP_INTERNAL_ERROR_RESPONSE = 2
OCSP_TRY_LATER_RESPONSE = 3
OCSP_SIG_REQUIRED_RESPONSE = 5
OCSP_UNAUTHORIZED_RESPONSE = 6
OCSP_BASIC_GOOD_CERT_STATUS = 0
OCSP_BASIC_REVOKED_CERT_STATUS = 1
OCSP_BASIC_UNKNOWN_CERT_STATUS = 2
OCSP_BASIC_RESPONSE_V1 = 0
OCSP_BASIC_BY_NAME_RESPONDER_ID = 1
OCSP_BASIC_BY_KEY_RESPONDER_ID = 2
CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG = 1
CRYPT_GET_INSTALLED_OID_FUNC_FLAG = 1
CRYPT_REGISTER_FIRST_INDEX = 0
CRYPT_REGISTER_LAST_INDEX = 4294967295
CRYPT_MATCH_ANY_ENCODING_TYPE = 4294967295
CALG_OID_INFO_CNG_ONLY = 4294967295
CALG_OID_INFO_PARAMETERS = 4294967294
CRYPT_HASH_ALG_OID_GROUP_ID = 1
CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2
CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3
CRYPT_SIGN_ALG_OID_GROUP_ID = 4
CRYPT_RDN_ATTR_OID_GROUP_ID = 5
CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6
CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7
CRYPT_POLICY_OID_GROUP_ID = 8
CRYPT_TEMPLATE_OID_GROUP_ID = 9
CRYPT_KDF_OID_GROUP_ID = 10
CRYPT_LAST_OID_GROUP_ID = 10
CRYPT_FIRST_ALG_OID_GROUP_ID = 1
CRYPT_LAST_ALG_OID_GROUP_ID = 4
CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG = 1
CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG = 2
CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG = 4
CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG = 2147483648
CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG = 1073741824
CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG = 536870912
CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = 268435456
CRYPT_OID_INFO_OID_KEY = 1
CRYPT_OID_INFO_NAME_KEY = 2
CRYPT_OID_INFO_ALGID_KEY = 3
CRYPT_OID_INFO_SIGN_KEY = 4
CRYPT_OID_INFO_CNG_ALGID_KEY = 5
CRYPT_OID_INFO_CNG_SIGN_KEY = 6
CRYPT_OID_INFO_OID_KEY_FLAGS_MASK = 4294901760
CRYPT_OID_DISABLE_SEARCH_DS_FLAG = 2147483648
CRYPT_OID_PREFER_CNG_ALGID_FLAG = 1073741824
CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK = 268369920
CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT = 16
CRYPT_INSTALL_OID_INFO_BEFORE_FLAG = 1
CRYPT_LOCALIZED_NAME_ENCODING_TYPE = 0
CERT_STRONG_SIGN_SERIALIZED_INFO_CHOICE = 1
CERT_STRONG_SIGN_OID_INFO_CHOICE = 2
CMSG_ENCRYPTED = 6
CMSG_MAIL_LIST_HANDLE_KEY_CHOICE = 1
CMSG_KEY_TRANS_RECIPIENT = 1
CMSG_KEY_AGREE_RECIPIENT = 2
CMSG_MAIL_LIST_RECIPIENT = 3
CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG = 2147483648
CMSG_RC4_NO_SALT_FLAG = 1073741824
CMSG_INDEFINITE_LENGTH = 4294967295
CMSG_BARE_CONTENT_FLAG = 1
CMSG_LENGTH_ONLY_FLAG = 2
CMSG_DETACHED_FLAG = 4
CMSG_AUTHENTICATED_ATTRIBUTES_FLAG = 8
CMSG_CONTENTS_OCTETS_FLAG = 16
CMSG_MAX_LENGTH_FLAG = 32
CMSG_CMS_ENCAPSULATED_CONTENT_FLAG = 64
CMSG_SIGNED_DATA_NO_SIGN_FLAG = 128
CMSG_CRYPT_RELEASE_CONTEXT_FLAG = 32768
CMSG_TYPE_PARAM = 1
CMSG_CONTENT_PARAM = 2
CMSG_BARE_CONTENT_PARAM = 3
CMSG_INNER_CONTENT_TYPE_PARAM = 4
CMSG_SIGNER_COUNT_PARAM = 5
CMSG_SIGNER_INFO_PARAM = 6
CMSG_SIGNER_CERT_INFO_PARAM = 7
CMSG_SIGNER_HASH_ALGORITHM_PARAM = 8
CMSG_SIGNER_AUTH_ATTR_PARAM = 9
CMSG_SIGNER_UNAUTH_ATTR_PARAM = 10
CMSG_CERT_COUNT_PARAM = 11
CMSG_CERT_PARAM = 12
CMSG_CRL_COUNT_PARAM = 13
CMSG_CRL_PARAM = 14
CMSG_ENVELOPE_ALGORITHM_PARAM = 15
CMSG_RECIPIENT_COUNT_PARAM = 17
CMSG_RECIPIENT_INDEX_PARAM = 18
CMSG_RECIPIENT_INFO_PARAM = 19
CMSG_HASH_ALGORITHM_PARAM = 20
CMSG_HASH_DATA_PARAM = 21
CMSG_COMPUTED_HASH_PARAM = 22
CMSG_ENCRYPT_PARAM = 26
CMSG_ENCRYPTED_DIGEST = 27
CMSG_ENCODED_SIGNER = 28
CMSG_ENCODED_MESSAGE = 29
CMSG_VERSION_PARAM = 30
CMSG_ATTR_CERT_COUNT_PARAM = 31
CMSG_ATTR_CERT_PARAM = 32
CMSG_CMS_RECIPIENT_COUNT_PARAM = 33
CMSG_CMS_RECIPIENT_INDEX_PARAM = 34
CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM = 35
CMSG_CMS_RECIPIENT_INFO_PARAM = 36
CMSG_UNPROTECTED_ATTR_PARAM = 37
CMSG_SIGNER_CERT_ID_PARAM = 38
CMSG_CMS_SIGNER_INFO_PARAM = 39
CMSG_SIGNED_DATA_V1 = 1
CMSG_SIGNED_DATA_V3 = 3
CMSG_SIGNED_DATA_PKCS_1_5_VERSION = 1
CMSG_SIGNED_DATA_CMS_VERSION = 3
CMSG_SIGNER_INFO_V1 = 1
CMSG_SIGNER_INFO_V3 = 3
CMSG_SIGNER_INFO_PKCS_1_5_VERSION = 1
CMSG_SIGNER_INFO_CMS_VERSION = 3
CMSG_HASHED_DATA_V0 = 0
CMSG_HASHED_DATA_V2 = 2
CMSG_HASHED_DATA_PKCS_1_5_VERSION = 0
CMSG_HASHED_DATA_CMS_VERSION = 2
CMSG_ENVELOPED_DATA_V0 = 0
CMSG_ENVELOPED_DATA_V2 = 2
CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION = 0
CMSG_ENVELOPED_DATA_CMS_VERSION = 2
CMSG_ENVELOPED_RECIPIENT_V0 = 0
CMSG_ENVELOPED_RECIPIENT_V2 = 2
CMSG_ENVELOPED_RECIPIENT_V3 = 3
CMSG_ENVELOPED_RECIPIENT_V4 = 4
CMSG_KEY_TRANS_PKCS_1_5_VERSION = 0
CMSG_KEY_TRANS_CMS_VERSION = 2
CMSG_KEY_AGREE_VERSION = 3
CMSG_MAIL_LIST_VERSION = 4
CMSG_CTRL_VERIFY_SIGNATURE = 1
CMSG_CTRL_DECRYPT = 2
CMSG_CTRL_VERIFY_HASH = 5
CMSG_CTRL_ADD_SIGNER = 6
CMSG_CTRL_DEL_SIGNER = 7
CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR = 8
CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR = 9
CMSG_CTRL_ADD_CERT = 10
CMSG_CTRL_DEL_CERT = 11
CMSG_CTRL_ADD_CRL = 12
CMSG_CTRL_DEL_CRL = 13
CMSG_CTRL_ADD_ATTR_CERT = 14
CMSG_CTRL_DEL_ATTR_CERT = 15
CMSG_CTRL_KEY_TRANS_DECRYPT = 16
CMSG_CTRL_KEY_AGREE_DECRYPT = 17
CMSG_CTRL_MAIL_LIST_DECRYPT = 18
CMSG_CTRL_VERIFY_SIGNATURE_EX = 19
CMSG_CTRL_ADD_CMS_SIGNER_INFO = 20
CMSG_CTRL_ENABLE_STRONG_SIGNATURE = 21
CMSG_VERIFY_SIGNER_PUBKEY = 1
CMSG_VERIFY_SIGNER_CERT = 2
CMSG_VERIFY_SIGNER_CHAIN = 3
CMSG_VERIFY_SIGNER_NULL = 4
CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG = 1
CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG = 1
CMSG_CONTENT_ENCRYPT_FREE_PARA_FLAG = 1
CMSG_CONTENT_ENCRYPT_FREE_OBJID_FLAG = 2
CMSG_CONTENT_ENCRYPT_RELEASE_CONTEXT_FLAG = 32768
CMSG_KEY_TRANS_ENCRYPT_FREE_PARA_FLAG = 1
CMSG_KEY_TRANS_ENCRYPT_FREE_OBJID_FLAG = 2
CMSG_KEY_AGREE_ENCRYPT_FREE_PARA_FLAG = 1
CMSG_KEY_AGREE_ENCRYPT_FREE_MATERIAL_FLAG = 2
CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_ALG_FLAG = 4
CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_PARA_FLAG = 8
CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_BITS_FLAG = 16
CMSG_KEY_AGREE_ENCRYPT_FREE_OBJID_FLAG = 32
CMSG_MAIL_LIST_ENCRYPT_FREE_PARA_FLAG = 1
CMSG_MAIL_LIST_ENCRYPT_FREE_OBJID_FLAG = 2
CERT_KEY_PROV_HANDLE_PROP_ID = 1
CERT_KEY_PROV_INFO_PROP_ID = 2
CERT_SHA1_HASH_PROP_ID = 3
CERT_MD5_HASH_PROP_ID = 4
CERT_HASH_PROP_ID = 3
CERT_KEY_CONTEXT_PROP_ID = 5
CERT_KEY_SPEC_PROP_ID = 6
CERT_IE30_RESERVED_PROP_ID = 7
CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8
CERT_ENHKEY_USAGE_PROP_ID = 9
CERT_CTL_USAGE_PROP_ID = 9
CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10
CERT_FRIENDLY_NAME_PROP_ID = 11
CERT_PVK_FILE_PROP_ID = 12
CERT_DESCRIPTION_PROP_ID = 13
CERT_ACCESS_STATE_PROP_ID = 14
CERT_SIGNATURE_HASH_PROP_ID = 15
CERT_SMART_CARD_DATA_PROP_ID = 16
CERT_EFS_PROP_ID = 17
CERT_FORTEZZA_DATA_PROP_ID = 18
CERT_ARCHIVED_PROP_ID = 19
CERT_KEY_IDENTIFIER_PROP_ID = 20
CERT_AUTO_ENROLL_PROP_ID = 21
CERT_PUBKEY_ALG_PARA_PROP_ID = 22
CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23
CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24
CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25
CERT_ENROLLMENT_PROP_ID = 26
CERT_DATE_STAMP_PROP_ID = 27
CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28
CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29
CERT_EXTENDED_ERROR_INFO_PROP_ID = 30
CERT_RENEWAL_PROP_ID = 64
CERT_ARCHIVED_KEY_HASH_PROP_ID = 65
CERT_AUTO_ENROLL_RETRY_PROP_ID = 66
CERT_AIA_URL_RETRIEVED_PROP_ID = 67
CERT_AUTHORITY_INFO_ACCESS_PROP_ID = 68
CERT_BACKED_UP_PROP_ID = 69
CERT_OCSP_RESPONSE_PROP_ID = 70
CERT_REQUEST_ORIGINATOR_PROP_ID = 71
CERT_SOURCE_LOCATION_PROP_ID = 72
CERT_SOURCE_URL_PROP_ID = 73
CERT_NEW_KEY_PROP_ID = 74
CERT_OCSP_CACHE_PREFIX_PROP_ID = 75
CERT_SMART_CARD_ROOT_INFO_PROP_ID = 76
CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = 77
CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78
CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = 79
CERT_SUBJECT_INFO_ACCESS_PROP_ID = 80
CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 81
CERT_CA_DISABLE_CRL_PROP_ID = 82
CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = 83
CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = 84
CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 85
CERT_SUBJECT_DISABLE_CRL_PROP_ID = 86
CERT_CEP_PROP_ID = 87
CERT_SIGN_HASH_CNG_ALG_PROP_ID = 89
CERT_SCARD_PIN_ID_PROP_ID = 90
CERT_SCARD_PIN_INFO_PROP_ID = 91
CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = 92
CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 93
CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = 94
CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = 95
CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 96
CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = 97
CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = 98
CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = 99
CERT_HCRYPTPROV_TRANSFER_PROP_ID = 100
CERT_SMART_CARD_READER_PROP_ID = 101
CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = 102
CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = 103
CERT_DISALLOWED_FILETIME_PROP_ID = 104
CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = 105
CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = 106
CERT_SHA256_HASH_PROP_ID = 107
CERT_SCEP_SERVER_CERTS_PROP_ID = 108
CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = 109
CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = 110
CERT_SCEP_CA_CERT_PROP_ID = 111
CERT_SCEP_SIGNER_CERT_PROP_ID = 112
CERT_SCEP_NONCE_PROP_ID = 113
CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = 114
CERT_SCEP_FLAGS_PROP_ID = 115
CERT_SCEP_GUID_PROP_ID = 116
CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = 117
CERT_ISOLATED_KEY_PROP_ID = 118
CERT_SERIAL_CHAIN_PROP_ID = 119
CERT_KEY_CLASSIFICATION_PROP_ID = 120
CERT_OCSP_MUST_STAPLE_PROP_ID = 121
CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = 122
CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = 123
CERT_PIN_SHA256_HASH_PROP_ID = 124
CERT_CLR_DELETE_KEY_PROP_ID = 125
CERT_NOT_BEFORE_FILETIME_PROP_ID = 126
CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = 127
CERT_FIRST_RESERVED_PROP_ID = 128
CERT_LAST_RESERVED_PROP_ID = 32767
CERT_FIRST_USER_PROP_ID = 32768
CERT_LAST_USER_PROP_ID = 65535
CERT_ACCESS_STATE_WRITE_PERSIST_FLAG = 1
CERT_ACCESS_STATE_SYSTEM_STORE_FLAG = 2
CERT_ACCESS_STATE_LM_SYSTEM_STORE_FLAG = 4
CERT_ACCESS_STATE_GP_SYSTEM_STORE_FLAG = 8
CERT_ACCESS_STATE_SHARED_USER_FLAG = 16
CERT_STORE_SIGNATURE_FLAG = 1
CERT_STORE_TIME_VALIDITY_FLAG = 2
CERT_STORE_REVOCATION_FLAG = 4
CERT_STORE_NO_CRL_FLAG = 65536
CERT_STORE_NO_ISSUER_FLAG = 131072
CERT_STORE_BASE_CRL_FLAG = 256
CERT_STORE_DELTA_CRL_FLAG = 512
CERT_STORE_UNSAFE_PHYSICAL_FLAG = 32
CERT_STORE_SHARE_STORE_FLAG = 64
CERT_STORE_MANIFOLD_FLAG = 256
CERT_SYSTEM_STORE_MASK = 4294901760
CERT_SYSTEM_STORE_UNPROTECTED_FLAG = 1073741824
CERT_SYSTEM_STORE_DEFER_READ_FLAG = 536870912
CERT_SYSTEM_STORE_LOCATION_SHIFT = 16
CERT_SYSTEM_STORE_CURRENT_USER_ID = 1
CERT_SYSTEM_STORE_LOCAL_MACHINE_ID = 2
CERT_SYSTEM_STORE_CURRENT_SERVICE_ID = 4
CERT_SYSTEM_STORE_SERVICES_ID = 5
CERT_SYSTEM_STORE_USERS_ID = 6
CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID = 7
CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID = 8
CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID = 9
CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS_ID = 10
CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG = 1
CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG = 2
CERT_PROT_ROOT_INHIBIT_PURGE_LM_FLAG = 4
CERT_PROT_ROOT_DISABLE_LM_AUTH_FLAG = 8
CERT_PROT_ROOT_ONLY_LM_GPT_FLAG = 8
CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG = 16
CERT_PROT_ROOT_DISABLE_NOT_DEFINED_NAME_CONSTRAINT_FLAG = 32
CERT_PROT_ROOT_DISABLE_PEER_TRUST = 65536
CERT_TRUST_PUB_ALLOW_TRUST_MASK = 3
CERT_TRUST_PUB_ALLOW_END_USER_TRUST = 0
CERT_TRUST_PUB_ALLOW_MACHINE_ADMIN_TRUST = 1
CERT_TRUST_PUB_ALLOW_ENTERPRISE_ADMIN_TRUST = 2
CERT_TRUST_PUB_CHECK_PUBLISHER_REV_FLAG = 256
CERT_TRUST_PUB_CHECK_TIMESTAMP_REV_FLAG = 512
CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_UNTRUSTED_ROOT_LOGGING_FLAG = 1
CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_PARTIAL_CHAIN_LOGGING_FLAG = 2
CERT_AUTO_UPDATE_DISABLE_RANDOM_QUERY_STRING_FLAG = 4
CERT_REGISTRY_STORE_REMOTE_FLAG = 65536
CERT_REGISTRY_STORE_SERIALIZED_FLAG = 131072
CERT_REGISTRY_STORE_CLIENT_GPT_FLAG = 2147483648
CERT_REGISTRY_STORE_LM_GPT_FLAG = 16777216
CERT_REGISTRY_STORE_ROAMING_FLAG = 262144
CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG = 524288
CERT_REGISTRY_STORE_EXTERNAL_FLAG = 1048576
CERT_FILE_STORE_COMMIT_ENABLE_FLAG = 65536
CERT_LDAP_STORE_SIGN_FLAG = 65536
CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG = 131072
CERT_LDAP_STORE_OPENED_FLAG = 262144
CERT_LDAP_STORE_UNBIND_FLAG = 524288
CERT_STORE_PROV_GP_SYSTEM_STORE_FLAG = 32
CERT_STORE_PROV_SHARED_USER_FLAG = 64
CERT_STORE_PROV_CLOSE_FUNC = 0
CERT_STORE_PROV_READ_CERT_FUNC = 1
CERT_STORE_PROV_WRITE_CERT_FUNC = 2
CERT_STORE_PROV_DELETE_CERT_FUNC = 3
CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC = 4
CERT_STORE_PROV_READ_CRL_FUNC = 5
CERT_STORE_PROV_WRITE_CRL_FUNC = 6
CERT_STORE_PROV_DELETE_CRL_FUNC = 7
CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC = 8
CERT_STORE_PROV_READ_CTL_FUNC = 9
CERT_STORE_PROV_WRITE_CTL_FUNC = 10
CERT_STORE_PROV_DELETE_CTL_FUNC = 11
CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC = 12
CERT_STORE_PROV_CONTROL_FUNC = 13
CERT_STORE_PROV_FIND_CERT_FUNC = 14
CERT_STORE_PROV_FREE_FIND_CERT_FUNC = 15
CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC = 16
CERT_STORE_PROV_FIND_CRL_FUNC = 17
CERT_STORE_PROV_FREE_FIND_CRL_FUNC = 18
CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC = 19
CERT_STORE_PROV_FIND_CTL_FUNC = 20
CERT_STORE_PROV_FREE_FIND_CTL_FUNC = 21
CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC = 22
CERT_STORE_PROV_WRITE_ADD_FLAG = 1
CERT_STORE_SAVE_AS_PKCS12 = 3
CERT_CLOSE_STORE_FORCE_FLAG = 1
CERT_CLOSE_STORE_CHECK_FLAG = 2
CERT_COMPARE_MASK = 65535
CERT_COMPARE_ANY = 0
CERT_COMPARE_SHA1_HASH = 1
CERT_COMPARE_NAME = 2
CERT_COMPARE_ATTR = 3
CERT_COMPARE_MD5_HASH = 4
CERT_COMPARE_PROPERTY = 5
CERT_COMPARE_PUBLIC_KEY = 6
CERT_COMPARE_HASH = 1
CERT_COMPARE_NAME_STR_A = 7
CERT_COMPARE_NAME_STR_W = 8
CERT_COMPARE_KEY_SPEC = 9
CERT_COMPARE_ENHKEY_USAGE = 10
CERT_COMPARE_CTL_USAGE = 10
CERT_COMPARE_SUBJECT_CERT = 11
CERT_COMPARE_ISSUER_OF = 12
CERT_COMPARE_EXISTING = 13
CERT_COMPARE_SIGNATURE_HASH = 14
CERT_COMPARE_KEY_IDENTIFIER = 15
CERT_COMPARE_CERT_ID = 16
CERT_COMPARE_CROSS_CERT_DIST_POINTS = 17
CERT_COMPARE_PUBKEY_MD5_HASH = 18
CERT_COMPARE_SUBJECT_INFO_ACCESS = 19
CERT_COMPARE_HASH_STR = 20
CERT_COMPARE_HAS_PRIVATE_KEY = 21
CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG = 2147483648
CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG = 1073741824
CTL_ENTRY_FROM_PROP_CHAIN_FLAG = 1
CRL_FIND_ANY = 0
CRL_FIND_ISSUED_BY = 1
CRL_FIND_EXISTING = 2
CRL_FIND_ISSUED_FOR = 3
CRL_FIND_ISSUED_BY_AKI_FLAG = 1
CRL_FIND_ISSUED_BY_SIGNATURE_FLAG = 2
CRL_FIND_ISSUED_BY_DELTA_FLAG = 4
CRL_FIND_ISSUED_BY_BASE_FLAG = 8
CRL_FIND_ISSUED_FOR_SET_STRONG_PROPERTIES_FLAG = 16
CERT_STORE_ADD_NEW = 1
CERT_STORE_ADD_USE_EXISTING = 2
CERT_STORE_ADD_REPLACE_EXISTING = 3
CERT_STORE_ADD_ALWAYS = 4
CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES = 5
CERT_STORE_ADD_NEWER = 6
CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES = 7
CERT_STORE_CERTIFICATE_CONTEXT = 1
CERT_STORE_CRL_CONTEXT = 2
CERT_STORE_CTL_CONTEXT = 3
CTL_ANY_SUBJECT_TYPE = 1
CTL_CERT_SUBJECT_TYPE = 2
CTL_FIND_NO_LIST_ID_CBDATA = 4294967295
CERT_STORE_CTRL_RESYNC = 1
CERT_STORE_CTRL_NOTIFY_CHANGE = 2
CERT_STORE_CTRL_COMMIT = 3
CERT_STORE_CTRL_AUTO_RESYNC = 4
CERT_STORE_CTRL_CANCEL_NOTIFY = 5
CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096
CERT_CREATE_CONTEXT_NOCOPY_FLAG = 1
CERT_CREATE_CONTEXT_SORTED_FLAG = 2
CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG = 4
CERT_CREATE_CONTEXT_NO_ENTRY_FLAG = 8
CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG = 1
CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG = 2
CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG = 4
CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG = 8
CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG = 1
CMSG_TRUSTED_SIGNER_FLAG = 1
CMSG_SIGNER_ONLY_FLAG = 2
CMSG_USE_SIGNER_INDEX_FLAG = 4
CMSG_CMS_ENCAPSULATED_CTL_FLAG = 32768
CMSG_ENCODE_SORTED_CTL_FLAG = 1
CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 2
CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG = 1
CERT_VERIFY_TRUSTED_SIGNERS_FLAG = 2
CERT_VERIFY_NO_TIME_CHECK_FLAG = 4
CERT_VERIFY_ALLOW_MORE_USAGE_FLAG = 8
CERT_VERIFY_UPDATED_CTL_FLAG = 1
CERT_CONTEXT_REVOCATION_TYPE = 1
CERT_VERIFY_REV_CHAIN_FLAG = 1
CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION = 2
CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG = 4
CERT_VERIFY_REV_SERVER_OCSP_FLAG = 8
CERT_VERIFY_REV_NO_OCSP_FAILOVER_TO_CRL_FLAG = 16
CERT_VERIFY_REV_SERVER_OCSP_WIRE_ONLY_FLAG = 32
CERT_UNICODE_IS_RDN_ATTRS_FLAG = 1
CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG = 2
CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB = 1
CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT = 2
CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL = 3
CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE = 4
CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY = 1
CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT = 2
CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN = 3
CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL = 4
CRYPT_VERIFY_CERT_SIGN_CHECK_WEAK_HASH_FLAG = 8
CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG = 128
CRYPT_ACQUIRE_NCRYPT_KEY_FLAGS_MASK = 458752
CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG = 65536
CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG = 131072
CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG = 262144
CRYPT_DELETE_KEYSET = 16
CERT_XML_NAME_STR = 4
CERT_NAME_STR_SEMICOLON_FLAG = 1073741824
CERT_NAME_STR_NO_PLUS_FLAG = 536870912
CERT_NAME_STR_NO_QUOTING_FLAG = 268435456
CERT_NAME_STR_CRLF_FLAG = 134217728
CERT_NAME_STR_COMMA_FLAG = 67108864
CERT_NAME_STR_REVERSE_FLAG = 33554432
CERT_NAME_STR_FORWARD_FLAG = 16777216
CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536
CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072
CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144
CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG = 524288
CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = 1048576
CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = 2097152
CERT_NAME_EMAIL_TYPE = 1
CERT_NAME_RDN_TYPE = 2
CERT_NAME_ATTR_TYPE = 3
CERT_NAME_SIMPLE_DISPLAY_TYPE = 4
CERT_NAME_FRIENDLY_DISPLAY_TYPE = 5
CERT_NAME_DNS_TYPE = 6
CERT_NAME_URL_TYPE = 7
CERT_NAME_UPN_TYPE = 8
CERT_NAME_ISSUER_FLAG = 1
CERT_NAME_DISABLE_IE4_UTF8_FLAG = 65536
CERT_NAME_SEARCH_ALL_NAMES_FLAG = 2
CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG = 1
CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG = 2
CRYPT_MESSAGE_KEYID_SIGNER_FLAG = 4
CRYPT_MESSAGE_SILENT_KEYSET_FLAG = 64
CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG = 4
CRYPT_RETRIEVE_MULTIPLE_OBJECTS = 1
CRYPT_CACHE_ONLY_RETRIEVAL = 2
CRYPT_WIRE_ONLY_RETRIEVAL = 4
CRYPT_DONT_CACHE_RESULT = 8
CRYPT_ASYNC_RETRIEVAL = 16
CRYPT_STICKY_CACHE_RETRIEVAL = 4096
CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL = 8192
CRYPT_OFFLINE_CHECK_RETRIEVAL = 16384
CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE = 32768
CRYPT_LDAP_SIGN_RETRIEVAL = 65536
CRYPT_NO_AUTH_RETRIEVAL = 131072
CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL = 262144
CRYPT_AIA_RETRIEVAL = 524288
CRYPT_HTTP_POST_RETRIEVAL = 1048576
CRYPT_PROXY_CACHE_RETRIEVAL = 2097152
CRYPT_NOT_MODIFIED_RETRIEVAL = 4194304
CRYPT_ENABLE_SSL_REVOCATION_RETRIEVAL = 8388608
CRYPT_RANDOM_QUERY_STRING_RETRIEVAL = 67108864
CRYPT_ENABLE_FILE_RETRIEVAL = 134217728
CRYPT_CREATE_NEW_FLUSH_ENTRY = 268435456
CRYPT_VERIFY_CONTEXT_SIGNATURE = 32
CRYPT_VERIFY_DATA_HASH = 64
CRYPT_KEEP_TIME_VALID = 128
CRYPT_DONT_VERIFY_SIGNATURE = 256
CRYPT_DONT_CHECK_TIME_VALIDITY = 512
CRYPT_CHECK_FRESHNESS_TIME_VALIDITY = 1024
CRYPT_ACCUMULATIVE_TIMEOUT = 2048
CRYPT_OCSP_ONLY_RETRIEVAL = 16777216
CRYPT_NO_OCSP_FAILOVER_TO_CRL_RETRIEVAL = 33554432
CRYPTNET_URL_CACHE_PRE_FETCH_NONE = 0
CRYPTNET_URL_CACHE_PRE_FETCH_BLOB = 1
CRYPTNET_URL_CACHE_PRE_FETCH_CRL = 2
CRYPTNET_URL_CACHE_PRE_FETCH_OCSP = 3
CRYPTNET_URL_CACHE_PRE_FETCH_AUTOROOT_CAB = 5
CRYPTNET_URL_CACHE_PRE_FETCH_DISALLOWED_CERT_CAB = 6
CRYPTNET_URL_CACHE_PRE_FETCH_PIN_RULES_CAB = 7
CRYPTNET_URL_CACHE_DEFAULT_FLUSH = 0
CRYPTNET_URL_CACHE_DISABLE_FLUSH = 4294967295
CRYPTNET_URL_CACHE_RESPONSE_NONE = 0
CRYPTNET_URL_CACHE_RESPONSE_HTTP = 1
CRYPTNET_URL_CACHE_RESPONSE_VALIDATED = 32768
CRYPT_RETRIEVE_MAX_ERROR_CONTENT_LENGTH = 4096
CRYPT_KEYID_MACHINE_FLAG = 32
CRYPT_KEYID_ALLOC_FLAG = 32768
CRYPT_KEYID_DELETE_FLAG = 16
CRYPT_KEYID_SET_NEW_FLAG = 8192
CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT = 5
CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT = 3
CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT = 100000
CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT = 10
CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DEFAULT = 5
CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DISABLE = 4294967295
CERT_CHAIN_ENABLE_MD2_MD4_FLAG = 1
CERT_CHAIN_ENABLE_WEAK_RSA_ROOT_FLAG = 2
CERT_CHAIN_ENABLE_WEAK_LOGGING_FLAG = 4
CERT_CHAIN_ENABLE_ONLY_WEAK_LOGGING_FLAG = 8
CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DEFAULT = 1023
CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DISABLE = 4294967295
CERT_CHAIN_MIN_PUB_KEY_BIT_LENGTH_DISABLE = 4294967295
CERT_CHAIN_ENABLE_WEAK_SETTINGS_FLAG = 2147483648
CERT_CHAIN_DISABLE_ECC_PARA_FLAG = 16
CERT_CHAIN_DISABLE_ALL_EKU_WEAK_FLAG = 65536
CERT_CHAIN_ENABLE_ALL_EKU_HYGIENE_FLAG = 131072
CERT_CHAIN_DISABLE_OPT_IN_SERVER_AUTH_WEAK_FLAG = 262144
CERT_CHAIN_DISABLE_SERVER_AUTH_WEAK_FLAG = 1048576
CERT_CHAIN_ENABLE_SERVER_AUTH_HYGIENE_FLAG = 2097152
CERT_CHAIN_DISABLE_CODE_SIGNING_WEAK_FLAG = 4194304
CERT_CHAIN_DISABLE_MOTW_CODE_SIGNING_WEAK_FLAG = 8388608
CERT_CHAIN_ENABLE_CODE_SIGNING_HYGIENE_FLAG = 16777216
CERT_CHAIN_ENABLE_MOTW_CODE_SIGNING_HYGIENE_FLAG = 33554432
CERT_CHAIN_DISABLE_TIMESTAMP_WEAK_FLAG = 67108864
CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_WEAK_FLAG = 134217728
CERT_CHAIN_ENABLE_TIMESTAMP_HYGIENE_FLAG = 268435456
CERT_CHAIN_ENABLE_MOTW_TIMESTAMP_HYGIENE_FLAG = 536870912
CERT_CHAIN_MOTW_IGNORE_AFTER_TIME_WEAK_FLAG = 1073741824
CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAG = 4096
CERT_CHAIN_DISABLE_MOTW_FILE_HASH_WEAK_FLAG = 8192
CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAG = 16384
CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_HASH_WEAK_FLAG = 32768
CERT_CHAIN_OPT_IN_WEAK_FLAGS = 262144
CERT_CHAIN_AUTO_CURRENT_USER = 1
CERT_CHAIN_AUTO_LOCAL_MACHINE = 2
CERT_CHAIN_AUTO_IMPERSONATED = 3
CERT_CHAIN_AUTO_PROCESS_INFO = 4
CERT_CHAIN_AUTO_PINRULE_INFO = 5
CERT_CHAIN_AUTO_NETWORK_INFO = 6
CERT_CHAIN_AUTO_SERIAL_LOCAL_MACHINE = 7
CERT_CHAIN_AUTO_HPKP_RULE_INFO = 8
CERT_CHAIN_AUTO_FLUSH_DISABLE_FLAG = 1
CERT_CHAIN_AUTO_LOG_CREATE_FLAG = 2
CERT_CHAIN_AUTO_LOG_FREE_FLAG = 4
CERT_CHAIN_AUTO_LOG_FLUSH_FLAG = 8
CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_DEFAULT = 5
CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_DEFAULT = 500
CRYPTNET_OCSP_AFTER_CRL_DISABLE = 4294967295
CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_DEFAULT = 10
CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT = 20
CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT = 10
CRYPTNET_PRE_FETCH_TRIGGER_DISABLE = 4294967295
CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_DEFAULT = 60
CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_DEFAULT = 50
CRYPTNET_CRL_BEFORE_OCSP_ENABLE = 4294967295
CERT_CHAIN_OPTION_DISABLE_AIA_URL_RETRIEVAL = 2
CERT_CHAIN_OPTION_ENABLE_SIA_URL_RETRIEVAL = 4
CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_DEFAULT = 12
CERT_CHAIN_CACHE_END_CERT = 1
CERT_CHAIN_THREAD_STORE_SYNC = 2
CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL = 4
CERT_CHAIN_USE_LOCAL_MACHINE_STORE = 8
CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE = 16
CERT_CHAIN_ENABLE_SHARE_STORE = 32
CERT_CHAIN_EXCLUSIVE_ENABLE_CA_FLAG = 1
CERT_TRUST_NO_ERROR = 0
CERT_TRUST_IS_NOT_TIME_VALID = 1
CERT_TRUST_IS_NOT_TIME_NESTED = 2
CERT_TRUST_IS_REVOKED = 4
CERT_TRUST_IS_NOT_SIGNATURE_VALID = 8
CERT_TRUST_IS_NOT_VALID_FOR_USAGE = 16
CERT_TRUST_IS_UNTRUSTED_ROOT = 32
CERT_TRUST_REVOCATION_STATUS_UNKNOWN = 64
CERT_TRUST_IS_CYCLIC = 128
CERT_TRUST_INVALID_EXTENSION = 256
CERT_TRUST_INVALID_POLICY_CONSTRAINTS = 512
CERT_TRUST_INVALID_BASIC_CONSTRAINTS = 1024
CERT_TRUST_INVALID_NAME_CONSTRAINTS = 2048
CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT = 4096
CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT = 8192
CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT = 16384
CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT = 32768
CERT_TRUST_IS_OFFLINE_REVOCATION = 16777216
CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY = 33554432
CERT_TRUST_IS_EXPLICIT_DISTRUST = 67108864
CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT = 134217728
CERT_TRUST_HAS_WEAK_SIGNATURE = 1048576
CERT_TRUST_HAS_WEAK_HYGIENE = 2097152
CERT_TRUST_IS_PARTIAL_CHAIN = 65536
CERT_TRUST_CTL_IS_NOT_TIME_VALID = 131072
CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID = 262144
CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE = 524288
CERT_TRUST_HAS_EXACT_MATCH_ISSUER = 1
CERT_TRUST_HAS_KEY_MATCH_ISSUER = 2
CERT_TRUST_HAS_NAME_MATCH_ISSUER = 4
CERT_TRUST_IS_SELF_SIGNED = 8
CERT_TRUST_AUTO_UPDATE_CA_REVOCATION = 16
CERT_TRUST_AUTO_UPDATE_END_REVOCATION = 32
CERT_TRUST_NO_OCSP_FAILOVER_TO_CRL = 64
CERT_TRUST_IS_KEY_ROLLOVER = 128
CERT_TRUST_SSL_HANDSHAKE_OCSP = 262144
CERT_TRUST_SSL_TIME_VALID_OCSP = 524288
CERT_TRUST_SSL_RECONNECT_OCSP = 1048576
CERT_TRUST_HAS_PREFERRED_ISSUER = 256
CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY = 512
CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS = 1024
CERT_TRUST_IS_PEER_TRUSTED = 2048
CERT_TRUST_HAS_CRL_VALIDITY_EXTENDED = 4096
CERT_TRUST_IS_FROM_EXCLUSIVE_TRUST_STORE = 8192
CERT_TRUST_IS_CA_TRUSTED = 16384
CERT_TRUST_HAS_AUTO_UPDATE_WEAK_SIGNATURE = 32768
CERT_TRUST_HAS_ALLOW_WEAK_SIGNATURE = 131072
CERT_TRUST_IS_COMPLEX_CHAIN = 65536
CERT_TRUST_SSL_TIME_VALID = 16777216
CERT_TRUST_NO_TIME_CHECK = 33554432
USAGE_MATCH_TYPE_AND = 0
USAGE_MATCH_TYPE_OR = 1
CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG = 1
CERT_CHAIN_REVOCATION_CHECK_END_CERT = 268435456
CERT_CHAIN_REVOCATION_CHECK_CHAIN = 536870912
CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 1073741824
CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY = 2147483648
CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT = 134217728
CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT = 67108864
CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING = 64
CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS = 128
CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE = 256
CERT_CHAIN_TIMESTAMP_TIME = 512
CERT_CHAIN_ENABLE_PEER_TRUST = 1024
CERT_CHAIN_DISABLE_MY_PEER_TRUST = 2048
CERT_CHAIN_DISABLE_MD2_MD4 = 4096
CERT_CHAIN_DISABLE_AIA = 8192
CERT_CHAIN_HAS_MOTW = 16384
CERT_CHAIN_ONLY_ADDITIONAL_AND_AUTH_ROOT = 32768
CERT_CHAIN_OPT_IN_WEAK_SIGNATURE = 65536
CERT_CHAIN_FIND_BY_ISSUER = 1
CERT_CHAIN_POLICY_IGNORE_WEAK_SIGNATURE_FLAG = 134217728
BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG = 2147483648
BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG = 1073741824
MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG = 65536
MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG = 131072
MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG = 262144
SSL_F12_ERROR_TEXT_LENGTH = 256
CERT_CHAIN_POLICY_SSL_F12_SUCCESS_LEVEL = 0
CERT_CHAIN_POLICY_SSL_F12_WARNING_LEVEL = 1
CERT_CHAIN_POLICY_SSL_F12_ERROR_LEVEL = 2
CERT_CHAIN_POLICY_SSL_F12_NONE_CATEGORY = 0
CERT_CHAIN_POLICY_SSL_F12_WEAK_CRYPTO_CATEGORY = 1
CERT_CHAIN_POLICY_SSL_F12_ROOT_PROGRAM_CATEGORY = 2
SSL_HPKP_PKP_HEADER_INDEX = 0
SSL_HPKP_PKP_RO_HEADER_INDEX = 1
SSL_HPKP_HEADER_COUNT = 2
SSL_KEY_PIN_ERROR_TEXT_LENGTH = 512
CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_ERROR = -2
CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_ERROR = -1
CERT_CHAIN_POLICY_SSL_KEY_PIN_SUCCESS = 0
CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_WARNING = 1
CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_WARNING = 2
CRYPT_STRING_BASE64URI = 13
CRYPT_STRING_ENCODEMASK = 255
CRYPT_STRING_RESERVED100 = 256
CRYPT_STRING_RESERVED200 = 512
CRYPT_STRING_PERCENTESCAPE = 134217728
CRYPT_STRING_HASHDATA = 268435456
CRYPT_STRING_NOCRLF = 1073741824
CRYPT_STRING_NOCR = 2147483648
PKCS12_IMPORT_SILENT = 64
PKCS12_ONLY_CERTIFICATES = 1024
PKCS12_ONLY_NOT_ENCRYPTED_CERTIFICATES = 2048
PKCS12_VIRTUAL_ISOLATION_KEY = 65536
PKCS12_IMPORT_RESERVED_MASK = 4294901760
PKCS12_ONLY_CERTIFICATES_PROVIDER_TYPE = 0
REPORT_NO_PRIVATE_KEY = 1
REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY = 2
EXPORT_PRIVATE_KEYS = 4
PKCS12_PROTECT_TO_DOMAIN_SIDS = 32
PKCS12_EXPORT_SILENT = 64
PKCS12_EXPORT_PBES2_PARAMS = 128
PKCS12_DISABLE_ENCRYPT_CERTIFICATES = 256
PKCS12_ENCRYPT_CERTIFICATES = 512
PKCS12_EXPORT_ECC_CURVE_PARAMETERS = 4096
PKCS12_EXPORT_ECC_CURVE_OID = 8192
PKCS12_EXPORT_RESERVED_MASK = 4294901760
CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_READ_FLAG = 1
CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_WRITE_FLAG = 2
CERT_SERVER_OCSP_RESPONSE_ASYNC_FLAG = 1
CERT_SELECT_MAX_PARA = 500
CERT_SELECT_BY_ISSUER_DISPLAYNAME = 12
CERT_SELECT_BY_FRIENDLYNAME = 13
CERT_SELECT_BY_THUMBPRINT = 14
CERT_SELECT_ALLOW_EXPIRED = 1
CERT_SELECT_TRUSTED_ROOT = 2
CERT_SELECT_DISALLOW_SELFSIGNED = 4
CERT_SELECT_HAS_PRIVATE_KEY = 8
CERT_SELECT_HAS_KEY_FOR_SIGNATURE = 16
CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE = 32
CERT_SELECT_HARDWARE_ONLY = 64
CERT_SELECT_ALLOW_DUPLICATES = 128
CERT_SELECT_IGNORE_AUTOSELECT = 256
TIMESTAMP_FAILURE_BAD_ALG = 0
TIMESTAMP_FAILURE_BAD_REQUEST = 2
TIMESTAMP_FAILURE_BAD_FORMAT = 5
TIMESTAMP_FAILURE_TIME_NOT_AVAILABLE = 14
TIMESTAMP_FAILURE_POLICY_NOT_SUPPORTED = 15
TIMESTAMP_FAILURE_EXTENSION_NOT_SUPPORTED = 16
TIMESTAMP_FAILURE_INFO_NOT_AVAILABLE = 17
TIMESTAMP_FAILURE_SYSTEM_FAILURE = 25
TIMESTAMP_DONT_HASH_DATA = 1
TIMESTAMP_VERIFY_CONTEXT_SIGNATURE = 32
TIMESTAMP_NO_AUTH_RETRIEVAL = 131072
CRYPT_OBJECT_LOCATOR_SPN_NAME_TYPE = 1
CRYPT_OBJECT_LOCATOR_LAST_RESERVED_NAME_TYPE = 32
CRYPT_OBJECT_LOCATOR_FIRST_RESERVED_USER_NAME_TYPE = 33
CRYPT_OBJECT_LOCATOR_LAST_RESERVED_USER_NAME_TYPE = 65535
CERT_FILE_HASH_USE_TYPE = 1
CERT_TIMESTAMP_HASH_USE_TYPE = 2
RECIPIENTPOLICYV1 = 1
RECIPIENTPOLICYV2 = 2
E_ICARD_COMMUNICATION = -1073413888
E_ICARD_DATA_ACCESS = -1073413887
E_ICARD_EXPORT = -1073413886
E_ICARD_IDENTITY = -1073413885
E_ICARD_IMPORT = -1073413884
E_ICARD_ARGUMENT = -1073413883
E_ICARD_REQUEST = -1073413882
E_ICARD_INFORMATIONCARD = -1073413881
E_ICARD_STOREKEY = -1073413880
E_ICARD_LOGOVALIDATION = -1073413879
E_ICARD_PASSWORDVALIDATION = -1073413878
E_ICARD_POLICY = -1073413877
E_ICARD_PROCESSDIED = -1073413876
E_ICARD_SERVICEBUSY = -1073413875
E_ICARD_SERVICE = -1073413874
E_ICARD_SHUTTINGDOWN = -1073413873
E_ICARD_TOKENCREATION = -1073413872
E_ICARD_TRUSTEXCHANGE = -1073413871
E_ICARD_UNTRUSTED = -1073413870
E_ICARD_USERCANCELLED = -1073413869
E_ICARD_STORE_IMPORT = -1073413868
E_ICARD_FAIL = -1073413867
E_ICARD_UI_INITIALIZATION = -1073413862
E_ICARD_REFRESH_REQUIRED = -1073413760
E_ICARD_MISSING_APPLIESTO = -1073413759
E_ICARD_INVALID_PROOF_KEY = -1073413758
E_ICARD_UNKNOWN_REFERENCE = -1073413757
E_ICARD_FAILED_REQUIRED_CLAIMS = -1073413756
AUDIT_CARD_WRITTEN = 1074070016
AUDIT_CARD_DELETE = 1074070017
AUDIT_CARD_IMPORT = 1074070018
AUDIT_STORE_IMPORT = 1074070019
AUDIT_STORE_EXPORT = 1074070020
AUDIT_STORE_DELETE = 1074070021
AUDIT_SERVICE_IDLE_STOP = 1074070022
enum BCRYPT_OPERATION : UInt32
BCRYPT_CIPHER_OPERATION = 1

BCRYPT_HASH_OPERATION = 2

BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4

BCRYPT_SECRET_AGREEMENT_OPERATION = 8

BCRYPT_SIGNATURE_OPERATION = 16

BCRYPT_RNG_OPERATION = 32

end
enum NCRYPT_OPERATION : UInt32
NCRYPT_CIPHER_OPERATION = 1

NCRYPT_HASH_OPERATION = 2

NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4

NCRYPT_SECRET_AGREEMENT_OPERATION = 8

NCRYPT_SIGNATURE_OPERATION = 16

end
enum CERT_FIND_FLAGS : UInt32
CERT_FIND_ANY = 0

CERT_FIND_CERT_ID = 1048576

CERT_FIND_CTL_USAGE = 655360

CERT_FIND_ENHKEY_USAGE = 655360

CERT_FIND_EXISTING = 851968

CERT_FIND_HASH = 65536

CERT_FIND_HAS_PRIVATE_KEY = 1376256

CERT_FIND_ISSUER_ATTR = 196612

CERT_FIND_ISSUER_NAME = 131076

CERT_FIND_ISSUER_OF = 786432

CERT_FIND_ISSUER_STR = 524292

CERT_FIND_KEY_IDENTIFIER = 983040

CERT_FIND_KEY_SPEC = 589824

CERT_FIND_MD5_HASH = 262144

CERT_FIND_PROPERTY = 327680

CERT_FIND_PUBLIC_KEY = 393216

CERT_FIND_SHA1_HASH = 65536

CERT_FIND_SIGNATURE_HASH = 917504

CERT_FIND_SUBJECT_ATTR = 196615

CERT_FIND_SUBJECT_CERT = 720896

CERT_FIND_SUBJECT_NAME = 131079

CERT_FIND_SUBJECT_STR = 524295

CERT_FIND_CROSS_CERT_DIST_POINTS = 1114112

CERT_FIND_PUBKEY_MD5_HASH = 1179648

CERT_FIND_SUBJECT_STR_A = 458759

CERT_FIND_SUBJECT_STR_W = 524295

CERT_FIND_ISSUER_STR_A = 458756

CERT_FIND_ISSUER_STR_W = 524292

CERT_FIND_SUBJECT_INFO_ACCESS = 1245184

CERT_FIND_HASH_STR = 1310720

CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG = 1

CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG = 2

CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG = 4

CERT_FIND_NO_ENHKEY_USAGE_FLAG = 8

CERT_FIND_OR_ENHKEY_USAGE_FLAG = 16

CERT_FIND_VALID_ENHKEY_USAGE_FLAG = 32

CERT_FIND_OPTIONAL_CTL_USAGE_FLAG = 1

CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG = 2

CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG = 4

CERT_FIND_NO_CTL_USAGE_FLAG = 8

CERT_FIND_OR_CTL_USAGE_FLAG = 16

CERT_FIND_VALID_CTL_USAGE_FLAG = 32

end
enum CERT_QUERY_OBJECT_TYPE : UInt32
CERT_QUERY_OBJECT_FILE = 1

CERT_QUERY_OBJECT_BLOB = 2

end
enum CERT_QUERY_CONTENT_TYPE : UInt32
CERT_QUERY_CONTENT_CERT = 1

CERT_QUERY_CONTENT_CTL = 2

CERT_QUERY_CONTENT_CRL = 3

CERT_QUERY_CONTENT_SERIALIZED_STORE = 4

CERT_QUERY_CONTENT_SERIALIZED_CERT = 5

CERT_QUERY_CONTENT_SERIALIZED_CTL = 6

CERT_QUERY_CONTENT_SERIALIZED_CRL = 7

CERT_QUERY_CONTENT_PKCS7_SIGNED = 8

CERT_QUERY_CONTENT_PKCS7_UNSIGNED = 9

CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED = 10

CERT_QUERY_CONTENT_PKCS10 = 11

CERT_QUERY_CONTENT_PFX = 12

CERT_QUERY_CONTENT_CERT_PAIR = 13

CERT_QUERY_CONTENT_PFX_AND_LOAD = 14

end
enum CERT_QUERY_CONTENT_TYPE_FLAGS : UInt32
CERT_QUERY_CONTENT_FLAG_CERT = 2

CERT_QUERY_CONTENT_FLAG_CTL = 4

CERT_QUERY_CONTENT_FLAG_CRL = 8

CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE = 16

CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT = 32

CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL = 64

CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL = 128

CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED = 256

CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED = 512

CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED = 1024

CERT_QUERY_CONTENT_FLAG_PKCS10 = 2048

CERT_QUERY_CONTENT_FLAG_PFX = 4096

CERT_QUERY_CONTENT_FLAG_CERT_PAIR = 8192

CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD = 16384

CERT_QUERY_CONTENT_FLAG_ALL = 16382

CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT = 818

end
enum CERT_QUERY_FORMAT_TYPE : UInt32
CERT_QUERY_FORMAT_BINARY = 1

CERT_QUERY_FORMAT_BASE64_ENCODED = 2

CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED = 3

end
enum CERT_QUERY_FORMAT_TYPE_FLAGS : UInt32
CERT_QUERY_FORMAT_FLAG_BINARY = 2

CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED = 4

CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED = 8

CERT_QUERY_FORMAT_FLAG_ALL = 14

end
enum CERT_QUERY_ENCODING_TYPE : UInt32
X509_ASN_ENCODING = 1

PKCS_7_ASN_ENCODING = 65536

end
enum CERT_RDN_ATTR_VALUE_TYPE : UInt32
CERT_RDN_ANY_TYPE = 0

CERT_RDN_NUMERIC_STRING = 3

CERT_RDN_PRINTABLE_STRING = 4

CERT_RDN_T61_STRING = 5

CERT_RDN_VIDEOTEX_STRING = 6

CERT_RDN_IA5_STRING = 7

CERT_RDN_GRAPHIC_STRING = 8

CERT_RDN_ISO646_STRING = 9

CERT_RDN_GENERAL_STRING = 10

CERT_RDN_INT4_STRING = 11

CERT_RDN_UNICODE_STRING = 12

CERT_RDN_BMP_STRING = 12

CERT_RDN_ENCODED_BLOB = 1

CERT_RDN_OCTET_STRING = 2

CERT_RDN_TELETEX_STRING = 5

CERT_RDN_UNIVERSAL_STRING = 11

CERT_RDN_UTF8_STRING = 13

CERT_RDN_VISIBLE_STRING = 9

end
enum CERT_STRING_TYPE : UInt32
CERT_SIMPLE_NAME_STR = 1

CERT_OID_NAME_STR = 2

CERT_X500_NAME_STR = 3

end
enum BCRYPT_TABLE : UInt32
CRYPT_LOCAL = 1

CRYPT_DOMAIN = 2

end
enum CERT_KEY_SPEC : UInt32
AT_KEYEXCHANGE = 1

AT_SIGNATURE = 2

CERT_NCRYPT_KEY_SPEC = 4294967295

end
enum BCRYPT_INTERFACE : UInt32
BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3

BCRYPT_CIPHER_INTERFACE = 1

BCRYPT_HASH_INTERFACE = 2

BCRYPT_RNG_INTERFACE = 6

BCRYPT_SECRET_AGREEMENT_INTERFACE = 4

BCRYPT_SIGNATURE_INTERFACE = 5

NCRYPT_KEY_STORAGE_INTERFACE = 65537

NCRYPT_SCHANNEL_INTERFACE = 65538

NCRYPT_SCHANNEL_SIGNATURE_INTERFACE = 65539

end
enum NCRYPT_FLAGS : UInt32
BCRYPT_PAD_NONE = 1

BCRYPT_PAD_OAEP = 4

BCRYPT_PAD_PKCS1 = 2

BCRYPT_PAD_PSS = 8

NCRYPT_SILENT_FLAG = 64

NCRYPT_NO_PADDING_FLAG = 1

NCRYPT_PAD_OAEP_FLAG = 4

NCRYPT_PAD_PKCS1_FLAG = 2

NCRYPT_REGISTER_NOTIFY_FLAG = 1

NCRYPT_UNREGISTER_NOTIFY_FLAG = 2

NCRYPT_MACHINE_KEY_FLAG = 32

NCRYPT_UNPROTECT_NO_DECRYPT = 1

NCRYPT_OVERWRITE_KEY_FLAG = 128

NCRYPT_NO_KEY_VALIDATION = 8

NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG = 512

NCRYPT_PAD_PSS_FLAG = 8

NCRYPT_PERSIST_FLAG = 2147483648

NCRYPT_PERSIST_ONLY_FLAG = 1073741824

end
enum CRYPT_STRING : UInt32
CRYPT_STRING_BASE64HEADER = 0

CRYPT_STRING_BASE64 = 1

CRYPT_STRING_BINARY = 2

CRYPT_STRING_BASE64REQUESTHEADER = 3

CRYPT_STRING_HEX = 4

CRYPT_STRING_HEXASCII = 5

CRYPT_STRING_BASE64X509CRLHEADER = 9

CRYPT_STRING_HEXADDR = 10

CRYPT_STRING_HEXASCIIADDR = 11

CRYPT_STRING_HEXRAW = 12

CRYPT_STRING_STRICT = 536870912

CRYPT_STRING_BASE64_ANY = 6

CRYPT_STRING_ANY = 7

CRYPT_STRING_HEX_ANY = 8

end
enum CRYPT_IMPORT_PUBLIC_KEY_FLAGS : UInt32
CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = 2147483648

CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = 1073741824

end
enum CRYPT_XML_FLAGS : UInt32
CRYPT_XML_FLAG_DISABLE_EXTENSIONS = 268435456

CRYPT_XML_FLAG_NO_SERIALIZE = 2147483648

CRYPT_XML_SIGN_ADD_KEYVALUE = 1

end
enum CRYPT_ENCODE_OBJECT_FLAGS : UInt32
CRYPT_ENCODE_ALLOC_FLAG = 32768

CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG = 131072

CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG = 1073741824

CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG = 2147483648

CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG = 536870912

end
enum CRYPT_OBJECT_LOCATOR_RELEASE_REASON : UInt32
CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN = 1

CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP = 2

CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT = 3

CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD = 4

end
enum CRYPT_ACQUIRE_FLAGS : UInt32
CRYPT_ACQUIRE_CACHE_FLAG = 1

CRYPT_ACQUIRE_COMPARE_KEY_FLAG = 4

CRYPT_ACQUIRE_NO_HEALING = 8

CRYPT_ACQUIRE_SILENT_FLAG = 64

CRYPT_ACQUIRE_USE_PROV_INFO_FLAG = 2

end
enum CRYPT_GET_URL_FLAGS : UInt32
CRYPT_GET_URL_FROM_PROPERTY = 1

CRYPT_GET_URL_FROM_EXTENSION = 2

CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE = 4

CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE = 8

end
enum CERT_STORE_SAVE_AS : UInt32
CERT_STORE_SAVE_AS_PKCS7 = 2

CERT_STORE_SAVE_AS_STORE = 1

end
enum BCRYPT_QUERY_PROVIDER_MODE : UInt32
CRYPT_ANY = 4

CRYPT_UM = 1

CRYPT_KM = 2

CRYPT_MM = 3

end
enum CERT_FIND_CHAIN_IN_STORE_FLAGS : UInt32
CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG = 1

CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG = 2

CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG = 32768

CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG = 4

CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG = 8

CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG = 16384

end
enum CERT_CONTROL_STORE_FLAGS : UInt32
CERT_STORE_CTRL_COMMIT_FORCE_FLAG = 1

CERT_STORE_CTRL_COMMIT_CLEAR_FLAG = 2

CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG = 1

end
enum BCRYPT_OPEN_ALGORITHM_PROVIDER_FLAGS : UInt32
BCRYPT_ALG_HANDLE_HMAC_FLAG = 8

BCRYPT_PROV_DISPATCH = 1

BCRYPT_HASH_REUSABLE_FLAG = 32

end
enum CERT_STORE_SAVE_TO : UInt32
CERT_STORE_SAVE_TO_FILE = 1

CERT_STORE_SAVE_TO_FILENAME = 4

CERT_STORE_SAVE_TO_FILENAME_A = 3

CERT_STORE_SAVE_TO_FILENAME_W = 4

CERT_STORE_SAVE_TO_MEMORY = 2

end
enum CRYPT_SET_PROV_PARAM_ID : UInt32
PP_CLIENT_HWND = 1

PP_DELETEKEY = 24

PP_KEYEXCHANGE_ALG = 14

PP_KEYEXCHANGE_PIN = 32

PP_KEYEXCHANGE_KEYSIZE = 12

PP_KEYSET_SEC_DESCR = 8

PP_PIN_PROMPT_STRING = 44

PP_ROOT_CERTSTORE = 46

PP_SIGNATURE_ALG = 15

PP_SIGNATURE_PIN = 33

PP_SIGNATURE_KEYSIZE = 13

PP_UI_PROMPT = 21

PP_USE_HARDWARE_RNG = 38

PP_USER_CERTSTORE = 42

PP_SECURE_KEYEXCHANGE_PIN = 47

PP_SECURE_SIGNATURE_PIN = 48

PP_SMARTCARD_READER = 43

end
enum CRYPT_KEY_PARAM_ID : UInt32
KP_ALGID = 7

KP_CERTIFICATE = 26

KP_PERMISSIONS = 6

KP_SALT = 2

KP_SALT_EX = 10

KP_BLOCKLEN = 8

KP_GET_USE_COUNT = 42

KP_KEYLEN = 9

end
enum CRYPT_KEY_FLAGS : UInt32
CRYPT_EXPORTABLE = 1

CRYPT_USER_PROTECTED = 2

CRYPT_ARCHIVABLE = 16384

CRYPT_CREATE_IV = 512

CRYPT_CREATE_SALT = 4

CRYPT_DATA_KEY = 2048

CRYPT_FORCE_KEY_PROTECTION_HIGH = 32768

CRYPT_KEK = 1024

CRYPT_INITIATOR = 64

CRYPT_NO_SALT = 16

CRYPT_ONLINE = 128

CRYPT_PREGEN = 64

CRYPT_RECIPIENT = 16

CRYPT_SF = 256

CRYPT_SGCKEY = 8192

CRYPT_VOLATILE = 4096

CRYPT_MACHINE_KEYSET = 32

CRYPT_USER_KEYSET = 4096

PKCS12_PREFER_CNG_KSP = 256

PKCS12_ALWAYS_CNG_KSP = 512

PKCS12_ALLOW_OVERWRITE_KEY = 16384

PKCS12_NO_PERSIST_KEY = 32768

PKCS12_INCLUDE_EXTENDED_PROPERTIES = 16

CRYPT_OAEP = 64

CRYPT_BLOB_VER3 = 128

CRYPT_DESTROYKEY = 4

CRYPT_SSL2_FALLBACK = 2

CRYPT_Y_ONLY = 1

CRYPT_IPSEC_HMAC_KEY = 256

CERT_SET_KEY_PROV_HANDLE_PROP_ID = 1

CERT_SET_KEY_CONTEXT_PROP_ID = 1

end
enum CRYPT_MSG_TYPE : UInt32
CMSG_DATA = 1

CMSG_SIGNED = 2

CMSG_ENVELOPED = 3

CMSG_SIGNED_AND_ENVELOPED = 4

CMSG_HASHED = 5

end
enum CERT_OPEN_STORE_FLAGS : UInt32
CERT_STORE_BACKUP_RESTORE_FLAG = 2048

CERT_STORE_CREATE_NEW_FLAG = 8192

CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG = 4

CERT_STORE_DELETE_FLAG = 16

CERT_STORE_ENUM_ARCHIVED_FLAG = 512

CERT_STORE_MAXIMUM_ALLOWED_FLAG = 4096

CERT_STORE_NO_CRYPT_RELEASE_FLAG = 1

CERT_STORE_OPEN_EXISTING_FLAG = 16384

CERT_STORE_READONLY_FLAG = 32768

CERT_STORE_SET_LOCALIZED_NAME_FLAG = 2

CERT_STORE_SHARE_CONTEXT_FLAG = 128

CERT_STORE_UPDATE_KEYID_FLAG = 1024

end
enum CRYPT_DEFAULT_CONTEXT_FLAGS : UInt32
CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG = 1

CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG = 2

end
enum CRYPT_VERIFY_CERT_FLAGS : UInt32
CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG = 1

CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG = 2

CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG = 4

end
enum CRYPT_SET_HASH_PARAM : UInt32
HP_HMAC_INFO = 5

HP_HASHVAL = 2

end
enum CERT_SYSTEM_STORE_FLAGS : UInt32
CERT_SYSTEM_STORE_LOCATION_MASK = 16711680

CERT_SYSTEM_STORE_RELOCATE_FLAG = 2147483648

end
enum CERT_CREATE_SELFSIGN_FLAGS : UInt32
CERT_CREATE_SELFSIGN_NO_KEY_INFO = 2

CERT_CREATE_SELFSIGN_NO_SIGN = 1

end
enum CRYPT_DEFAULT_CONTEXT_TYPE : UInt32
CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID = 1

CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID = 2

end
enum BCRYPT_RESOLVE_PROVIDERS_FLAGS : UInt32
CRYPT_ALL_FUNCTIONS = 1

CRYPT_ALL_PROVIDERS = 2

end
enum CERT_FIND_TYPE : UInt32
CTL_FIND_ANY = 0

CTL_FIND_SHA1_HASH = 1

CTL_FIND_MD5_HASH = 2

CTL_FIND_USAGE = 3

CTL_FIND_SAME_USAGE_FLAG = 1

CTL_FIND_EXISTING = 5

CTL_FIND_SUBJECT = 4

end
enum CRYPT_FIND_FLAGS : UInt32
CRYPT_FIND_USER_KEYSET_FLAG = 1

CRYPT_FIND_MACHINE_KEYSET_FLAG = 2

CRYPT_FIND_SILENT_KEYSET_FLAG = 64

end
enum CRYPT_IMAGE_REF_FLAGS : UInt32
CRYPT_MIN_DEPENDENCIES = 1

CRYPT_PROCESS_ISOLATE = 65536

end
enum CERT_REVOCATION_STATUS_REASON : UInt32
CRL_REASON_UNSPECIFIED = 0

CRL_REASON_KEY_COMPROMISE = 1

CRL_REASON_CA_COMPROMISE = 2

CRL_REASON_AFFILIATION_CHANGED = 3

CRL_REASON_SUPERSEDED = 4

CRL_REASON_CESSATION_OF_OPERATION = 5

CRL_REASON_CERTIFICATE_HOLD = 6

CRL_REASON_REMOVE_FROM_CRL = 8

end
enum CERT_ROOT_PROGRAM_FLAGS : UInt32
CERT_ROOT_PROGRAM_FLAG_LSC = 64

CERT_ROOT_PROGRAM_FLAG_ORG = 128

CERT_ROOT_PROGRAM_FLAG_SUBJECT_LOGO = 32

end
enum CRYPT_XML_KEY_VALUE_TYPE : UInt32
CRYPT_XML_KEY_VALUE_TYPE_DSA = 1

CRYPT_XML_KEY_VALUE_TYPE_RSA = 2

CRYPT_XML_KEY_VALUE_TYPE_ECDSA = 3

CRYPT_XML_KEY_VALUE_TYPE_CUSTOM = 4

end
enum CERT_LOGOTYPE_CHOICE : UInt32
CERT_LOGOTYPE_NO_IMAGE_RESOLUTION_CHOICE = 0

CERT_LOGOTYPE_BITS_IMAGE_RESOLUTION_CHOICE = 1

CERT_LOGOTYPE_TABLE_SIZE_IMAGE_RESOLUTION_CHOICE = 2

end
enum CMSG_KEY_AGREE_OPTION : UInt32
CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE = 1

CMSG_KEY_AGREE_STATIC_KEY_CHOICE = 2

end
enum CERT_LOGOTYPE_OPTION : UInt32
CERT_LOGOTYPE_DIRECT_INFO_CHOICE = 1

CERT_LOGOTYPE_INDIRECT_INFO_CHOICE = 2

end
enum CERT_STORE_PROV_FLAGS : UInt32
CERT_STORE_PROV_EXTERNAL_FLAG = 1

CERT_STORE_PROV_DELETED_FLAG = 2

CERT_STORE_PROV_NO_PERSIST_FLAG = 4

CERT_STORE_PROV_SYSTEM_STORE_FLAG = 8

CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG = 16

end
enum CMSG_KEY_AGREE_ORIGINATOR : UInt32
CMSG_KEY_AGREE_ORIGINATOR_CERT = 1

CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY = 2

end
enum CRYPT_CONTEXT_CONFIG_FLAGS : UInt32
CRYPT_EXCLUSIVE = 1

CRYPT_OVERRIDE = 65536

end
enum BCRYPT_DSA_MAGIC : UInt32
BCRYPT_DSA_PUBLIC_MAGIC = 1112560452

BCRYPT_DSA_PRIVATE_MAGIC = 1448104772

end
enum CRYPT_XML_X509DATA_TYPE : UInt32
CRYPT_XML_X509DATA_TYPE_ISSUER_SERIAL = 1

CRYPT_XML_X509DATA_TYPE_SKI = 2

CRYPT_XML_X509DATA_TYPE_SUBJECT_NAME = 3

CRYPT_XML_X509DATA_TYPE_CERTIFICATE = 4

CRYPT_XML_X509DATA_TYPE_CRL = 5

CRYPT_XML_X509DATA_TYPE_CUSTOM = 6

end
enum CERT_BIOMETRIC_DATA_TYPE : UInt32
CERT_BIOMETRIC_PREDEFINED_DATA_CHOICE = 1

CERT_BIOMETRIC_OID_DATA_CHOICE = 2

end
enum CERT_CHAIN_POLICY_FLAGS : UInt32
CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG = 1

CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG = 2

CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG = 4

CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS = 7

CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG = 8

CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG = 16

CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG = 32

CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG = 64

CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG = 128

CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG = 256

CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG = 512

CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG = 1024

CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG = 2048

CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS = 3840

CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG = 32768

CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG = 16384

CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG = 8192

CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG = 4096

end
enum CERT_STRONG_SIGN_FLAGS : UInt32
CERT_STRONG_SIGN_ENABLE_CRL_CHECK = 1

CERT_STRONG_SIGN_ENABLE_OCSP_CHECK = 2

end
enum CERT_LOGOTYPE_IMAGE_INFO_TYPE : UInt32
CERT_LOGOTYPE_GRAY_SCALE_IMAGE_INFO_CHOICE = 1

CERT_LOGOTYPE_COLOR_IMAGE_INFO_CHOICE = 2

end
enum CRYPT_XML_STATUS_INFO_STATUS : UInt32
CRYPT_XML_STATUS_INTERNAL_REFERENCE = 1

CRYPT_XML_STATUS_KEY_AVAILABLE = 2

CRYPT_XML_STATUS_DIGESTING = 4

CRYPT_XML_STATUS_DIGEST_VALID = 8

CRYPT_XML_STATUS_SIGNATURE_VALID = 65536

CRYPT_XML_STATUS_OPENED_TO_ENCODE = 2147483648

end
enum CRYPT_XML_TRANSFORM_FLAGS : UInt32
CRYPT_XML_TRANSFORM_ON_STREAM = 1

CRYPT_XML_TRANSFORM_ON_NODESET = 2

CRYPT_XML_TRANSFORM_URI_QUERY_STRING = 3

end
enum CRYPT_XML_GROUP_ID : UInt32
CRYPT_XML_GROUP_ID_HASH_________ = 1

CRYPT_XML_GROUP_ID_SIGN_________ = 2

end
enum CERT_SELECT_CRITERIA_TYPE : UInt32
CERT_SELECT_BY_ENHKEY_USAGE = 1

CERT_SELECT_BY_KEY_USAGE = 2

CERT_SELECT_BY_POLICY_OID = 3

CERT_SELECT_BY_PROV_NAME = 4

CERT_SELECT_BY_EXTENSION = 5

CERT_SELECT_BY_SUBJECT_HOST_NAME = 6

CERT_SELECT_BY_ISSUER_ATTR = 7

CERT_SELECT_BY_SUBJECT_ATTR = 8

CERT_SELECT_BY_ISSUER_NAME = 9

CERT_SELECT_BY_PUBLIC_KEY = 10

CERT_SELECT_BY_TLS_SIGNATURES = 11

end
enum BCRYPT_RSAKEY_BLOB_MAGIC : UInt32
BCRYPT_RSAPUBLIC_MAGIC = 826364754

BCRYPT_RSAPRIVATE_MAGIC = 843141970

BCRYPT_RSAFULLPRIVATE_MAGIC = 859919186

end
enum CRYPT_XML_KEYINFO_TYPE : UInt32
CRYPT_XML_KEYINFO_TYPE_KEYNAME = 1

CRYPT_XML_KEYINFO_TYPE_KEYVALUE = 2

CRYPT_XML_KEYINFO_TYPE_RETRIEVAL = 3

CRYPT_XML_KEYINFO_TYPE_X509DATA = 4

CRYPT_XML_KEYINFO_TYPE_CUSTOM = 5

end
enum CRYPT_TIMESTAMP_VERSION : UInt32
TIMESTAMP_VERSION = 1

end
enum CERT_ID_OPTION : UInt32
CERT_ID_ISSUER_SERIAL_NUMBER = 1

CERT_ID_KEY_IDENTIFIER = 2

CERT_ID_SHA1_HASH = 3

end
enum HTTPSPOLICY_CALLBACK_DATA_AUTH_TYPE : UInt32
AUTHTYPE_CLIENT = 1

AUTHTYPE_SERVER = 2

end
enum BCRYPT_DH_KEY_BLOB_MAGIC : UInt32
BCRYPT_DH_PUBLIC_MAGIC = 1112557636

BCRYPT_DH_PRIVATE_MAGIC = 1448101956

end
enum CRYPT_XML_STATUS_ERROR_STATUS : UInt32
CRYPT_XML_STATUS_ERROR_NOT_RESOLVED = 1

CRYPT_XML_STATUS_ERROR_DIGEST_INVALID = 2

CRYPT_XML_STATUS_ERROR_NOT_SUPPORTED_ALGORITHM = 5

CRYPT_XML_STATUS_ERROR_NOT_SUPPORTED_TRANSFORM = 8

CRYPT_XML_STATUS_ERROR_SIGNATURE_INVALID = 65536

CRYPT_XML_STATUS_ERROR_KEYINFO_NOT_PARSED = 131072

end
enum CRYPT_TIMESTAMP_RESPONSE_STATUS : UInt32
TIMESTAMP_STATUS_GRANTED = 0

TIMESTAMP_STATUS_GRANTED_WITH_MODS = 1

TIMESTAMP_STATUS_REJECTED = 2

TIMESTAMP_STATUS_WAITING = 3

TIMESTAMP_STATUS_REVOCATION_WARNING = 4

TIMESTAMP_STATUS_REVOKED = 5

end
enum NCRYPT_ALGORITHM_NAME_CLASS : UInt32
NCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3

NCRYPT_SECRET_AGREEMENT_INTERFACE = 4

NCRYPT_SIGNATURE_INTERFACE = 5

end
type HCRYPTASYNC = LibC::Int*
type HCERTCHAINENGINE = LibC::Int*
type BCRYPT_ALG_HANDLE = LibC::Int*
type BCRYPT_KEY_HANDLE = LibC::Int*
struct CMS_KEY_INFO
  dwVersion : LibC::UInt32
  algid : LibC::UInt32
  pbOID : LibC::Byte*
  cbOID : LibC::UInt32
end
struct HMAC_Info
  hashAlgid : LibC::UInt32
  pbInnerString : LibC::Byte*
  cbInnerString : LibC::UInt32
  pbOuterString : LibC::Byte*
  cbOuterString : LibC::UInt32
end
struct SCHANNEL_ALG
  dwUse : LibC::UInt32
  algid : LibC::UInt32
  cBits : LibC::UInt32
  dwFlags : LibC::UInt32
  dwReserved : LibC::UInt32
end
struct PROV_ENUMALGS
  aiAlgid : LibC::UInt32
  dwBitLen : LibC::UInt32
  dwNameLen : LibC::UInt32
  szName : Array(CHAR)
end
struct PROV_ENUMALGS_EX
  aiAlgid : LibC::UInt32
  dwDefaultLen : LibC::UInt32
  dwMinLen : LibC::UInt32
  dwMaxLen : LibC::UInt32
  dwProtocols : LibC::UInt32
  dwNameLen : LibC::UInt32
  szName : Array(CHAR)
  dwLongNameLen : LibC::UInt32
  szLongName : Array(CHAR)
end
struct PUBLICKEYSTRUC
  bType : LibC::Byte
  bVersion : LibC::Byte
  reserved : LibC::UInt16
  aiKeyAlg : LibC::UInt32
end
struct RSAPUBKEY
  magic : LibC::UInt32
  bitlen : LibC::UInt32
  pubexp : LibC::UInt32
end
struct PUBKEY
  magic : LibC::UInt32
  bitlen : LibC::UInt32
end
struct DSSSEED
  counter : LibC::UInt32
  seed : Array(LibC::Byte)
end
struct PUBKEYVER3
  magic : LibC::UInt32
  bitlenP : LibC::UInt32
  bitlenQ : LibC::UInt32
  bitlenJ : LibC::UInt32
  dSSSeed : DSSSEED
end
struct PRIVKEYVER3
  magic : LibC::UInt32
  bitlenP : LibC::UInt32
  bitlenQ : LibC::UInt32
  bitlenJ : LibC::UInt32
  bitlenX : LibC::UInt32
  dSSSeed : DSSSEED
end
struct KEY_TYPE_SUBTYPE
  dwKeySpec : LibC::UInt32
  type : LibC::Guid
  subtype : LibC::Guid
end
struct CERT_FORTEZZA_DATA_PROP
  serialNumber : Array(LibC::Byte)
  certIndex : LibC::Int32
  certLabel : Array(LibC::Byte)
end
struct CRYPT_RC4_KEY_STATE
  key : Array(LibC::Byte)
  sBox : Array(LibC::Byte)
  i : LibC::Byte
  j : LibC::Byte
end
struct CRYPT_DES_KEY_STATE
  key : Array(LibC::Byte)
  iV : Array(LibC::Byte)
  feedback : Array(LibC::Byte)
end
struct CRYPT_3DES_KEY_STATE
  key : Array(LibC::Byte)
  iV : Array(LibC::Byte)
  feedback : Array(LibC::Byte)
end
struct CRYPT_AES_128_KEY_STATE
  key : Array(LibC::Byte)
  iV : Array(LibC::Byte)
  encryptionState : Array(LibC::Byte)
  decryptionState : Array(LibC::Byte)
  feedback : Array(LibC::Byte)
end
struct CRYPT_AES_256_KEY_STATE
  key : Array(LibC::Byte)
  iV : Array(LibC::Byte)
  encryptionState : Array(LibC::Byte)
  decryptionState : Array(LibC::Byte)
  feedback : Array(LibC::Byte)
end
struct CRYPTOAPI_BLOB
  cbData : LibC::UInt32
  pbData : LibC::Byte*
end
struct CMS_DH_KEY_INFO
  dwVersion : LibC::UInt32
  algid : LibC::UInt32
  pszContentEncObjId : PSTR
  pubInfo : CRYPTOAPI_BLOB
  pReserved : LibC::Void*
end
struct BCRYPT_KEY_LENGTHS_STRUCT
  dwMinLength : LibC::UInt32
  dwMaxLength : LibC::UInt32
  dwIncrement : LibC::UInt32
end
struct BCRYPT_OID
  cbOID : LibC::UInt32
  pbOID : LibC::Byte*
end
struct BCRYPT_OID_LIST
  dwOIDCount : LibC::UInt32
  pOIDs : BCRYPT_OID*
end
struct BCRYPT_PKCS1_PADDING_INFO
  pszAlgId : PWSTR
end
struct BCRYPT_PSS_PADDING_INFO
  pszAlgId : PWSTR
  cbSalt : LibC::UInt32
end
struct BCRYPT_OAEP_PADDING_INFO
  pszAlgId : PWSTR
  pbLabel : LibC::Byte*
  cbLabel : LibC::UInt32
end
struct BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
  cbSize : LibC::UInt32
  dwInfoVersion : LibC::UInt32
  pbNonce : LibC::Byte*
  cbNonce : LibC::UInt32
  pbAuthData : LibC::Byte*
  cbAuthData : LibC::UInt32
  pbTag : LibC::Byte*
  cbTag : LibC::UInt32
  pbMacContext : LibC::Byte*
  cbMacContext : LibC::UInt32
  cbAAD : LibC::UInt32
  cbData : LibC::UInt64
  dwFlags : LibC::UInt32
end
struct BCryptBuffer
  cbBuffer : LibC::UInt32
  bufferType : LibC::UInt32
  pvBuffer : LibC::Void*
end
struct BCryptBufferDesc
  ulVersion : LibC::UInt32
  cBuffers : LibC::UInt32
  pBuffers : BCryptBuffer*
end
struct BCRYPT_KEY_BLOB
  magic : LibC::UInt32
end
struct BCRYPT_RSAKEY_BLOB
  magic : BCRYPT_RSAKEY_BLOB_MAGIC
  bitLength : LibC::UInt32
  cbPublicExp : LibC::UInt32
  cbModulus : LibC::UInt32
  cbPrime1 : LibC::UInt32
  cbPrime2 : LibC::UInt32
end
struct BCRYPT_ECCKEY_BLOB
  dwMagic : LibC::UInt32
  cbKey : LibC::UInt32
end
struct SSL_ECCKEY_BLOB
  dwCurveType : LibC::UInt32
  cbKey : LibC::UInt32
end
enum ECC_CURVE_TYPE_ENUM : Int32
BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = 1

BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = 2

BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = 3

end
enum ECC_CURVE_ALG_ID_ENUM : Int32
BCRYPT_NO_CURVE_GENERATION_ALG_ID = 0

end
struct BCRYPT_ECCFULLKEY_BLOB
  dwMagic : LibC::UInt32
  dwVersion : LibC::UInt32
  dwCurveType : ECC_CURVE_TYPE_ENUM
  dwCurveGenerationAlgId : ECC_CURVE_ALG_ID_ENUM
  cbFieldLength : LibC::UInt32
  cbSubgroupOrder : LibC::UInt32
  cbCofactor : LibC::UInt32
  cbSeed : LibC::UInt32
end
struct BCRYPT_DH_KEY_BLOB
  dwMagic : BCRYPT_DH_KEY_BLOB_MAGIC
  cbKey : LibC::UInt32
end
struct BCRYPT_DH_PARAMETER_HEADER
  cbLength : LibC::UInt32
  dwMagic : LibC::UInt32
  cbKeyLength : LibC::UInt32
end
struct BCRYPT_DSA_KEY_BLOB
  dwMagic : BCRYPT_DSA_MAGIC
  cbKey : LibC::UInt32
  count : Array(LibC::Byte)
  seed : Array(LibC::Byte)
  q : Array(LibC::Byte)
end
enum HASHALGORITHM_ENUM : Int32
DSA_HASH_ALGORITHM_SHA1 = 0

DSA_HASH_ALGORITHM_SHA256 = 1

DSA_HASH_ALGORITHM_SHA512 = 2

end
enum DSAFIPSVERSION_ENUM : Int32
DSA_FIPS186_2 = 0

DSA_FIPS186_3 = 1

end
struct BCRYPT_DSA_KEY_BLOB_V2
  dwMagic : BCRYPT_DSA_MAGIC
  cbKey : LibC::UInt32
  hashAlgorithm : HASHALGORITHM_ENUM
  standardVersion : DSAFIPSVERSION_ENUM
  cbSeedLength : LibC::UInt32
  cbGroupSize : LibC::UInt32
  count : Array(LibC::Byte)
end
struct BCRYPT_KEY_DATA_BLOB_HEADER
  dwMagic : LibC::UInt32
  dwVersion : LibC::UInt32
  cbKeyData : LibC::UInt32
end
struct BCRYPT_DSA_PARAMETER_HEADER
  cbLength : LibC::UInt32
  dwMagic : LibC::UInt32
  cbKeyLength : LibC::UInt32
  count : Array(LibC::Byte)
  seed : Array(LibC::Byte)
  q : Array(LibC::Byte)
end
struct BCRYPT_DSA_PARAMETER_HEADER_V2
  cbLength : LibC::UInt32
  dwMagic : LibC::UInt32
  cbKeyLength : LibC::UInt32
  hashAlgorithm : HASHALGORITHM_ENUM
  standardVersion : DSAFIPSVERSION_ENUM
  cbSeedLength : LibC::UInt32
  cbGroupSize : LibC::UInt32
  count : Array(LibC::Byte)
end
struct BCRYPT_ECC_CURVE_NAMES
  dwEccCurveNames : LibC::UInt32
  pEccCurveNames : PWSTR*
end
enum BCRYPT_HASH_OPERATION_TYPE : Int32
BCRYPT_HASH_OPERATION_HASH_DATA = 1

BCRYPT_HASH_OPERATION_FINISH_HASH = 2

end
struct BCRYPT_MULTI_HASH_OPERATION
  iHash : LibC::UInt32
  hashOperation : BCRYPT_HASH_OPERATION_TYPE
  pbBuffer : LibC::Byte*
  cbBuffer : LibC::UInt32
end
enum BCRYPT_MULTI_OPERATION_TYPE : Int32
BCRYPT_OPERATION_TYPE_HASH = 1

end
struct BCRYPT_MULTI_OBJECT_LENGTH_STRUCT
  cbPerObject : LibC::UInt32
  cbPerElement : LibC::UInt32
end
struct BCRYPT_ALGORITHM_IDENTIFIER
  pszName : PWSTR
  dwClass : LibC::UInt32
  dwFlags : LibC::UInt32
end
struct BCRYPT_PROVIDER_NAME
  pszProviderName : PWSTR
end
struct BCRYPT_INTERFACE_VERSION
  majorVersion : LibC::UInt16
  minorVersion : LibC::UInt16
end
struct CRYPT_INTERFACE_REG
  dwInterface : BCRYPT_INTERFACE
  dwFlags : BCRYPT_TABLE
  cFunctions : LibC::UInt32
  rgpszFunctions : PWSTR*
end
struct CRYPT_IMAGE_REG
  pszImage : PWSTR
  cInterfaces : LibC::UInt32
  rgpInterfaces : CRYPT_INTERFACE_REG**
end
struct CRYPT_PROVIDER_REG
  cAliases : LibC::UInt32
  rgpszAliases : PWSTR*
  pUM : CRYPT_IMAGE_REG*
  pKM : CRYPT_IMAGE_REG*
end
struct CRYPT_PROVIDERS
  cProviders : LibC::UInt32
  rgpszProviders : PWSTR*
end
struct CRYPT_CONTEXT_CONFIG
  dwFlags : CRYPT_CONTEXT_CONFIG_FLAGS
  dwReserved : LibC::UInt32
end
struct CRYPT_CONTEXT_FUNCTION_CONFIG
  dwFlags : LibC::UInt32
  dwReserved : LibC::UInt32
end
struct CRYPT_CONTEXTS
  cContexts : LibC::UInt32
  rgpszContexts : PWSTR*
end
struct CRYPT_CONTEXT_FUNCTIONS
  cFunctions : LibC::UInt32
  rgpszFunctions : PWSTR*
end
struct CRYPT_CONTEXT_FUNCTION_PROVIDERS
  cProviders : LibC::UInt32
  rgpszProviders : PWSTR*
end
struct CRYPT_PROPERTY_REF
  pszProperty : PWSTR
  cbValue : LibC::UInt32
  pbValue : LibC::Byte*
end
struct CRYPT_IMAGE_REF
  pszImage : PWSTR
  dwFlags : CRYPT_IMAGE_REF_FLAGS
end
struct CRYPT_PROVIDER_REF
  dwInterface : LibC::UInt32
  pszFunction : PWSTR
  pszProvider : PWSTR
  cProperties : LibC::UInt32
  rgpProperties : CRYPT_PROPERTY_REF**
  pUM : CRYPT_IMAGE_REF*
  pKM : CRYPT_IMAGE_REF*
end
struct CRYPT_PROVIDER_REFS
  cProviders : LibC::UInt32
  rgpProviders : CRYPT_PROVIDER_REF**
end
alias PFN_NCRYPT_ALLOC = (LibC::UIint* -> LibC::Void*)
alias PFN_NCRYPT_FREE = (LibC::Void* -> LibC::Void)
struct NCRYPT_ALLOC_PARA
  cbSize : LibC::UInt32
  pfnAlloc : PFN_NCRYPT_ALLOC
  pfnFree : PFN_NCRYPT_FREE
end
struct NCRYPT_CIPHER_PADDING_INFO
  cbSize : LibC::UInt32
  dwFlags : LibC::UInt32
  pbIV : LibC::Byte*
  cbIV : LibC::UInt32
  pbOtherInfo : LibC::Byte*
  cbOtherInfo : LibC::UInt32
end
struct NCRYPT_PLATFORM_ATTEST_PADDING_INFO
  magic : LibC::UInt32
  pcrMask : LibC::UInt32
end
struct NCRYPT_KEY_ATTEST_PADDING_INFO
  magic : LibC::UInt32
  pbKeyBlob : LibC::Byte*
  cbKeyBlob : LibC::UInt32
  pbKeyAuth : LibC::Byte*
  cbKeyAuth : LibC::UInt32
end
struct NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES
  version : LibC::UInt32
  flags : LibC::UInt32
  cbPublicKeyBlob : LibC::UInt32
end
struct NCRYPT_VSM_KEY_ATTESTATION_STATEMENT
  magic : LibC::UInt32
  version : LibC::UInt32
  cbSignature : LibC::UInt32
  cbReport : LibC::UInt32
  cbAttributes : LibC::UInt32
end
struct NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS
  version : LibC::UInt32
  trustletId : LibC::UInt64
  minSvn : LibC::UInt32
  flagsMask : LibC::UInt32
  flagsExpected : LibC::UInt32
  bitfield : LibC::UInt32
end
struct NCRYPT_EXPORTED_ISOLATED_KEY_HEADER
  version : LibC::UInt32
  keyUsage : LibC::UInt32
  bitfield : LibC::UInt32
  cbAlgName : LibC::UInt32
  cbNonce : LibC::UInt32
  cbAuthTag : LibC::UInt32
  cbWrappingKey : LibC::UInt32
  cbIsolatedKey : LibC::UInt32
end
struct NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE
  header : NCRYPT_EXPORTED_ISOLATED_KEY_HEADER
end
struct NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT
  magic : LibC::UInt32
  version : LibC::UInt32
  headerSize : LibC::UInt32
  cbCertifyInfo : LibC::UInt32
  cbSignature : LibC::UInt32
  cbTpmPublic : LibC::UInt32
end
struct NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT
  magic : LibC::UInt32
  version : LibC::UInt32
  pcrAlg : LibC::UInt32
  cbSignature : LibC::UInt32
  cbQuote : LibC::UInt32
  cbPcrs : LibC::UInt32
end
struct NCryptAlgorithmName
  pszName : PWSTR
  dwClass : NCRYPT_ALGORITHM_NAME_CLASS
  dwAlgOperations : NCRYPT_OPERATION
  dwFlags : LibC::UInt32
end
struct NCryptKeyName
  pszName : PWSTR
  pszAlgid : PWSTR
  dwLegacyKeySpec : CERT_KEY_SPEC
  dwFlags : LibC::UInt32
end
struct NCryptProviderName
  pszName : PWSTR
  pszComment : PWSTR
end
struct NCRYPT_UI_POLICY
  dwVersion : LibC::UInt32
  dwFlags : LibC::UInt32
  pszCreationTitle : PWSTR
  pszFriendlyName : PWSTR
  pszDescription : PWSTR
end
struct NCRYPT_KEY_ACCESS_POLICY_BLOB
  dwVersion : LibC::UInt32
  dwPolicyFlags : LibC::UInt32
  cbUserSid : LibC::UInt32
  cbApplicationSid : LibC::UInt32
end
struct NCRYPT_SUPPORTED_LENGTHS
  dwMinLength : LibC::UInt32
  dwMaxLength : LibC::UInt32
  dwIncrement : LibC::UInt32
  dwDefaultLength : LibC::UInt32
end
struct NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO
  dwVersion : LibC::UInt32
  iExpiration : LibC::Int32
  pabNonce : Array(LibC::Byte)
  pabPolicyRef : Array(LibC::Byte)
  pabHMAC : Array(LibC::Byte)
end
struct NCRYPT_PCP_TPM_FW_VERSION_INFO
  major1 : LibC::UInt16
  major2 : LibC::UInt16
  minor1 : LibC::UInt16
  minor2 : LibC::UInt16
end
struct NCRYPT_PCP_RAW_POLICYDIGEST
  dwVersion : LibC::UInt32
  cbDigest : LibC::UInt32
end
struct NCRYPT_KEY_BLOB_HEADER
  cbSize : LibC::UInt32
  dwMagic : LibC::UInt32
  cbAlgName : LibC::UInt32
  cbKeyData : LibC::UInt32
end
struct NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER
  magic : LibC::UInt32
  cbHeader : LibC::UInt32
  cbPublic : LibC::UInt32
  cbPrivate : LibC::UInt32
  cbName : LibC::UInt32
end
struct CRYPT_BIT_BLOB
  cbData : LibC::UInt32
  pbData : LibC::Byte*
  cUnusedBits : LibC::UInt32
end
struct CRYPT_ALGORITHM_IDENTIFIER
  pszObjId : PSTR
  parameters : CRYPTOAPI_BLOB
end
struct CRYPT_OBJID_TABLE
  dwAlgId : LibC::UInt32
  pszObjId : PSTR
end
struct CRYPT_HASH_INFO
  hashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  hash : CRYPTOAPI_BLOB
end
struct CERT_EXTENSION
  pszObjId : PSTR
  fCritical : BOOL
  value : CRYPTOAPI_BLOB
end
struct CRYPT_ATTRIBUTE_TYPE_VALUE
  pszObjId : PSTR
  value : CRYPTOAPI_BLOB
end
struct CRYPT_ATTRIBUTE
  pszObjId : PSTR
  cValue : LibC::UInt32
  rgValue : CRYPTOAPI_BLOB*
end
struct CRYPT_ATTRIBUTES
  cAttr : LibC::UInt32
  rgAttr : CRYPT_ATTRIBUTE*
end
struct CERT_RDN_ATTR
  pszObjId : PSTR
  dwValueType : CERT_RDN_ATTR_VALUE_TYPE
  value : CRYPTOAPI_BLOB
end
struct CERT_RDN
  cRDNAttr : LibC::UInt32
  rgRDNAttr : CERT_RDN_ATTR*
end
struct CERT_NAME_INFO
  cRDN : LibC::UInt32
  rgRDN : CERT_RDN*
end
struct CERT_NAME_VALUE
  dwValueType : LibC::UInt32
  value : CRYPTOAPI_BLOB
end
struct CERT_PUBLIC_KEY_INFO
  algorithm : CRYPT_ALGORITHM_IDENTIFIER
  publicKey : CRYPT_BIT_BLOB
end
struct CRYPT_ECC_PRIVATE_KEY_INFO
  dwVersion : LibC::UInt32
  privateKey : CRYPTOAPI_BLOB
  szCurveOid : PSTR
  publicKey : CRYPT_BIT_BLOB
end
struct CRYPT_PRIVATE_KEY_INFO
  version : LibC::UInt32
  algorithm : CRYPT_ALGORITHM_IDENTIFIER
  privateKey : CRYPTOAPI_BLOB
  pAttributes : CRYPT_ATTRIBUTES*
end
struct CRYPT_ENCRYPTED_PRIVATE_KEY_INFO
  encryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  encryptedPrivateKey : CRYPTOAPI_BLOB
end
alias PCRYPT_DECRYPT_PRIVATE_KEY_FUNC = (CRYPT_ALGORITHM_IDENTIFIER, CRYPTOAPI_BLOB, LibC::Byte*, LibC::UInt32*, LibC::Void* -> BOOL)
alias PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC = (CRYPT_ALGORITHM_IDENTIFIER*, CRYPTOAPI_BLOB*, LibC::Byte*, LibC::UInt32*, LibC::Void* -> BOOL)
alias PCRYPT_RESOLVE_HCRYPTPROV_FUNC = (CRYPT_PRIVATE_KEY_INFO*, LibC::UIint**, LibC::Void* -> BOOL)
struct CRYPT_PKCS8_IMPORT_PARAMS
  privateKey : CRYPTOAPI_BLOB
  pResolvehCryptProvFunc : PCRYPT_RESOLVE_HCRYPTPROV_FUNC
  pVoidResolveFunc : LibC::Void*
  pDecryptPrivateKeyFunc : PCRYPT_DECRYPT_PRIVATE_KEY_FUNC
  pVoidDecryptFunc : LibC::Void*
end
struct CRYPT_PKCS8_EXPORT_PARAMS
  hCryptProv : LibC::UIint*
  dwKeySpec : LibC::UInt32
  pszPrivateKeyObjId : PSTR
  pEncryptPrivateKeyFunc : PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC
  pVoidEncryptFunc : LibC::Void*
end
struct CERT_INFO
  dwVersion : LibC::UInt32
  serialNumber : CRYPTOAPI_BLOB
  signatureAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  issuer : CRYPTOAPI_BLOB
  notBefore : FILETIME
  notAfter : FILETIME
  subject : CRYPTOAPI_BLOB
  subjectPublicKeyInfo : CERT_PUBLIC_KEY_INFO
  issuerUniqueId : CRYPT_BIT_BLOB
  subjectUniqueId : CRYPT_BIT_BLOB
  cExtension : LibC::UInt32
  rgExtension : CERT_EXTENSION*
end
struct CRL_ENTRY
  serialNumber : CRYPTOAPI_BLOB
  revocationDate : FILETIME
  cExtension : LibC::UInt32
  rgExtension : CERT_EXTENSION*
end
struct CRL_INFO
  dwVersion : LibC::UInt32
  signatureAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  issuer : CRYPTOAPI_BLOB
  thisUpdate : FILETIME
  nextUpdate : FILETIME
  cCRLEntry : LibC::UInt32
  rgCRLEntry : CRL_ENTRY*
  cExtension : LibC::UInt32
  rgExtension : CERT_EXTENSION*
end
struct CERT_OR_CRL_BLOB
  dwChoice : LibC::UInt32
  cbEncoded : LibC::UInt32
  pbEncoded : LibC::Byte*
end
struct CERT_OR_CRL_BUNDLE
  cItem : LibC::UInt32
  rgItem : CERT_OR_CRL_BLOB*
end
struct CERT_REQUEST_INFO
  dwVersion : LibC::UInt32
  subject : CRYPTOAPI_BLOB
  subjectPublicKeyInfo : CERT_PUBLIC_KEY_INFO
  cAttribute : LibC::UInt32
  rgAttribute : CRYPT_ATTRIBUTE*
end
struct CERT_KEYGEN_REQUEST_INFO
  dwVersion : LibC::UInt32
  subjectPublicKeyInfo : CERT_PUBLIC_KEY_INFO
  pwszChallengeString : PWSTR
end
struct CERT_SIGNED_CONTENT_INFO
  toBeSigned : CRYPTOAPI_BLOB
  signatureAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  signature : CRYPT_BIT_BLOB
end
struct CTL_USAGE
  cUsageIdentifier : LibC::UInt32
  rgpszUsageIdentifier : PSTR*
end
struct CTL_ENTRY
  subjectIdentifier : CRYPTOAPI_BLOB
  cAttribute : LibC::UInt32
  rgAttribute : CRYPT_ATTRIBUTE*
end
struct CTL_INFO
  dwVersion : LibC::UInt32
  subjectUsage : CTL_USAGE
  listIdentifier : CRYPTOAPI_BLOB
  sequenceNumber : CRYPTOAPI_BLOB
  thisUpdate : FILETIME
  nextUpdate : FILETIME
  subjectAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  cCTLEntry : LibC::UInt32
  rgCTLEntry : CTL_ENTRY*
  cExtension : LibC::UInt32
  rgExtension : CERT_EXTENSION*
end
struct CRYPT_TIME_STAMP_REQUEST_INFO
  pszTimeStampAlgorithm : PSTR
  pszContentType : PSTR
  content : CRYPTOAPI_BLOB
  cAttribute : LibC::UInt32
  rgAttribute : CRYPT_ATTRIBUTE*
end
struct CRYPT_ENROLLMENT_NAME_VALUE_PAIR
  pwszName : PWSTR
  pwszValue : PWSTR
end
struct CRYPT_CSP_PROVIDER
  dwKeySpec : LibC::UInt32
  pwszProviderName : PWSTR
  signature : CRYPT_BIT_BLOB
end
alias PFN_CRYPT_ALLOC = (LibC::UIint* -> LibC::Void*)
alias PFN_CRYPT_FREE = (LibC::Void* -> LibC::Void)
struct CRYPT_ENCODE_PARA
  cbSize : LibC::UInt32
  pfnAlloc : PFN_CRYPT_ALLOC
  pfnFree : PFN_CRYPT_FREE
end
struct CRYPT_DECODE_PARA
  cbSize : LibC::UInt32
  pfnAlloc : PFN_CRYPT_ALLOC
  pfnFree : PFN_CRYPT_FREE
end
struct CERT_EXTENSIONS
  cExtension : LibC::UInt32
  rgExtension : CERT_EXTENSION*
end
struct CERT_AUTHORITY_KEY_ID_INFO
  keyId : CRYPTOAPI_BLOB
  certIssuer : CRYPTOAPI_BLOB
  certSerialNumber : CRYPTOAPI_BLOB
end
struct CERT_PRIVATE_KEY_VALIDITY
  notBefore : FILETIME
  notAfter : FILETIME
end
struct CERT_KEY_ATTRIBUTES_INFO
  keyId : CRYPTOAPI_BLOB
  intendedKeyUsage : CRYPT_BIT_BLOB
  pPrivateKeyUsagePeriod : CERT_PRIVATE_KEY_VALIDITY*
end
struct CERT_POLICY_ID
  cCertPolicyElementId : LibC::UInt32
  rgpszCertPolicyElementId : PSTR*
end
struct CERT_KEY_USAGE_RESTRICTION_INFO
  cCertPolicyId : LibC::UInt32
  rgCertPolicyId : CERT_POLICY_ID*
  restrictedKeyUsage : CRYPT_BIT_BLOB
end
struct CERT_OTHER_NAME
  pszObjId : PSTR
  value : CRYPTOAPI_BLOB
end
type Bird05c3eb613d89 = CERT_OTHER_NAME* | PWSTR | PWSTR | CRYPTOAPI_BLOB | PWSTR | CRYPTOAPI_BLOB | PSTR
struct CERT_ALT_NAME_ENTRY
  dwAltNameChoice : LibC::UInt32
end
struct CERT_ALT_NAME_INFO
  cAltEntry : LibC::UInt32
  rgAltEntry : CERT_ALT_NAME_ENTRY*
end
struct CERT_BASIC_CONSTRAINTS_INFO
  subjectType : CRYPT_BIT_BLOB
  fPathLenConstraint : BOOL
  dwPathLenConstraint : LibC::UInt32
  cSubtreesConstraint : LibC::UInt32
  rgSubtreesConstraint : CRYPTOAPI_BLOB*
end
struct CERT_BASIC_CONSTRAINTS2_INFO
  fCA : BOOL
  fPathLenConstraint : BOOL
  dwPathLenConstraint : LibC::UInt32
end
struct CERT_POLICY_QUALIFIER_INFO
  pszPolicyQualifierId : PSTR
  qualifier : CRYPTOAPI_BLOB
end
struct CERT_POLICY_INFO
  pszPolicyIdentifier : PSTR
  cPolicyQualifier : LibC::UInt32
  rgPolicyQualifier : CERT_POLICY_QUALIFIER_INFO*
end
struct CERT_POLICIES_INFO
  cPolicyInfo : LibC::UInt32
  rgPolicyInfo : CERT_POLICY_INFO*
end
struct CERT_POLICY_QUALIFIER_NOTICE_REFERENCE
  pszOrganization : PSTR
  cNoticeNumbers : LibC::UInt32
  rgNoticeNumbers : LibC::Int32*
end
struct CERT_POLICY_QUALIFIER_USER_NOTICE
  pNoticeReference : CERT_POLICY_QUALIFIER_NOTICE_REFERENCE*
  pszDisplayText : PWSTR
end
struct CPS_URLS
  pszURL : PWSTR
  pAlgorithm : CRYPT_ALGORITHM_IDENTIFIER*
  pDigest : CRYPTOAPI_BLOB*
end
struct CERT_POLICY95_QUALIFIER1
  pszPracticesReference : PWSTR
  pszNoticeIdentifier : PSTR
  pszNSINoticeIdentifier : PSTR
  cCPSURLs : LibC::UInt32
  rgCPSURLs : CPS_URLS*
end
struct CERT_POLICY_MAPPING
  pszIssuerDomainPolicy : PSTR
  pszSubjectDomainPolicy : PSTR
end
struct CERT_POLICY_MAPPINGS_INFO
  cPolicyMapping : LibC::UInt32
  rgPolicyMapping : CERT_POLICY_MAPPING*
end
struct CERT_POLICY_CONSTRAINTS_INFO
  fRequireExplicitPolicy : BOOL
  dwRequireExplicitPolicySkipCerts : LibC::UInt32
  fInhibitPolicyMapping : BOOL
  dwInhibitPolicyMappingSkipCerts : LibC::UInt32
end
struct CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY
  pszObjId : PSTR
  cValue : LibC::UInt32
  rgValue : CRYPTOAPI_BLOB*
end
struct CRYPT_CONTENT_INFO
  pszObjId : PSTR
  content : CRYPTOAPI_BLOB
end
struct CRYPT_SEQUENCE_OF_ANY
  cValue : LibC::UInt32
  rgValue : CRYPTOAPI_BLOB*
end
struct CERT_AUTHORITY_KEY_ID2_INFO
  keyId : CRYPTOAPI_BLOB
  authorityCertIssuer : CERT_ALT_NAME_INFO
  authorityCertSerialNumber : CRYPTOAPI_BLOB
end
struct CERT_ACCESS_DESCRIPTION
  pszAccessMethod : PSTR
  accessLocation : CERT_ALT_NAME_ENTRY
end
struct CERT_AUTHORITY_INFO_ACCESS
  cAccDescr : LibC::UInt32
  rgAccDescr : CERT_ACCESS_DESCRIPTION*
end
type Owl718078bd1ccc = CERT_ALT_NAME_INFO
struct CRL_DIST_POINT_NAME
  dwDistPointNameChoice : LibC::UInt32
end
struct CRL_DIST_POINT
  distPointName : CRL_DIST_POINT_NAME
  reasonFlags : CRYPT_BIT_BLOB
  cRLIssuer : CERT_ALT_NAME_INFO
end
struct CRL_DIST_POINTS_INFO
  cDistPoint : LibC::UInt32
  rgDistPoint : CRL_DIST_POINT*
end
struct CROSS_CERT_DIST_POINTS_INFO
  dwSyncDeltaTime : LibC::UInt32
  cDistPoint : LibC::UInt32
  rgDistPoint : CERT_ALT_NAME_INFO*
end
struct CERT_PAIR
  forward : CRYPTOAPI_BLOB
  reverse : CRYPTOAPI_BLOB
end
struct CRL_ISSUING_DIST_POINT
  distPointName : CRL_DIST_POINT_NAME
  fOnlyContainsUserCerts : BOOL
  fOnlyContainsCACerts : BOOL
  onlySomeReasonFlags : CRYPT_BIT_BLOB
  fIndirectCRL : BOOL
end
struct CERT_GENERAL_SUBTREE
  base : CERT_ALT_NAME_ENTRY
  dwMinimum : LibC::UInt32
  fMaximum : BOOL
  dwMaximum : LibC::UInt32
end
struct CERT_NAME_CONSTRAINTS_INFO
  cPermittedSubtree : LibC::UInt32
  rgPermittedSubtree : CERT_GENERAL_SUBTREE*
  cExcludedSubtree : LibC::UInt32
  rgExcludedSubtree : CERT_GENERAL_SUBTREE*
end
struct CERT_DSS_PARAMETERS
  p : CRYPTOAPI_BLOB
  q : CRYPTOAPI_BLOB
  g : CRYPTOAPI_BLOB
end
struct CERT_DH_PARAMETERS
  p : CRYPTOAPI_BLOB
  g : CRYPTOAPI_BLOB
end
struct CERT_ECC_SIGNATURE
  r : CRYPTOAPI_BLOB
  s : CRYPTOAPI_BLOB
end
struct CERT_X942_DH_VALIDATION_PARAMS
  seed : CRYPT_BIT_BLOB
  pgenCounter : LibC::UInt32
end
struct CERT_X942_DH_PARAMETERS
  p : CRYPTOAPI_BLOB
  g : CRYPTOAPI_BLOB
  q : CRYPTOAPI_BLOB
  j : CRYPTOAPI_BLOB
  pValidationParams : CERT_X942_DH_VALIDATION_PARAMS*
end
struct CRYPT_X942_OTHER_INFO
  pszContentEncryptionObjId : PSTR
  rgbCounter : Array(LibC::Byte)
  rgbKeyLength : Array(LibC::Byte)
  pubInfo : CRYPTOAPI_BLOB
end
struct CRYPT_ECC_CMS_SHARED_INFO
  algorithm : CRYPT_ALGORITHM_IDENTIFIER
  entityUInfo : CRYPTOAPI_BLOB
  rgbSuppPubInfo : Array(LibC::Byte)
end
struct CRYPT_RC2_CBC_PARAMETERS
  dwVersion : LibC::UInt32
  fIV : BOOL
  rgbIV : Array(LibC::Byte)
end
struct CRYPT_SMIME_CAPABILITY
  pszObjId : PSTR
  parameters : CRYPTOAPI_BLOB
end
struct CRYPT_SMIME_CAPABILITIES
  cCapability : LibC::UInt32
  rgCapability : CRYPT_SMIME_CAPABILITY*
end
struct CERT_QC_STATEMENT
  pszStatementId : PSTR
  statementInfo : CRYPTOAPI_BLOB
end
struct CERT_QC_STATEMENTS_EXT_INFO
  cStatement : LibC::UInt32
  rgStatement : CERT_QC_STATEMENT*
end
struct CRYPT_MASK_GEN_ALGORITHM
  pszObjId : PSTR
  hashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
end
struct CRYPT_RSA_SSA_PSS_PARAMETERS
  hashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  maskGenAlgorithm : CRYPT_MASK_GEN_ALGORITHM
  dwSaltLength : LibC::UInt32
  dwTrailerField : LibC::UInt32
end
struct CRYPT_PSOURCE_ALGORITHM
  pszObjId : PSTR
  encodingParameters : CRYPTOAPI_BLOB
end
struct CRYPT_RSAES_OAEP_PARAMETERS
  hashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  maskGenAlgorithm : CRYPT_MASK_GEN_ALGORITHM
  pSourceAlgorithm : CRYPT_PSOURCE_ALGORITHM
end
struct CMC_TAGGED_ATTRIBUTE
  dwBodyPartID : LibC::UInt32
  attribute : CRYPT_ATTRIBUTE
end
struct CMC_TAGGED_CERT_REQUEST
  dwBodyPartID : LibC::UInt32
  signedCertRequest : CRYPTOAPI_BLOB
end
type Other327a9bc2cdf7 = CMC_TAGGED_CERT_REQUEST*
struct CMC_TAGGED_REQUEST
  dwTaggedRequestChoice : LibC::UInt32
end
struct CMC_TAGGED_CONTENT_INFO
  dwBodyPartID : LibC::UInt32
  encodedContentInfo : CRYPTOAPI_BLOB
end
struct CMC_TAGGED_OTHER_MSG
  dwBodyPartID : LibC::UInt32
  pszObjId : PSTR
  value : CRYPTOAPI_BLOB
end
struct CMC_DATA_INFO
  cTaggedAttribute : LibC::UInt32
  rgTaggedAttribute : CMC_TAGGED_ATTRIBUTE*
  cTaggedRequest : LibC::UInt32
  rgTaggedRequest : CMC_TAGGED_REQUEST*
  cTaggedContentInfo : LibC::UInt32
  rgTaggedContentInfo : CMC_TAGGED_CONTENT_INFO*
  cTaggedOtherMsg : LibC::UInt32
  rgTaggedOtherMsg : CMC_TAGGED_OTHER_MSG*
end
struct CMC_RESPONSE_INFO
  cTaggedAttribute : LibC::UInt32
  rgTaggedAttribute : CMC_TAGGED_ATTRIBUTE*
  cTaggedContentInfo : LibC::UInt32
  rgTaggedContentInfo : CMC_TAGGED_CONTENT_INFO*
  cTaggedOtherMsg : LibC::UInt32
  rgTaggedOtherMsg : CMC_TAGGED_OTHER_MSG*
end
struct CMC_PEND_INFO
  pendToken : CRYPTOAPI_BLOB
  pendTime : FILETIME
end
type Other1fa160efaf09 = LibC::UInt32 | CMC_PEND_INFO*
struct CMC_STATUS_INFO
  dwStatus : LibC::UInt32
  cBodyList : LibC::UInt32
  rgdwBodyList : LibC::UInt32*
  pwszStatusString : PWSTR
  dwOtherInfoChoice : LibC::UInt32
end
struct CMC_ADD_EXTENSIONS_INFO
  dwCmcDataReference : LibC::UInt32
  cCertReference : LibC::UInt32
  rgdwCertReference : LibC::UInt32*
  cExtension : LibC::UInt32
  rgExtension : CERT_EXTENSION*
end
struct CMC_ADD_ATTRIBUTES_INFO
  dwCmcDataReference : LibC::UInt32
  cCertReference : LibC::UInt32
  rgdwCertReference : LibC::UInt32*
  cAttribute : LibC::UInt32
  rgAttribute : CRYPT_ATTRIBUTE*
end
struct CERT_TEMPLATE_EXT
  pszObjId : PSTR
  dwMajorVersion : LibC::UInt32
  fMinorVersion : BOOL
  dwMinorVersion : LibC::UInt32
end
struct CERT_HASHED_URL
  hashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  hash : CRYPTOAPI_BLOB
  pwszUrl : PWSTR
end
struct CERT_LOGOTYPE_DETAILS
  pwszMimeType : PWSTR
  cHashedUrl : LibC::UInt32
  rgHashedUrl : CERT_HASHED_URL*
end
struct CERT_LOGOTYPE_REFERENCE
  cHashedUrl : LibC::UInt32
  rgHashedUrl : CERT_HASHED_URL*
end
type Owlf79939dd4ee8 = LibC::UInt32 | LibC::UInt32
struct CERT_LOGOTYPE_IMAGE_INFO
  dwLogotypeImageInfoChoice : CERT_LOGOTYPE_IMAGE_INFO_TYPE
  dwFileSize : LibC::UInt32
  dwXSize : LibC::UInt32
  dwYSize : LibC::UInt32
  dwLogotypeImageResolutionChoice : CERT_LOGOTYPE_CHOICE
  pwszLanguage : PWSTR
end
struct CERT_LOGOTYPE_IMAGE
  logotypeDetails : CERT_LOGOTYPE_DETAILS
  pLogotypeImageInfo : CERT_LOGOTYPE_IMAGE_INFO*
end
struct CERT_LOGOTYPE_AUDIO_INFO
  dwFileSize : LibC::UInt32
  dwPlayTime : LibC::UInt32
  dwChannels : LibC::UInt32
  dwSampleRate : LibC::UInt32
  pwszLanguage : PWSTR
end
struct CERT_LOGOTYPE_AUDIO
  logotypeDetails : CERT_LOGOTYPE_DETAILS
  pLogotypeAudioInfo : CERT_LOGOTYPE_AUDIO_INFO*
end
struct CERT_LOGOTYPE_DATA
  cLogotypeImage : LibC::UInt32
  rgLogotypeImage : CERT_LOGOTYPE_IMAGE*
  cLogotypeAudio : LibC::UInt32
  rgLogotypeAudio : CERT_LOGOTYPE_AUDIO*
end
type Bird07a925941409 = CERT_LOGOTYPE_DATA* | CERT_LOGOTYPE_REFERENCE*
struct CERT_LOGOTYPE_INFO
  dwLogotypeInfoChoice : CERT_LOGOTYPE_OPTION
end
struct CERT_OTHER_LOGOTYPE_INFO
  pszObjId : PSTR
  logotypeInfo : CERT_LOGOTYPE_INFO
end
struct CERT_LOGOTYPE_EXT_INFO
  cCommunityLogo : LibC::UInt32
  rgCommunityLogo : CERT_LOGOTYPE_INFO*
  pIssuerLogo : CERT_LOGOTYPE_INFO*
  pSubjectLogo : CERT_LOGOTYPE_INFO*
  cOtherLogo : LibC::UInt32
  rgOtherLogo : CERT_OTHER_LOGOTYPE_INFO*
end
type Owl02e19ad46ae3 = LibC::UInt32 | PSTR
struct CERT_BIOMETRIC_DATA
  dwTypeOfBiometricDataChoice : CERT_BIOMETRIC_DATA_TYPE
  hashedUrl : CERT_HASHED_URL
end
struct CERT_BIOMETRIC_EXT_INFO
  cBiometricData : LibC::UInt32
  rgBiometricData : CERT_BIOMETRIC_DATA*
end
struct OCSP_SIGNATURE_INFO
  signatureAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  signature : CRYPT_BIT_BLOB
  cCertEncoded : LibC::UInt32
  rgCertEncoded : CRYPTOAPI_BLOB*
end
struct OCSP_SIGNED_REQUEST_INFO
  toBeSigned : CRYPTOAPI_BLOB
  pOptionalSignatureInfo : OCSP_SIGNATURE_INFO*
end
struct OCSP_CERT_ID
  hashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  issuerNameHash : CRYPTOAPI_BLOB
  issuerKeyHash : CRYPTOAPI_BLOB
  serialNumber : CRYPTOAPI_BLOB
end
struct OCSP_REQUEST_ENTRY
  certId : OCSP_CERT_ID
  cExtension : LibC::UInt32
  rgExtension : CERT_EXTENSION*
end
struct OCSP_REQUEST_INFO
  dwVersion : LibC::UInt32
  pRequestorName : CERT_ALT_NAME_ENTRY*
  cRequestEntry : LibC::UInt32
  rgRequestEntry : OCSP_REQUEST_ENTRY*
  cExtension : LibC::UInt32
  rgExtension : CERT_EXTENSION*
end
struct OCSP_RESPONSE_INFO
  dwStatus : LibC::UInt32
  pszObjId : PSTR
  value : CRYPTOAPI_BLOB
end
struct OCSP_BASIC_SIGNED_RESPONSE_INFO
  toBeSigned : CRYPTOAPI_BLOB
  signatureInfo : OCSP_SIGNATURE_INFO
end
struct OCSP_BASIC_REVOKED_INFO
  revocationDate : FILETIME
  dwCrlReasonCode : CERT_REVOCATION_STATUS_REASON
end
type Pig5afe1ba5ddff = OCSP_BASIC_REVOKED_INFO*
struct OCSP_BASIC_RESPONSE_ENTRY
  certId : OCSP_CERT_ID
  dwCertStatus : LibC::UInt32
  thisUpdate : FILETIME
  nextUpdate : FILETIME
  cExtension : LibC::UInt32
  rgExtension : CERT_EXTENSION*
end
type Birdde23b4dcb89b = CRYPTOAPI_BLOB | CRYPTOAPI_BLOB
struct OCSP_BASIC_RESPONSE_INFO
  dwVersion : LibC::UInt32
  dwResponderIdChoice : LibC::UInt32
  producedAt : FILETIME
  cResponseEntry : LibC::UInt32
  rgResponseEntry : OCSP_BASIC_RESPONSE_ENTRY*
  cExtension : LibC::UInt32
  rgExtension : CERT_EXTENSION*
end
struct CERT_SUPPORTED_ALGORITHM_INFO
  algorithm : CRYPT_ALGORITHM_IDENTIFIER
  intendedKeyUsage : CRYPT_BIT_BLOB
  intendedCertPolicies : CERT_POLICIES_INFO
end
struct CERT_TPM_SPECIFICATION_INFO
  pwszFamily : PWSTR
  dwLevel : LibC::UInt32
  dwRevision : LibC::UInt32
end
struct CRYPT_OID_FUNC_ENTRY
  pszOID : PSTR
  pvFuncAddr : LibC::Void*
end
type Othere397322b73ca = LibC::UInt32 | LibC::UInt32 | LibC::UInt32
struct CRYPT_OID_INFO
  cbSize : LibC::UInt32
  pszOID : PSTR
  pwszName : PWSTR
  dwGroupId : LibC::UInt32
  extraInfo : CRYPTOAPI_BLOB
end
alias PFN_CRYPT_ENUM_OID_INFO = (CRYPT_OID_INFO*, LibC::Void* -> BOOL)
struct CERT_STRONG_SIGN_SERIALIZED_INFO
  dwFlags : CERT_STRONG_SIGN_FLAGS
  pwszCNGSignHashAlgids : PWSTR
  pwszCNGPubKeyMinBitLengths : PWSTR
end
type Duck9274b74cf930 = LibC::Void* | CERT_STRONG_SIGN_SERIALIZED_INFO* | PSTR
struct CERT_STRONG_SIGN_PARA
  cbSize : LibC::UInt32
  dwInfoChoice : LibC::UInt32
end
struct CERT_ISSUER_SERIAL_NUMBER
  issuer : CRYPTOAPI_BLOB
  serialNumber : CRYPTOAPI_BLOB
end
type Rabbit075e3c24a219 = CERT_ISSUER_SERIAL_NUMBER | CRYPTOAPI_BLOB | CRYPTOAPI_BLOB
struct CERT_ID
  dwIdChoice : CERT_ID_OPTION
end
type Pig6a03db0aa239 = LibC::UIint* | LibC::UIint*
struct CMSG_SIGNER_ENCODE_INFO
  cbSize : LibC::UInt32
  pCertInfo : CERT_INFO*
  dwKeySpec : LibC::UInt32
  hashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  pvHashAuxInfo : LibC::Void*
  cAuthAttr : LibC::UInt32
  rgAuthAttr : CRYPT_ATTRIBUTE*
  cUnauthAttr : LibC::UInt32
  rgUnauthAttr : CRYPT_ATTRIBUTE*
end
struct CMSG_SIGNED_ENCODE_INFO
  cbSize : LibC::UInt32
  cSigners : LibC::UInt32
  rgSigners : CMSG_SIGNER_ENCODE_INFO*
  cCertEncoded : LibC::UInt32
  rgCertEncoded : CRYPTOAPI_BLOB*
  cCrlEncoded : LibC::UInt32
  rgCrlEncoded : CRYPTOAPI_BLOB*
end
struct CMSG_ENVELOPED_ENCODE_INFO
  cbSize : LibC::UInt32
  hCryptProv : LibC::UIint*
  contentEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  pvEncryptionAuxInfo : LibC::Void*
  cRecipients : LibC::UInt32
  rgpRecipients : CERT_INFO**
end
struct CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO
  cbSize : LibC::UInt32
  keyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  pvKeyEncryptionAuxInfo : LibC::Void*
  hCryptProv : LibC::UIint*
  recipientPublicKey : CRYPT_BIT_BLOB
  recipientId : CERT_ID
end
struct CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
  cbSize : LibC::UInt32
  recipientPublicKey : CRYPT_BIT_BLOB
  recipientId : CERT_ID
  date : FILETIME
  pOtherAttr : CRYPT_ATTRIBUTE_TYPE_VALUE*
end
type Birdc7fbaea27fdd = CRYPT_ALGORITHM_IDENTIFIER* | CERT_ID*
struct CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO
  cbSize : LibC::UInt32
  keyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  pvKeyEncryptionAuxInfo : LibC::Void*
  keyWrapAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  pvKeyWrapAuxInfo : LibC::Void*
  hCryptProv : LibC::UIint*
  dwKeySpec : LibC::UInt32
  dwKeyChoice : CMSG_KEY_AGREE_OPTION
  userKeyingMaterial : CRYPTOAPI_BLOB
  cRecipientEncryptedKeys : LibC::UInt32
  rgpRecipientEncryptedKeys : CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO**
end
type Pigf0885c91b9ab = LibC::UIint* | LibC::Void*
struct CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
  cbSize : LibC::UInt32
  keyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  pvKeyEncryptionAuxInfo : LibC::Void*
  hCryptProv : LibC::UIint*
  dwKeyChoice : LibC::UInt32
  keyId : CRYPTOAPI_BLOB
  date : FILETIME
  pOtherAttr : CRYPT_ATTRIBUTE_TYPE_VALUE*
end
type Rabbitb1c651761f95 = CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO* | CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO* | CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO*
struct CMSG_RECIPIENT_ENCODE_INFO
  dwRecipientChoice : LibC::UInt32
end
struct CMSG_RC2_AUX_INFO
  cbSize : LibC::UInt32
  dwBitLen : LibC::UInt32
end
struct CMSG_SP3_COMPATIBLE_AUX_INFO
  cbSize : LibC::UInt32
  dwFlags : LibC::UInt32
end
struct CMSG_RC4_AUX_INFO
  cbSize : LibC::UInt32
  dwBitLen : LibC::UInt32
end
struct CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO
  cbSize : LibC::UInt32
  signedInfo : CMSG_SIGNED_ENCODE_INFO
  envelopedInfo : CMSG_ENVELOPED_ENCODE_INFO
end
struct CMSG_HASHED_ENCODE_INFO
  cbSize : LibC::UInt32
  hCryptProv : LibC::UIint*
  hashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  pvHashAuxInfo : LibC::Void*
end
struct CMSG_ENCRYPTED_ENCODE_INFO
  cbSize : LibC::UInt32
  contentEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  pvEncryptionAuxInfo : LibC::Void*
end
alias PFN_CMSG_STREAM_OUTPUT = (LibC::Void*, LibC::Byte*, LibC::UInt32, BOOL -> BOOL)
struct CMSG_STREAM_INFO
  cbContent : LibC::UInt32
  pfnStreamOutput : PFN_CMSG_STREAM_OUTPUT
  pvArg : LibC::Void*
end
struct CMSG_SIGNER_INFO
  dwVersion : LibC::UInt32
  issuer : CRYPTOAPI_BLOB
  serialNumber : CRYPTOAPI_BLOB
  hashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  hashEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  encryptedHash : CRYPTOAPI_BLOB
  authAttrs : CRYPT_ATTRIBUTES
  unauthAttrs : CRYPT_ATTRIBUTES
end
struct CMSG_CMS_SIGNER_INFO
  dwVersion : LibC::UInt32
  signerId : CERT_ID
  hashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  hashEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  encryptedHash : CRYPTOAPI_BLOB
  authAttrs : CRYPT_ATTRIBUTES
  unauthAttrs : CRYPT_ATTRIBUTES
end
struct CMSG_KEY_TRANS_RECIPIENT_INFO
  dwVersion : LibC::UInt32
  recipientId : CERT_ID
  keyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  encryptedKey : CRYPTOAPI_BLOB
end
struct CMSG_RECIPIENT_ENCRYPTED_KEY_INFO
  recipientId : CERT_ID
  encryptedKey : CRYPTOAPI_BLOB
  date : FILETIME
  pOtherAttr : CRYPT_ATTRIBUTE_TYPE_VALUE*
end
type Othercc57f480aede = CERT_ID | CERT_PUBLIC_KEY_INFO
struct CMSG_KEY_AGREE_RECIPIENT_INFO
  dwVersion : LibC::UInt32
  dwOriginatorChoice : CMSG_KEY_AGREE_ORIGINATOR
  userKeyingMaterial : CRYPTOAPI_BLOB
  keyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  cRecipientEncryptedKeys : LibC::UInt32
  rgpRecipientEncryptedKeys : CMSG_RECIPIENT_ENCRYPTED_KEY_INFO**
end
struct CMSG_MAIL_LIST_RECIPIENT_INFO
  dwVersion : LibC::UInt32
  keyId : CRYPTOAPI_BLOB
  keyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  encryptedKey : CRYPTOAPI_BLOB
  date : FILETIME
  pOtherAttr : CRYPT_ATTRIBUTE_TYPE_VALUE*
end
type Owl15177ee5d6ea = CMSG_KEY_TRANS_RECIPIENT_INFO* | CMSG_KEY_AGREE_RECIPIENT_INFO* | CMSG_MAIL_LIST_RECIPIENT_INFO*
struct CMSG_CMS_RECIPIENT_INFO
  dwRecipientChoice : LibC::UInt32
end
struct CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA
  cbSize : LibC::UInt32
  hCryptProv : LibC::UIint*
  dwSignerIndex : LibC::UInt32
  dwSignerType : LibC::UInt32
  pvSigner : LibC::Void*
end
type Birdd5f8fea12619 = LibC::UIint* | LibC::UIint*
struct CMSG_CTRL_DECRYPT_PARA
  cbSize : LibC::UInt32
  dwKeySpec : LibC::UInt32
  dwRecipientIndex : LibC::UInt32
end
type Owl750abdbdb933 = LibC::UIint* | LibC::UIint*
struct CMSG_CTRL_KEY_TRANS_DECRYPT_PARA
  cbSize : LibC::UInt32
  dwKeySpec : LibC::UInt32
  pKeyTrans : CMSG_KEY_TRANS_RECIPIENT_INFO*
  dwRecipientIndex : LibC::UInt32
end
type Duck04fb64d3665b = LibC::UIint* | LibC::UIint*
struct CMSG_CTRL_KEY_AGREE_DECRYPT_PARA
  cbSize : LibC::UInt32
  dwKeySpec : LibC::UInt32
  pKeyAgree : CMSG_KEY_AGREE_RECIPIENT_INFO*
  dwRecipientIndex : LibC::UInt32
  dwRecipientEncryptedKeyIndex : LibC::UInt32
  originatorPublicKey : CRYPT_BIT_BLOB
end
type Owld132e304aa97 = LibC::UIint* | LibC::Void*
struct CMSG_CTRL_MAIL_LIST_DECRYPT_PARA
  cbSize : LibC::UInt32
  hCryptProv : LibC::UIint*
  pMailList : CMSG_MAIL_LIST_RECIPIENT_INFO*
  dwRecipientIndex : LibC::UInt32
  dwKeyChoice : LibC::UInt32
end
struct CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA
  cbSize : LibC::UInt32
  dwSignerIndex : LibC::UInt32
  blob : CRYPTOAPI_BLOB
end
struct CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA
  cbSize : LibC::UInt32
  dwSignerIndex : LibC::UInt32
  dwUnauthAttrIndex : LibC::UInt32
end
alias PFN_CMSG_ALLOC = (LibC::UIint* -> LibC::Void*)
alias PFN_CMSG_FREE = (LibC::Void* -> LibC::Void)
alias PFN_CMSG_GEN_ENCRYPT_KEY = (LibC::UIint**, CRYPT_ALGORITHM_IDENTIFIER*, LibC::Void*, CERT_PUBLIC_KEY_INFO*, PFN_CMSG_ALLOC, LibC::UIint**, LibC::Byte**, LibC::UInt32* -> BOOL)
alias PFN_CMSG_EXPORT_ENCRYPT_KEY = (LibC::UIint*, LibC::UIint*, CERT_PUBLIC_KEY_INFO*, LibC::Byte*, LibC::UInt32* -> BOOL)
alias PFN_CMSG_IMPORT_ENCRYPT_KEY = (LibC::UIint*, LibC::UInt32, CRYPT_ALGORITHM_IDENTIFIER*, CRYPT_ALGORITHM_IDENTIFIER*, LibC::Byte*, LibC::UInt32, LibC::UIint** -> BOOL)
type Otherbfcb70cc0e3b = LibC::UIint* | BCRYPT_KEY_HANDLE
struct CMSG_CONTENT_ENCRYPT_INFO
  cbSize : LibC::UInt32
  hCryptProv : LibC::UIint*
  contentEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  pvEncryptionAuxInfo : LibC::Void*
  cRecipients : LibC::UInt32
  rgCmsRecipients : CMSG_RECIPIENT_ENCODE_INFO*
  pfnAlloc : PFN_CMSG_ALLOC
  pfnFree : PFN_CMSG_FREE
  dwEncryptFlags : LibC::UInt32
  dwFlags : LibC::UInt32
  fCNG : BOOL
  pbCNGContentEncryptKeyObject : LibC::Byte*
  pbContentEncryptKey : LibC::Byte*
  cbContentEncryptKey : LibC::UInt32
end
alias PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY = (CMSG_CONTENT_ENCRYPT_INFO*, LibC::UInt32, LibC::Void* -> BOOL)
struct CMSG_KEY_TRANS_ENCRYPT_INFO
  cbSize : LibC::UInt32
  dwRecipientIndex : LibC::UInt32
  keyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  encryptedKey : CRYPTOAPI_BLOB
  dwFlags : LibC::UInt32
end
alias PFN_CMSG_EXPORT_KEY_TRANS = (CMSG_CONTENT_ENCRYPT_INFO*, CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO*, CMSG_KEY_TRANS_ENCRYPT_INFO*, LibC::UInt32, LibC::Void* -> BOOL)
struct CMSG_KEY_AGREE_KEY_ENCRYPT_INFO
  cbSize : LibC::UInt32
  encryptedKey : CRYPTOAPI_BLOB
end
type Owl4ef3b71eae59 = CERT_ID | CERT_PUBLIC_KEY_INFO
struct CMSG_KEY_AGREE_ENCRYPT_INFO
  cbSize : LibC::UInt32
  dwRecipientIndex : LibC::UInt32
  keyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  userKeyingMaterial : CRYPTOAPI_BLOB
  dwOriginatorChoice : CMSG_KEY_AGREE_ORIGINATOR
  cKeyAgreeKeyEncryptInfo : LibC::UInt32
  rgpKeyAgreeKeyEncryptInfo : CMSG_KEY_AGREE_KEY_ENCRYPT_INFO**
  dwFlags : LibC::UInt32
end
alias PFN_CMSG_EXPORT_KEY_AGREE = (CMSG_CONTENT_ENCRYPT_INFO*, CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO*, CMSG_KEY_AGREE_ENCRYPT_INFO*, LibC::UInt32, LibC::Void* -> BOOL)
struct CMSG_MAIL_LIST_ENCRYPT_INFO
  cbSize : LibC::UInt32
  dwRecipientIndex : LibC::UInt32
  keyEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  encryptedKey : CRYPTOAPI_BLOB
  dwFlags : LibC::UInt32
end
alias PFN_CMSG_EXPORT_MAIL_LIST = (CMSG_CONTENT_ENCRYPT_INFO*, CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO*, CMSG_MAIL_LIST_ENCRYPT_INFO*, LibC::UInt32, LibC::Void* -> BOOL)
alias PFN_CMSG_IMPORT_KEY_TRANS = (CRYPT_ALGORITHM_IDENTIFIER*, CMSG_CTRL_KEY_TRANS_DECRYPT_PARA*, LibC::UInt32, LibC::Void*, LibC::UIint** -> BOOL)
alias PFN_CMSG_IMPORT_KEY_AGREE = (CRYPT_ALGORITHM_IDENTIFIER*, CMSG_CTRL_KEY_AGREE_DECRYPT_PARA*, LibC::UInt32, LibC::Void*, LibC::UIint** -> BOOL)
alias PFN_CMSG_IMPORT_MAIL_LIST = (CRYPT_ALGORITHM_IDENTIFIER*, CMSG_CTRL_MAIL_LIST_DECRYPT_PARA*, LibC::UInt32, LibC::Void*, LibC::UIint** -> BOOL)
struct CMSG_CNG_CONTENT_DECRYPT_INFO
  cbSize : LibC::UInt32
  contentEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  pfnAlloc : PFN_CMSG_ALLOC
  pfnFree : PFN_CMSG_FREE
  hNCryptKey : LibC::UIint*
  pbContentEncryptKey : LibC::Byte*
  cbContentEncryptKey : LibC::UInt32
  hCNGContentEncryptKey : BCRYPT_KEY_HANDLE
  pbCNGContentEncryptKeyObject : LibC::Byte*
end
alias PFN_CMSG_CNG_IMPORT_KEY_TRANS = (CMSG_CNG_CONTENT_DECRYPT_INFO*, CMSG_CTRL_KEY_TRANS_DECRYPT_PARA*, LibC::UInt32, LibC::Void* -> BOOL)
alias PFN_CMSG_CNG_IMPORT_KEY_AGREE = (CMSG_CNG_CONTENT_DECRYPT_INFO*, CMSG_CTRL_KEY_AGREE_DECRYPT_PARA*, LibC::UInt32, LibC::Void* -> BOOL)
alias PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY = (CMSG_CNG_CONTENT_DECRYPT_INFO*, LibC::UInt32, LibC::Void* -> BOOL)
struct CERT_CONTEXT
  dwCertEncodingType : LibC::UInt32
  pbCertEncoded : LibC::Byte*
  cbCertEncoded : LibC::UInt32
  pCertInfo : CERT_INFO*
  hCertStore : LibC::Void*
end
struct CRL_CONTEXT
  dwCertEncodingType : LibC::UInt32
  pbCrlEncoded : LibC::Byte*
  cbCrlEncoded : LibC::UInt32
  pCrlInfo : CRL_INFO*
  hCertStore : LibC::Void*
end
struct CTL_CONTEXT
  dwMsgAndCertEncodingType : LibC::UInt32
  pbCtlEncoded : LibC::Byte*
  cbCtlEncoded : LibC::UInt32
  pCtlInfo : CTL_INFO*
  hCertStore : LibC::Void*
  hCryptMsg : LibC::Void*
  pbCtlContent : LibC::Byte*
  cbCtlContent : LibC::UInt32
end
enum CertKeyType : UInt32
KeyTypeOther = 0

KeyTypeVirtualSmartCard = 1

KeyTypePhysicalSmartCard = 2

KeyTypePassport = 3

KeyTypePassportRemote = 4

KeyTypePassportSmartCard = 5

KeyTypeHardware = 6

KeyTypeSoftware = 7

KeyTypeSelfSigned = 8

end
struct CRYPT_KEY_PROV_PARAM
  dwParam : LibC::UInt32
  pbData : LibC::Byte*
  cbData : LibC::UInt32
  dwFlags : LibC::UInt32
end
struct CRYPT_KEY_PROV_INFO
  pwszContainerName : PWSTR
  pwszProvName : PWSTR
  dwProvType : LibC::UInt32
  dwFlags : CRYPT_KEY_FLAGS
  cProvParam : LibC::UInt32
  rgProvParam : CRYPT_KEY_PROV_PARAM*
  dwKeySpec : LibC::UInt32
end
type Owl837799e4b915 = LibC::UIint* | LibC::UIint*
struct CERT_KEY_CONTEXT
  cbSize : LibC::UInt32
  dwKeySpec : LibC::UInt32
end
struct ROOT_INFO_LUID
  lowPart : LibC::UInt32
  highPart : LibC::Int32
end
struct CRYPT_SMART_CARD_ROOT_INFO
  rgbCardID : Array(LibC::Byte)
  luid : ROOT_INFO_LUID
end
type Other6d33403ea7a2 = LibC::Void* | PSTR | PWSTR
type Pige861c1d466f4 = HKEY | LibC::Void*
struct CERT_SYSTEM_STORE_RELOCATE_PARA
  anonymous1 : Pige861c1d466f4
  anonymous2 : Other6d33403ea7a2
end
struct CERT_REGISTRY_STORE_CLIENT_GPT_PARA
  hKeyBase : HKEY
  pwszRegPath : PWSTR
end
struct CERT_REGISTRY_STORE_ROAMING_PARA
  hKey : HKEY
  pwszStoreDirectory : PWSTR
end
struct CERT_LDAP_STORE_OPENED_PARA
  pvLdapSessionHandle : LibC::Void*
  pwszLdapUrl : PWSTR
end
struct CERT_STORE_PROV_INFO
  cbSize : LibC::UInt32
  cStoreProvFunc : LibC::UInt32
  rgpvStoreProvFunc : LibC::Void**
  hStoreProv : LibC::Void*
  dwStoreProvFlags : CERT_STORE_PROV_FLAGS
  hStoreProvFuncAddr2 : LibC::Void*
end
alias PFN_CERT_DLL_OPEN_STORE_PROV_FUNC = (PSTR, CERT_QUERY_ENCODING_TYPE, LibC::UIint*, CERT_OPEN_STORE_FLAGS, LibC::Void*, LibC::Void*, CERT_STORE_PROV_INFO* -> BOOL)
alias PFN_CERT_STORE_PROV_CLOSE = (LibC::Void*, LibC::UInt32 -> LibC::Void)
alias PFN_CERT_STORE_PROV_READ_CERT = (LibC::Void*, CERT_CONTEXT*, LibC::UInt32, CERT_CONTEXT** -> BOOL)
alias PFN_CERT_STORE_PROV_WRITE_CERT = (LibC::Void*, CERT_CONTEXT*, LibC::UInt32 -> BOOL)
alias PFN_CERT_STORE_PROV_DELETE_CERT = (LibC::Void*, CERT_CONTEXT*, LibC::UInt32 -> BOOL)
alias PFN_CERT_STORE_PROV_SET_CERT_PROPERTY = (LibC::Void*, CERT_CONTEXT*, LibC::UInt32, LibC::UInt32, LibC::Void* -> BOOL)
alias PFN_CERT_STORE_PROV_READ_CRL = (LibC::Void*, CRL_CONTEXT*, LibC::UInt32, CRL_CONTEXT** -> BOOL)
alias PFN_CERT_STORE_PROV_WRITE_CRL = (LibC::Void*, CRL_CONTEXT*, LibC::UInt32 -> BOOL)
alias PFN_CERT_STORE_PROV_DELETE_CRL = (LibC::Void*, CRL_CONTEXT*, LibC::UInt32 -> BOOL)
alias PFN_CERT_STORE_PROV_SET_CRL_PROPERTY = (LibC::Void*, CRL_CONTEXT*, LibC::UInt32, LibC::UInt32, LibC::Void* -> BOOL)
alias PFN_CERT_STORE_PROV_READ_CTL = (LibC::Void*, CTL_CONTEXT*, LibC::UInt32, CTL_CONTEXT** -> BOOL)
alias PFN_CERT_STORE_PROV_WRITE_CTL = (LibC::Void*, CTL_CONTEXT*, LibC::UInt32 -> BOOL)
alias PFN_CERT_STORE_PROV_DELETE_CTL = (LibC::Void*, CTL_CONTEXT*, LibC::UInt32 -> BOOL)
alias PFN_CERT_STORE_PROV_SET_CTL_PROPERTY = (LibC::Void*, CTL_CONTEXT*, LibC::UInt32, LibC::UInt32, LibC::Void* -> BOOL)
alias PFN_CERT_STORE_PROV_CONTROL = (LibC::Void*, LibC::UInt32, LibC::UInt32, LibC::Void* -> BOOL)
struct CERT_STORE_PROV_FIND_INFO
  cbSize : LibC::UInt32
  dwMsgAndCertEncodingType : LibC::UInt32
  dwFindFlags : LibC::UInt32
  dwFindType : LibC::UInt32
  pvFindPara : LibC::Void*
end
alias PFN_CERT_STORE_PROV_FIND_CERT = (LibC::Void*, CERT_STORE_PROV_FIND_INFO*, CERT_CONTEXT*, LibC::UInt32, LibC::Void**, CERT_CONTEXT** -> BOOL)
alias PFN_CERT_STORE_PROV_FREE_FIND_CERT = (LibC::Void*, CERT_CONTEXT*, LibC::Void*, LibC::UInt32 -> BOOL)
alias PFN_CERT_STORE_PROV_GET_CERT_PROPERTY = (LibC::Void*, CERT_CONTEXT*, LibC::UInt32, LibC::UInt32, LibC::Void*, LibC::UInt32* -> BOOL)
alias PFN_CERT_STORE_PROV_FIND_CRL = (LibC::Void*, CERT_STORE_PROV_FIND_INFO*, CRL_CONTEXT*, LibC::UInt32, LibC::Void**, CRL_CONTEXT** -> BOOL)
alias PFN_CERT_STORE_PROV_FREE_FIND_CRL = (LibC::Void*, CRL_CONTEXT*, LibC::Void*, LibC::UInt32 -> BOOL)
alias PFN_CERT_STORE_PROV_GET_CRL_PROPERTY = (LibC::Void*, CRL_CONTEXT*, LibC::UInt32, LibC::UInt32, LibC::Void*, LibC::UInt32* -> BOOL)
alias PFN_CERT_STORE_PROV_FIND_CTL = (LibC::Void*, CERT_STORE_PROV_FIND_INFO*, CTL_CONTEXT*, LibC::UInt32, LibC::Void**, CTL_CONTEXT** -> BOOL)
alias PFN_CERT_STORE_PROV_FREE_FIND_CTL = (LibC::Void*, CTL_CONTEXT*, LibC::Void*, LibC::UInt32 -> BOOL)
alias PFN_CERT_STORE_PROV_GET_CTL_PROPERTY = (LibC::Void*, CTL_CONTEXT*, LibC::UInt32, LibC::UInt32, LibC::Void*, LibC::UInt32* -> BOOL)
struct CRL_FIND_ISSUED_FOR_PARA
  pSubjectCert : CERT_CONTEXT*
  pIssuerCert : CERT_CONTEXT*
end
struct CTL_ANY_SUBJECT_INFO
  subjectAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  subjectIdentifier : CRYPTOAPI_BLOB
end
struct CTL_FIND_USAGE_PARA
  cbSize : LibC::UInt32
  subjectUsage : CTL_USAGE
  listIdentifier : CRYPTOAPI_BLOB
  pSigner : CERT_INFO*
end
struct CTL_FIND_SUBJECT_PARA
  cbSize : LibC::UInt32
  pUsagePara : CTL_FIND_USAGE_PARA*
  dwSubjectType : LibC::UInt32
  pvSubject : LibC::Void*
end
alias PFN_CERT_CREATE_CONTEXT_SORT_FUNC = (LibC::UInt32, LibC::UInt32, LibC::UInt32, LibC::Void* -> BOOL)
struct CERT_CREATE_CONTEXT_PARA
  cbSize : LibC::UInt32
  pfnFree : PFN_CRYPT_FREE
  pvFree : LibC::Void*
  pfnSort : PFN_CERT_CREATE_CONTEXT_SORT_FUNC
  pvSort : LibC::Void*
end
struct CERT_SYSTEM_STORE_INFO
  cbSize : LibC::UInt32
end
struct CERT_PHYSICAL_STORE_INFO
  cbSize : LibC::UInt32
  pszOpenStoreProvider : PSTR
  dwOpenEncodingType : LibC::UInt32
  dwOpenFlags : LibC::UInt32
  openParameters : CRYPTOAPI_BLOB
  dwFlags : LibC::UInt32
  dwPriority : LibC::UInt32
end
alias PFN_CERT_ENUM_SYSTEM_STORE_LOCATION = (PWSTR, LibC::UInt32, LibC::Void*, LibC::Void* -> BOOL)
alias PFN_CERT_ENUM_SYSTEM_STORE = (LibC::Void*, CERT_SYSTEM_STORE_FLAGS, CERT_SYSTEM_STORE_INFO*, LibC::Void*, LibC::Void* -> BOOL)
alias PFN_CERT_ENUM_PHYSICAL_STORE = (LibC::Void*, LibC::UInt32, PWSTR, CERT_PHYSICAL_STORE_INFO*, LibC::Void*, LibC::Void* -> BOOL)
struct CTL_VERIFY_USAGE_PARA
  cbSize : LibC::UInt32
  listIdentifier : CRYPTOAPI_BLOB
  cCtlStore : LibC::UInt32
  rghCtlStore : LibC::Void**
  cSignerStore : LibC::UInt32
  rghSignerStore : LibC::Void**
end
struct CTL_VERIFY_USAGE_STATUS
  cbSize : LibC::UInt32
  dwError : LibC::UInt32
  dwFlags : LibC::UInt32
  ppCtl : CTL_CONTEXT**
  dwCtlEntryIndex : LibC::UInt32
  ppSigner : CERT_CONTEXT**
  dwSignerIndex : LibC::UInt32
end
struct CERT_REVOCATION_CRL_INFO
  cbSize : LibC::UInt32
  pBaseCrlContext : CRL_CONTEXT*
  pDeltaCrlContext : CRL_CONTEXT*
  pCrlEntry : CRL_ENTRY*
  fDeltaCrlEntry : BOOL
end
struct CERT_REVOCATION_PARA
  cbSize : LibC::UInt32
  pIssuerCert : CERT_CONTEXT*
  cCertStore : LibC::UInt32
  rgCertStore : LibC::Void**
  hCrlStore : LibC::Void*
  pftTimeToUse : FILETIME*
end
struct CERT_REVOCATION_STATUS
  cbSize : LibC::UInt32
  dwIndex : LibC::UInt32
  dwError : LibC::UInt32
  dwReason : CERT_REVOCATION_STATUS_REASON
  fHasFreshnessTime : BOOL
  dwFreshnessTime : LibC::UInt32
end
struct CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO
  certSignHashCNGAlgPropData : CRYPTOAPI_BLOB
  certIssuerPubKeyBitLengthPropData : CRYPTOAPI_BLOB
end
struct CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO
  cCNGHashAlgid : LibC::UInt32
  rgpwszCNGHashAlgid : PWSTR*
  dwWeakIndex : LibC::UInt32
end
alias PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC = (LibC::UInt32, CRYPT_ALGORITHM_IDENTIFIER*, LibC::Void**, PWSTR* -> BOOL)
alias PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC = (LibC::UIint*, LibC::UInt32, CRYPT_ALGORITHM_IDENTIFIER*, LibC::Void*, PWSTR, PWSTR, LibC::Byte*, LibC::UInt32, LibC::Byte*, LibC::UInt32* -> BOOL)
alias PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC = (LibC::UInt32, CERT_PUBLIC_KEY_INFO*, CRYPT_ALGORITHM_IDENTIFIER*, LibC::Void*, PWSTR, PWSTR, LibC::Byte*, LibC::UInt32, LibC::Byte*, LibC::UInt32 -> BOOL)
struct CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA
  cOID : LibC::UInt32
  rgpszOID : PSTR*
end
alias PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC = (LibC::UIint*, LibC::UInt32, PSTR, LibC::UInt32, LibC::Void*, CERT_PUBLIC_KEY_INFO*, LibC::UInt32* -> BOOL)
alias PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC = (BCRYPT_KEY_HANDLE, LibC::UInt32, PSTR, LibC::UInt32, LibC::Void*, CERT_PUBLIC_KEY_INFO*, LibC::UInt32* -> BOOL)
alias PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC = (LibC::UInt32, CERT_PUBLIC_KEY_INFO*, LibC::UInt32, LibC::Void*, BCRYPT_KEY_HANDLE* -> BOOL)
alias PFN_IMPORT_PRIV_KEY_FUNC = (LibC::UIint*, CRYPT_PRIVATE_KEY_INFO*, LibC::UInt32, LibC::Void* -> BOOL)
alias PFN_EXPORT_PRIV_KEY_FUNC = (LibC::UIint*, LibC::UInt32, PSTR, LibC::UInt32, LibC::Void*, CRYPT_PRIVATE_KEY_INFO*, LibC::UInt32* -> BOOL)
alias PFN_CRYPT_GET_SIGNER_CERTIFICATE = (LibC::Void*, LibC::UInt32, CERT_INFO*, LibC::Void* -> CERT_CONTEXT*)
struct CRYPT_SIGN_MESSAGE_PARA
  cbSize : LibC::UInt32
  dwMsgEncodingType : LibC::UInt32
  pSigningCert : CERT_CONTEXT*
  hashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  pvHashAuxInfo : LibC::Void*
  cMsgCert : LibC::UInt32
  rgpMsgCert : CERT_CONTEXT**
  cMsgCrl : LibC::UInt32
  rgpMsgCrl : CRL_CONTEXT**
  cAuthAttr : LibC::UInt32
  rgAuthAttr : CRYPT_ATTRIBUTE*
  cUnauthAttr : LibC::UInt32
  rgUnauthAttr : CRYPT_ATTRIBUTE*
  dwFlags : LibC::UInt32
  dwInnerContentType : LibC::UInt32
end
struct CRYPT_VERIFY_MESSAGE_PARA
  cbSize : LibC::UInt32
  dwMsgAndCertEncodingType : LibC::UInt32
  hCryptProv : LibC::UIint*
  pfnGetSignerCertificate : PFN_CRYPT_GET_SIGNER_CERTIFICATE
  pvGetArg : LibC::Void*
end
struct CRYPT_ENCRYPT_MESSAGE_PARA
  cbSize : LibC::UInt32
  dwMsgEncodingType : LibC::UInt32
  hCryptProv : LibC::UIint*
  contentEncryptionAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  pvEncryptionAuxInfo : LibC::Void*
  dwFlags : LibC::UInt32
  dwInnerContentType : LibC::UInt32
end
struct CRYPT_DECRYPT_MESSAGE_PARA
  cbSize : LibC::UInt32
  dwMsgAndCertEncodingType : LibC::UInt32
  cCertStore : LibC::UInt32
  rghCertStore : LibC::Void**
end
struct CRYPT_HASH_MESSAGE_PARA
  cbSize : LibC::UInt32
  dwMsgEncodingType : LibC::UInt32
  hCryptProv : LibC::UIint*
  hashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  pvHashAuxInfo : LibC::Void*
end
type Duck71ea355b5d81 = LibC::UIint* | LibC::UIint*
struct CRYPT_KEY_SIGN_MESSAGE_PARA
  cbSize : LibC::UInt32
  dwMsgAndCertEncodingType : CERT_QUERY_ENCODING_TYPE
  dwKeySpec : CERT_KEY_SPEC
  hashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  pvHashAuxInfo : LibC::Void*
  pubKeyAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
end
struct CRYPT_KEY_VERIFY_MESSAGE_PARA
  cbSize : LibC::UInt32
  dwMsgEncodingType : LibC::UInt32
  hCryptProv : LibC::UIint*
end
struct CERT_CHAIN
  cCerts : LibC::UInt32
  certs : CRYPTOAPI_BLOB*
  keyLocatorInfo : CRYPT_KEY_PROV_INFO
end
alias PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = (PSTR, LibC::Void* -> LibC::Void)
struct CRYPT_BLOB_ARRAY
  cBlob : LibC::UInt32
  rgBlob : CRYPTOAPI_BLOB*
end
struct CRYPT_CREDENTIALS
  cbSize : LibC::UInt32
  pszCredentialsOid : PSTR
  pvCredentials : LibC::Void*
end
struct CRYPT_PASSWORD_CREDENTIALSA
  cbSize : LibC::UInt32
  pszUsername : PSTR
  pszPassword : PSTR
end
struct CRYPT_PASSWORD_CREDENTIALSW
  cbSize : LibC::UInt32
  pszUsername : PWSTR
  pszPassword : PWSTR
end
alias PFN_FREE_ENCODED_OBJECT_FUNC = (PSTR, CRYPT_BLOB_ARRAY*, LibC::Void* -> LibC::Void)
struct CRYPTNET_URL_CACHE_PRE_FETCH_INFO
  cbSize : LibC::UInt32
  dwObjectType : LibC::UInt32
  dwError : LibC::UInt32
  dwReserved : LibC::UInt32
  thisUpdateTime : FILETIME
  nextUpdateTime : FILETIME
  publishTime : FILETIME
end
struct CRYPTNET_URL_CACHE_FLUSH_INFO
  cbSize : LibC::UInt32
  dwExemptSeconds : LibC::UInt32
  expireTime : FILETIME
end
struct CRYPTNET_URL_CACHE_RESPONSE_INFO
  cbSize : LibC::UInt32
  wResponseType : LibC::UInt16
  wResponseFlags : LibC::UInt16
  lastModifiedTime : FILETIME
  dwMaxAge : LibC::UInt32
  pwszETag : PWSTR
  dwProxyId : LibC::UInt32
end
struct CRYPT_RETRIEVE_AUX_INFO
  cbSize : LibC::UInt32
  pLastSyncTime : FILETIME*
  dwMaxUrlRetrievalByteCount : LibC::UInt32
  pPreFetchInfo : CRYPTNET_URL_CACHE_PRE_FETCH_INFO*
  pFlushInfo : CRYPTNET_URL_CACHE_FLUSH_INFO*
  ppResponseInfo : CRYPTNET_URL_CACHE_RESPONSE_INFO**
  pwszCacheFileNamePrefix : PWSTR
  pftCacheResync : FILETIME*
  fProxyCacheRetrieval : BOOL
  dwHttpStatusCode : LibC::UInt32
  ppwszErrorResponseHeaders : PWSTR*
  ppErrorContentBlob : CRYPTOAPI_BLOB**
end
alias PFN_CRYPT_CANCEL_RETRIEVAL = (LibC::UInt32, LibC::Void* -> BOOL)
alias PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = (LibC::Void*, LibC::UInt32, PSTR, PSTR, LibC::Void* -> LibC::Void)
struct CRYPT_ASYNC_RETRIEVAL_COMPLETION
  pfnCompletion : PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC
  pvCompletion : LibC::Void*
end
alias PFN_CANCEL_ASYNC_RETRIEVAL_FUNC = (HCRYPTASYNC -> BOOL)
struct CRYPT_URL_ARRAY
  cUrl : LibC::UInt32
  rgwszUrl : PWSTR*
end
struct CRYPT_URL_INFO
  cbSize : LibC::UInt32
  dwSyncDeltaTime : LibC::UInt32
  cGroup : LibC::UInt32
  rgcGroupEntry : LibC::UInt32*
end
struct CERT_CRL_CONTEXT_PAIR
  pCertContext : CERT_CONTEXT*
  pCrlContext : CRL_CONTEXT*
end
struct CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO
  cbSize : LibC::UInt32
  iDeltaCrlIndicator : LibC::Int32
  pftCacheResync : FILETIME*
  pLastSyncTime : FILETIME*
  pMaxAgeTime : FILETIME*
  pChainPara : CERT_REVOCATION_CHAIN_PARA*
  pDeltaCrlIndicator : CRYPTOAPI_BLOB*
end
struct CERT_CHAIN_ENGINE_CONFIG
  cbSize : LibC::UInt32
  hRestrictedRoot : LibC::Void*
  hRestrictedTrust : LibC::Void*
  hRestrictedOther : LibC::Void*
  cAdditionalStore : LibC::UInt32
  rghAdditionalStore : LibC::Void**
  dwFlags : LibC::UInt32
  dwUrlRetrievalTimeout : LibC::UInt32
  maximumCachedCertificates : LibC::UInt32
  cycleDetectionModulus : LibC::UInt32
  hExclusiveRoot : LibC::Void*
  hExclusiveTrustedPeople : LibC::Void*
  dwExclusiveFlags : LibC::UInt32
end
struct CERT_TRUST_STATUS
  dwErrorStatus : LibC::UInt32
  dwInfoStatus : LibC::UInt32
end
struct CERT_REVOCATION_INFO
  cbSize : LibC::UInt32
  dwRevocationResult : LibC::UInt32
  pszRevocationOid : PSTR
  pvOidSpecificInfo : LibC::Void*
  fHasFreshnessTime : BOOL
  dwFreshnessTime : LibC::UInt32
  pCrlInfo : CERT_REVOCATION_CRL_INFO*
end
struct CERT_TRUST_LIST_INFO
  cbSize : LibC::UInt32
  pCtlEntry : CTL_ENTRY*
  pCtlContext : CTL_CONTEXT*
end
struct CERT_CHAIN_ELEMENT
  cbSize : LibC::UInt32
  pCertContext : CERT_CONTEXT*
  trustStatus : CERT_TRUST_STATUS
  pRevocationInfo : CERT_REVOCATION_INFO*
  pIssuanceUsage : CTL_USAGE*
  pApplicationUsage : CTL_USAGE*
  pwszExtendedErrorInfo : PWSTR
end
struct CERT_SIMPLE_CHAIN
  cbSize : LibC::UInt32
  trustStatus : CERT_TRUST_STATUS
  cElement : LibC::UInt32
  rgpElement : CERT_CHAIN_ELEMENT**
  pTrustListInfo : CERT_TRUST_LIST_INFO*
  fHasRevocationFreshnessTime : BOOL
  dwRevocationFreshnessTime : LibC::UInt32
end
struct CERT_CHAIN_CONTEXT
  cbSize : LibC::UInt32
  trustStatus : CERT_TRUST_STATUS
  cChain : LibC::UInt32
  rgpChain : CERT_SIMPLE_CHAIN**
  cLowerQualityChainContext : LibC::UInt32
  rgpLowerQualityChainContext : CERT_CHAIN_CONTEXT**
  fHasRevocationFreshnessTime : BOOL
  dwRevocationFreshnessTime : LibC::UInt32
  dwCreateFlags : LibC::UInt32
  chainId : LibC::Guid
end
struct CERT_USAGE_MATCH
  dwType : LibC::UInt32
  usage : CTL_USAGE
end
struct CTL_USAGE_MATCH
  dwType : LibC::UInt32
  usage : CTL_USAGE
end
struct CERT_CHAIN_PARA
  cbSize : LibC::UInt32
  requestedUsage : CERT_USAGE_MATCH
end
struct CERT_REVOCATION_CHAIN_PARA
  cbSize : LibC::UInt32
  hChainEngine : HCERTCHAINENGINE
  hAdditionalStore : LibC::Void*
  dwChainFlags : LibC::UInt32
  dwUrlRetrievalTimeout : LibC::UInt32
  pftCurrentTime : FILETIME*
  pftCacheResync : FILETIME*
  cbMaxUrlRetrievalByteCount : LibC::UInt32
end
struct CRL_REVOCATION_INFO
  pCrlEntry : CRL_ENTRY*
  pCrlContext : CRL_CONTEXT*
  pCrlIssuerChain : CERT_CHAIN_CONTEXT*
end
alias PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK = (CERT_CONTEXT*, LibC::Void* -> BOOL)
struct CERT_CHAIN_FIND_BY_ISSUER_PARA
  cbSize : LibC::UInt32
  pszUsageIdentifier : PSTR
  dwKeySpec : LibC::UInt32
  dwAcquirePrivateKeyFlags : LibC::UInt32
  cIssuer : LibC::UInt32
  rgIssuer : CRYPTOAPI_BLOB*
  pfnFindCallback : PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK
  pvFindArg : LibC::Void*
end
struct CERT_CHAIN_POLICY_PARA
  cbSize : LibC::UInt32
  dwFlags : CERT_CHAIN_POLICY_FLAGS
  pvExtraPolicyPara : LibC::Void*
end
struct CERT_CHAIN_POLICY_STATUS
  cbSize : LibC::UInt32
  dwError : LibC::UInt32
  lChainIndex : LibC::Int32
  lElementIndex : LibC::Int32
  pvExtraPolicyStatus : LibC::Void*
end
struct AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA
  cbSize : LibC::UInt32
  dwRegPolicySettings : LibC::UInt32
  pSignerInfo : CMSG_SIGNER_INFO*
end
struct AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS
  cbSize : LibC::UInt32
  fCommercial : BOOL
end
struct AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA
  cbSize : LibC::UInt32
  dwRegPolicySettings : LibC::UInt32
  fCommercial : BOOL
end
type Rabbit542a97c720cd = LibC::UInt32 | LibC::UInt32
struct HTTPSPolicyCallbackData
  dwAuthType : HTTPSPOLICY_CALLBACK_DATA_AUTH_TYPE
  fdwChecks : LibC::UInt32
  pwszServerName : PWSTR
end
struct EV_EXTRA_CERT_CHAIN_POLICY_PARA
  cbSize : LibC::UInt32
  dwRootProgramQualifierFlags : CERT_ROOT_PROGRAM_FLAGS
end
struct EV_EXTRA_CERT_CHAIN_POLICY_STATUS
  cbSize : LibC::UInt32
  dwQualifiers : LibC::UInt32
  dwIssuanceUsageIndex : LibC::UInt32
end
struct SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS
  cbSize : LibC::UInt32
  dwErrorLevel : LibC::UInt32
  dwErrorCategory : LibC::UInt32
  dwReserved : LibC::UInt32
  wszErrorText : Array(LibC::Char)
end
struct SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA
  cbSize : LibC::UInt32
  dwReserved : LibC::UInt32
  pwszServerName : PWSTR
  rgpszHpkpValue : Array(PSTR)
end
struct SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA
  cbSize : LibC::UInt32
  dwReserved : LibC::UInt32
  pwszServerName : PWSTR
end
struct SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS
  cbSize : LibC::UInt32
  lError : LibC::Int32
  wszErrorText : Array(LibC::Char)
end
struct CRYPT_PKCS12_PBE_PARAMS
  iIterations : LibC::Int32
  cbSalt : LibC::UInt32
end
struct PKCS12_PBES2_EXPORT_PARAMS
  dwSize : LibC::UInt32
  hNcryptDescriptor : LibC::Void*
  pwszPbes2Alg : PWSTR
end
struct CERT_SERVER_OCSP_RESPONSE_CONTEXT
  cbSize : LibC::UInt32
  pbEncodedOcspResponse : LibC::Byte*
  cbEncodedOcspResponse : LibC::UInt32
end
alias PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK = (CERT_CHAIN_CONTEXT*, CERT_SERVER_OCSP_RESPONSE_CONTEXT*, CRL_CONTEXT*, CRL_CONTEXT*, LibC::Void*, LibC::UInt32 -> LibC::Void)
struct CERT_SERVER_OCSP_RESPONSE_OPEN_PARA
  cbSize : LibC::UInt32
  dwFlags : LibC::UInt32
  pcbUsedSize : LibC::UInt32*
  pwszOcspDirectory : PWSTR
  pfnUpdateCallback : PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK
  pvUpdateCallbackArg : LibC::Void*
end
struct CERT_SELECT_CHAIN_PARA
  hChainEngine : HCERTCHAINENGINE
  pTime : FILETIME*
  hAdditionalStore : LibC::Void*
  pChainPara : CERT_CHAIN_PARA*
  dwFlags : LibC::UInt32
end
struct CERT_SELECT_CRITERIA
  dwType : CERT_SELECT_CRITERIA_TYPE
  cPara : LibC::UInt32
  ppPara : LibC::Void**
end
struct CRYPT_TIMESTAMP_REQUEST
  dwVersion : CRYPT_TIMESTAMP_VERSION
  hashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  hashedMessage : CRYPTOAPI_BLOB
  pszTSAPolicyId : PSTR
  nonce : CRYPTOAPI_BLOB
  fCertReq : BOOL
  cExtension : LibC::UInt32
  rgExtension : CERT_EXTENSION*
end
struct CRYPT_TIMESTAMP_RESPONSE
  dwStatus : CRYPT_TIMESTAMP_RESPONSE_STATUS
  cFreeText : LibC::UInt32
  rgFreeText : PWSTR*
  failureInfo : CRYPT_BIT_BLOB
  contentInfo : CRYPTOAPI_BLOB
end
struct CRYPT_TIMESTAMP_ACCURACY
  dwSeconds : LibC::UInt32
  dwMillis : LibC::UInt32
  dwMicros : LibC::UInt32
end
struct CRYPT_TIMESTAMP_INFO
  dwVersion : LibC::UInt32
  pszTSAPolicyId : PSTR
  hashAlgorithm : CRYPT_ALGORITHM_IDENTIFIER
  hashedMessage : CRYPTOAPI_BLOB
  serialNumber : CRYPTOAPI_BLOB
  ftTime : FILETIME
  pvAccuracy : CRYPT_TIMESTAMP_ACCURACY*
  fOrdering : BOOL
  nonce : CRYPTOAPI_BLOB
  tsa : CRYPTOAPI_BLOB
  cExtension : LibC::UInt32
  rgExtension : CERT_EXTENSION*
end
struct CRYPT_TIMESTAMP_CONTEXT
  cbEncoded : LibC::UInt32
  pbEncoded : LibC::Byte*
  pTimeStamp : CRYPT_TIMESTAMP_INFO*
end
struct CRYPT_TIMESTAMP_PARA
  pszTSAPolicyId : PSTR
  fRequestCerts : BOOL
  nonce : CRYPTOAPI_BLOB
  cExtension : LibC::UInt32
  rgExtension : CERT_EXTENSION*
end
alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET = (LibC::Void*, CRYPTOAPI_BLOB*, LibC::UInt32, CRYPTOAPI_BLOB*, LibC::Byte**, LibC::UInt32*, PWSTR*, CRYPTOAPI_BLOB** -> BOOL)
alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE = (CRYPT_OBJECT_LOCATOR_RELEASE_REASON, LibC::Void* -> LibC::Void)
alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD = (LibC::Void*, PWSTR -> LibC::Void)
alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE = (LibC::Void*, LibC::Byte* -> LibC::Void)
alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER = (LibC::Void*, CRYPTOAPI_BLOB* -> LibC::Void)
struct CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE
  cbSize : LibC::UInt32
  pfnGet : PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET
  pfnRelease : PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE
  pfnFreePassword : PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD
  pfnFree : PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE
  pfnFreeIdentifier : PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER
end
alias PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE = (PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH, LibC::Void*, LibC::UInt32*, CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE**, LibC::Void** -> BOOL)
alias PFN_CERT_IS_WEAK_HASH = (LibC::UInt32, PWSTR, LibC::UInt32, CERT_CHAIN_CONTEXT*, FILETIME*, PWSTR -> BOOL)
struct CRYPTPROTECT_PROMPTSTRUCT
  cbSize : LibC::UInt32
  dwPromptFlags : LibC::UInt32
  hwndApp : HWND
  szPrompt : PWSTR
end
alias PFNCryptStreamOutputCallback = (LibC::Void*, LibC::Byte*, LibC::UIint*, BOOL -> LibC::Int32)
struct NCRYPT_PROTECT_STREAM_INFO
  pfnStreamOutput : PFNCryptStreamOutputCallback
  pvCallbackCtxt : LibC::Void*
end
alias PFNCryptStreamOutputCallbackEx = (LibC::Void*, LibC::Byte*, LibC::UIint*, NCRYPT_DESCRIPTOR_HANDLE, BOOL -> LibC::Int32)
struct NCRYPT_PROTECT_STREAM_INFO_EX
  pfnStreamOutput : PFNCryptStreamOutputCallbackEx
  pvCallbackCtxt : LibC::Void*
end
enum CRYPT_XML_CHARSET : Int32
CRYPT_XML_CHARSET_AUTO = 0

CRYPT_XML_CHARSET_UTF8 = 1

CRYPT_XML_CHARSET_UTF16LE = 2

CRYPT_XML_CHARSET_UTF16BE = 3

end
struct CRYPT_XML_BLOB
  dwCharset : CRYPT_XML_CHARSET
  cbData : LibC::UInt32
  pbData : LibC::Byte*
end
struct CRYPT_XML_DATA_BLOB
  cbData : LibC::UInt32
  pbData : LibC::Byte*
end
enum CRYPT_XML_PROPERTY_ID : Int32
CRYPT_XML_PROPERTY_MAX_HEAP_SIZE = 1

CRYPT_XML_PROPERTY_SIGNATURE_LOCATION = 2

CRYPT_XML_PROPERTY_MAX_SIGNATURES = 3

CRYPT_XML_PROPERTY_DOC_DECLARATION = 4

CRYPT_XML_PROPERTY_XML_OUTPUT_CHARSET = 5

end
struct CRYPT_XML_PROPERTY
  dwPropId : CRYPT_XML_PROPERTY_ID
  pvValue : LibC::Void*
  cbValue : LibC::UInt32
end
alias PFN_CRYPT_XML_WRITE_CALLBACK = (LibC::Void*, LibC::Byte*, LibC::UInt32 -> HRESULT)
alias PFN_CRYPT_XML_DATA_PROVIDER_READ = (LibC::Void*, LibC::Byte*, LibC::UInt32, LibC::UInt32* -> HRESULT)
alias PFN_CRYPT_XML_DATA_PROVIDER_CLOSE = (LibC::Void* -> HRESULT)
struct CRYPT_XML_DATA_PROVIDER
  pvCallbackState : LibC::Void*
  cbBufferSize : LibC::UInt32
  pfnRead : PFN_CRYPT_XML_DATA_PROVIDER_READ
  pfnClose : PFN_CRYPT_XML_DATA_PROVIDER_CLOSE
end
alias PFN_CRYPT_XML_CREATE_TRANSFORM = (CRYPT_XML_ALGORITHM*, CRYPT_XML_DATA_PROVIDER*, CRYPT_XML_DATA_PROVIDER* -> HRESULT)
struct CRYPT_XML_STATUS
  cbSize : LibC::UInt32
  dwErrorStatus : CRYPT_XML_STATUS_ERROR_STATUS
  dwInfoStatus : CRYPT_XML_STATUS_INFO_STATUS
end
struct CRYPT_XML_ALGORITHM
  cbSize : LibC::UInt32
  wszAlgorithm : PWSTR
  encoded : CRYPT_XML_BLOB
end
struct CRYPT_XML_TRANSFORM_INFO
  cbSize : LibC::UInt32
  wszAlgorithm : PWSTR
  cbBufferSize : LibC::UInt32
  dwFlags : CRYPT_XML_TRANSFORM_FLAGS
  pfnCreateTransform : PFN_CRYPT_XML_CREATE_TRANSFORM
end
struct CRYPT_XML_TRANSFORM_CHAIN_CONFIG
  cbSize : LibC::UInt32
  cTransformInfo : LibC::UInt32
  rgpTransformInfo : CRYPT_XML_TRANSFORM_INFO**
end
struct CRYPT_XML_KEY_DSA_KEY_VALUE
  p : CRYPT_XML_DATA_BLOB
  q : CRYPT_XML_DATA_BLOB
  g : CRYPT_XML_DATA_BLOB
  y : CRYPT_XML_DATA_BLOB
  j : CRYPT_XML_DATA_BLOB
  seed : CRYPT_XML_DATA_BLOB
  counter : CRYPT_XML_DATA_BLOB
end
struct CRYPT_XML_KEY_ECDSA_KEY_VALUE
  wszNamedCurve : PWSTR
  x : CRYPT_XML_DATA_BLOB
  y : CRYPT_XML_DATA_BLOB
  explicitPara : CRYPT_XML_BLOB
end
struct CRYPT_XML_KEY_RSA_KEY_VALUE
  modulus : CRYPT_XML_DATA_BLOB
  exponent : CRYPT_XML_DATA_BLOB
end
type Duck8dc204875ec8 = CRYPT_XML_KEY_DSA_KEY_VALUE | CRYPT_XML_KEY_RSA_KEY_VALUE | CRYPT_XML_KEY_ECDSA_KEY_VALUE | CRYPT_XML_BLOB
struct CRYPT_XML_KEY_VALUE
  dwType : CRYPT_XML_KEY_VALUE_TYPE
end
struct CRYPT_XML_ISSUER_SERIAL
  wszIssuer : PWSTR
  wszSerial : PWSTR
end
type Birdb06ccc7e456a = CRYPT_XML_ISSUER_SERIAL | CRYPT_XML_DATA_BLOB | PWSTR | CRYPT_XML_DATA_BLOB | CRYPT_XML_DATA_BLOB | CRYPT_XML_BLOB
struct CRYPT_XML_X509DATA_ITEM
  dwType : CRYPT_XML_X509DATA_TYPE
end
struct CRYPT_XML_X509DATA
  cX509Data : LibC::UInt32
  rgX509Data : CRYPT_XML_X509DATA_ITEM*
end
type Rabbit385ad3dfa2b2 = PWSTR | CRYPT_XML_KEY_VALUE | CRYPT_XML_BLOB | CRYPT_XML_X509DATA | CRYPT_XML_BLOB
struct CRYPT_XML_KEY_INFO_ITEM
  dwType : CRYPT_XML_KEYINFO_TYPE
end
struct CRYPT_XML_KEY_INFO
  cbSize : LibC::UInt32
  wszId : PWSTR
  cKeyInfo : LibC::UInt32
  rgKeyInfo : CRYPT_XML_KEY_INFO_ITEM*
  hVerifyKey : BCRYPT_KEY_HANDLE
end
struct CRYPT_XML_REFERENCE
  cbSize : LibC::UInt32
  hReference : LibC::Void*
  wszId : PWSTR
  wszUri : PWSTR
  wszType : PWSTR
  digestMethod : CRYPT_XML_ALGORITHM
  digestValue : CRYPTOAPI_BLOB
  cTransform : LibC::UInt32
  rgTransform : CRYPT_XML_ALGORITHM*
end
struct CRYPT_XML_REFERENCES
  cReference : LibC::UInt32
  rgpReference : CRYPT_XML_REFERENCE**
end
struct CRYPT_XML_SIGNED_INFO
  cbSize : LibC::UInt32
  wszId : PWSTR
  canonicalization : CRYPT_XML_ALGORITHM
  signatureMethod : CRYPT_XML_ALGORITHM
  cReference : LibC::UInt32
  rgpReference : CRYPT_XML_REFERENCE**
  encoded : CRYPT_XML_BLOB
end
struct CRYPT_XML_OBJECT
  cbSize : LibC::UInt32
  hObject : LibC::Void*
  wszId : PWSTR
  wszMimeType : PWSTR
  wszEncoding : PWSTR
  manifest : CRYPT_XML_REFERENCES
  encoded : CRYPT_XML_BLOB
end
struct CRYPT_XML_SIGNATURE
  cbSize : LibC::UInt32
  hSignature : LibC::Void*
  wszId : PWSTR
  signedInfo : CRYPT_XML_SIGNED_INFO
  signatureValue : CRYPTOAPI_BLOB
  pKeyInfo : CRYPT_XML_KEY_INFO*
  cObject : LibC::UInt32
  rgpObject : CRYPT_XML_OBJECT**
end
struct CRYPT_XML_DOC_CTXT
  cbSize : LibC::UInt32
  hDocCtxt : LibC::Void*
  pTransformsConfig : CRYPT_XML_TRANSFORM_CHAIN_CONFIG*
  cSignature : LibC::UInt32
  rgpSignature : CRYPT_XML_SIGNATURE**
end
struct CRYPT_XML_KEYINFO_PARAM
  wszId : PWSTR
  wszKeyName : PWSTR
  sKI : CRYPTOAPI_BLOB
  wszSubjectName : PWSTR
  cCertificate : LibC::UInt32
  rgCertificate : CRYPTOAPI_BLOB*
  cCRL : LibC::UInt32
  rgCRL : CRYPTOAPI_BLOB*
end
enum CRYPT_XML_KEYINFO_SPEC : Int32
CRYPT_XML_KEYINFO_SPEC_NONE = 0

CRYPT_XML_KEYINFO_SPEC_ENCODED = 1

CRYPT_XML_KEYINFO_SPEC_PARAM = 2

end
struct CRYPT_XML_ALGORITHM_INFO
  cbSize : LibC::UInt32
  wszAlgorithmURI : PWSTR
  wszName : PWSTR
  dwGroupId : CRYPT_XML_GROUP_ID
  wszCNGAlgid : PWSTR
  wszCNGExtraAlgid : PWSTR
  dwSignFlags : LibC::UInt32
  dwVerifyFlags : LibC::UInt32
  pvPaddingInfo : LibC::Void*
  pvExtraInfo : LibC::Void*
end
alias PFN_CRYPT_XML_ENUM_ALG_INFO = (CRYPT_XML_ALGORITHM_INFO*, LibC::Void* -> BOOL)
alias CryptXmlDllGetInterface = (LibC::UInt32, CRYPT_XML_ALGORITHM_INFO*, CRYPT_XML_CRYPTOGRAPHIC_INTERFACE* -> HRESULT)
alias CryptXmlDllEncodeAlgorithm = (CRYPT_XML_ALGORITHM_INFO*, CRYPT_XML_CHARSET, LibC::Void*, PFN_CRYPT_XML_WRITE_CALLBACK -> HRESULT)
alias CryptXmlDllCreateDigest = (CRYPT_XML_ALGORITHM*, LibC::UInt32*, LibC::Void** -> HRESULT)
alias CryptXmlDllDigestData = (LibC::Void*, LibC::Byte*, LibC::UInt32 -> HRESULT)
alias CryptXmlDllFinalizeDigest = (LibC::Void*, LibC::Byte*, LibC::UInt32 -> HRESULT)
alias CryptXmlDllCloseDigest = (LibC::Void* -> HRESULT)
alias CryptXmlDllSignData = (CRYPT_XML_ALGORITHM*, LibC::UIint*, LibC::UInt32, LibC::Byte*, LibC::UInt32, LibC::Byte*, LibC::UInt32, LibC::UInt32* -> HRESULT)
alias CryptXmlDllVerifySignature = (CRYPT_XML_ALGORITHM*, BCRYPT_KEY_HANDLE, LibC::Byte*, LibC::UInt32, LibC::Byte*, LibC::UInt32 -> HRESULT)
alias CryptXmlDllGetAlgorithmInfo = (CRYPT_XML_ALGORITHM*, CRYPT_XML_ALGORITHM_INFO** -> HRESULT)
struct CRYPT_XML_CRYPTOGRAPHIC_INTERFACE
  cbSize : LibC::UInt32
  fpCryptXmlEncodeAlgorithm : CryptXmlDllEncodeAlgorithm
  fpCryptXmlCreateDigest : CryptXmlDllCreateDigest
  fpCryptXmlDigestData : CryptXmlDllDigestData
  fpCryptXmlFinalizeDigest : CryptXmlDllFinalizeDigest
  fpCryptXmlCloseDigest : CryptXmlDllCloseDigest
  fpCryptXmlSignData : CryptXmlDllSignData
  fpCryptXmlVerifySignature : CryptXmlDllVerifySignature
  fpCryptXmlGetAlgorithmInfo : CryptXmlDllGetAlgorithmInfo
end
alias CryptXmlDllEncodeKeyValue = (LibC::UIint*, CRYPT_XML_CHARSET, LibC::Void*, PFN_CRYPT_XML_WRITE_CALLBACK -> HRESULT)
alias CryptXmlDllCreateKey = (CRYPT_XML_BLOB*, BCRYPT_KEY_HANDLE* -> HRESULT)
enum HandleType : Int32
Asymmetric = 1

Symmetric = 2

Transform = 3

Hash = 4

end
enum PaddingMode : Int32
None = 1

PKCS7 = 2

Zeros = 3

ANSIX923 = 4

ISO10126 = 5

end
enum Direction : Int32
DirectionEncrypt = 1

DirectionDecrypt = 2

end
struct INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS
  keySize : LibC::Int32
  keyExchangeAlgorithm : PWSTR
  signatureAlgorithm : PWSTR
end
struct INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS
  keySize : LibC::Int32
  blockSize : LibC::Int32
  feedbackSize : LibC::Int32
end
struct INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS
  inputBlockSize : LibC::Int32
  outputBlockSize : LibC::Int32
  canTransformMultipleBlocks : BOOL
  canReuseTransform : BOOL
end
struct INFORMATIONCARD_HASH_CRYPTO_PARAMETERS
  hashSize : LibC::Int32
  transform : INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS
end
struct INFORMATIONCARD_CRYPTO_HANDLE
  type : HandleType
  expiration : LibC::Int64
  cryptoParameters : LibC::Void*
end
struct GENERIC_XML_TOKEN
  createDate : FILETIME
  expiryDate : FILETIME
  xmlToken : PWSTR
  internalTokenReference : PWSTR
  externalTokenReference : PWSTR
end
struct POLICY_ELEMENT
  targetEndpointAddress : PWSTR
  issuerEndpointAddress : PWSTR
  issuedTokenParameters : PWSTR
  privacyNoticeLink : PWSTR
  privacyNoticeVersion : LibC::UInt32
  useManagedPresentation : BOOL
end
struct ENDPOINTADDRESS
  serviceUrl : PWSTR
  policyUrl : PWSTR
  rawCertificate : CRYPTOAPI_BLOB
end
struct ENDPOINTADDRESS2
  serviceUrl : PWSTR
  policyUrl : PWSTR
  identityType : LibC::UInt32
  identityBytes : LibC::Void*
end
struct CERTIFICATE_CHAIN_BLOB
  certCount : LibC::UInt32
  rawCertificates : CRYPTOAPI_BLOB*
end
struct CLAIMLIST
  count : LibC::UInt32
  claims : PWSTR*
end
struct RECIPIENTPOLICY
  recipient : ENDPOINTADDRESS
  issuer : ENDPOINTADDRESS
  tokenType : PWSTR
  requiredClaims : CLAIMLIST
  optionalClaims : CLAIMLIST
  privacyUrl : PWSTR
  privacyVersion : LibC::UInt32
end
struct RECIPIENTPOLICY2
  recipient : ENDPOINTADDRESS2
  issuer : ENDPOINTADDRESS2
  tokenType : PWSTR
  requiredClaims : CLAIMLIST
  optionalClaims : CLAIMLIST
  privacyUrl : PWSTR
  privacyVersion : LibC::UInt32
end
enum CASetupProperty : Int32
ENUM_SETUPPROP_INVALID = -1

ENUM_SETUPPROP_CATYPE = 0

ENUM_SETUPPROP_CAKEYINFORMATION = 1

ENUM_SETUPPROP_INTERACTIVE = 2

ENUM_SETUPPROP_CANAME = 3

ENUM_SETUPPROP_CADSSUFFIX = 4

ENUM_SETUPPROP_VALIDITYPERIOD = 5

ENUM_SETUPPROP_VALIDITYPERIODUNIT = 6

ENUM_SETUPPROP_EXPIRATIONDATE = 7

ENUM_SETUPPROP_PRESERVEDATABASE = 8

ENUM_SETUPPROP_DATABASEDIRECTORY = 9

ENUM_SETUPPROP_LOGDIRECTORY = 10

ENUM_SETUPPROP_SHAREDFOLDER = 11

ENUM_SETUPPROP_PARENTCAMACHINE = 12

ENUM_SETUPPROP_PARENTCANAME = 13

ENUM_SETUPPROP_REQUESTFILE = 14

ENUM_SETUPPROP_WEBCAMACHINE = 15

ENUM_SETUPPROP_WEBCANAME = 16

end
enum MSCEPSetupProperty : Int32
ENUM_CEPSETUPPROP_USELOCALSYSTEM = 0

ENUM_CEPSETUPPROP_USECHALLENGE = 1

ENUM_CEPSETUPPROP_RANAME_CN = 2

ENUM_CEPSETUPPROP_RANAME_EMAIL = 3

ENUM_CEPSETUPPROP_RANAME_COMPANY = 4

ENUM_CEPSETUPPROP_RANAME_DEPT = 5

ENUM_CEPSETUPPROP_RANAME_CITY = 6

ENUM_CEPSETUPPROP_RANAME_STATE = 7

ENUM_CEPSETUPPROP_RANAME_COUNTRY = 8

ENUM_CEPSETUPPROP_SIGNINGKEYINFORMATION = 9

ENUM_CEPSETUPPROP_EXCHANGEKEYINFORMATION = 10

ENUM_CEPSETUPPROP_CAINFORMATION = 11

ENUM_CEPSETUPPROP_MSCEPURL = 12

ENUM_CEPSETUPPROP_CHALLENGEURL = 13

end
enum CESSetupProperty : Int32
ENUM_CESSETUPPROP_USE_IISAPPPOOLIDENTITY = 0

ENUM_CESSETUPPROP_CACONFIG = 1

ENUM_CESSETUPPROP_AUTHENTICATION = 2

ENUM_CESSETUPPROP_SSLCERTHASH = 3

ENUM_CESSETUPPROP_URL = 4

ENUM_CESSETUPPROP_RENEWALONLY = 5

ENUM_CESSETUPPROP_ALLOW_KEYBASED_RENEWAL = 6

end
enum CEPSetupProperty : Int32
ENUM_CEPSETUPPROP_AUTHENTICATION = 0

ENUM_CEPSETUPPROP_SSLCERTHASH = 1

ENUM_CEPSETUPPROP_URL = 2

ENUM_CEPSETUPPROP_KEYBASED_RENEWAL = 3

end
fun cryptAcquireContextA(phProv : LibC::UIint**, szContainer : PSTR, szProvider : PSTR, dwProvType : LibC::UInt32, dwFlags : LibC::UInt32) : BOOL
fun cryptAcquireContextW(phProv : LibC::UIint**, szContainer : PWSTR, szProvider : PWSTR, dwProvType : LibC::UInt32, dwFlags : LibC::UInt32) : BOOL
fun cryptReleaseContext(hProv : LibC::UIint*, dwFlags : LibC::UInt32) : BOOL
fun cryptGenKey(hProv : LibC::UIint*, algid : LibC::UInt32, dwFlags : CRYPT_KEY_FLAGS, phKey : LibC::UIint**) : BOOL
fun cryptDeriveKey(hProv : LibC::UIint*, algid : LibC::UInt32, hBaseData : LibC::UIint*, dwFlags : LibC::UInt32, phKey : LibC::UIint**) : BOOL
fun cryptDestroyKey(hKey : LibC::UIint*) : BOOL
fun cryptSetKeyParam(hKey : LibC::UIint*, dwParam : CRYPT_KEY_PARAM_ID, pbData : LibC::Byte*, dwFlags : LibC::UInt32) : BOOL
fun cryptGetKeyParam(hKey : LibC::UIint*, dwParam : CRYPT_KEY_PARAM_ID, pbData : LibC::Byte*, pdwDataLen : LibC::UInt32*, dwFlags : LibC::UInt32) : BOOL
fun cryptSetHashParam(hHash : LibC::UIint*, dwParam : CRYPT_SET_HASH_PARAM, pbData : LibC::Byte*, dwFlags : LibC::UInt32) : BOOL
fun cryptGetHashParam(hHash : LibC::UIint*, dwParam : LibC::UInt32, pbData : LibC::Byte*, pdwDataLen : LibC::UInt32*, dwFlags : LibC::UInt32) : BOOL
fun cryptSetProvParam(hProv : LibC::UIint*, dwParam : CRYPT_SET_PROV_PARAM_ID, pbData : LibC::Byte*, dwFlags : LibC::UInt32) : BOOL
fun cryptGetProvParam(hProv : LibC::UIint*, dwParam : LibC::UInt32, pbData : LibC::Byte*, pdwDataLen : LibC::UInt32*, dwFlags : LibC::UInt32) : BOOL
fun cryptGenRandom(hProv : LibC::UIint*, dwLen : LibC::UInt32, pbBuffer : LibC::Byte*) : BOOL
fun cryptGetUserKey(hProv : LibC::UIint*, dwKeySpec : LibC::UInt32, phUserKey : LibC::UIint**) : BOOL
fun cryptExportKey(hKey : LibC::UIint*, hExpKey : LibC::UIint*, dwBlobType : LibC::UInt32, dwFlags : CRYPT_KEY_FLAGS, pbData : LibC::Byte*, pdwDataLen : LibC::UInt32*) : BOOL
fun cryptImportKey(hProv : LibC::UIint*, pbData : LibC::Byte*, dwDataLen : LibC::UInt32, hPubKey : LibC::UIint*, dwFlags : CRYPT_KEY_FLAGS, phKey : LibC::UIint**) : BOOL
fun cryptEncrypt(hKey : LibC::UIint*, hHash : LibC::UIint*, final : BOOL, dwFlags : LibC::UInt32, pbData : LibC::Byte*, pdwDataLen : LibC::UInt32*, dwBufLen : LibC::UInt32) : BOOL
fun cryptDecrypt(hKey : LibC::UIint*, hHash : LibC::UIint*, final : BOOL, dwFlags : LibC::UInt32, pbData : LibC::Byte*, pdwDataLen : LibC::UInt32*) : BOOL
fun cryptCreateHash(hProv : LibC::UIint*, algid : LibC::UInt32, hKey : LibC::UIint*, dwFlags : LibC::UInt32, phHash : LibC::UIint**) : BOOL
fun cryptHashData(hHash : LibC::UIint*, pbData : LibC::Byte*, dwDataLen : LibC::UInt32, dwFlags : LibC::UInt32) : BOOL
fun cryptHashSessionKey(hHash : LibC::UIint*, hKey : LibC::UIint*, dwFlags : LibC::UInt32) : BOOL
fun cryptDestroyHash(hHash : LibC::UIint*) : BOOL
fun cryptSignHashA(hHash : LibC::UIint*, dwKeySpec : LibC::UInt32, szDescription : PSTR, dwFlags : LibC::UInt32, pbSignature : LibC::Byte*, pdwSigLen : LibC::UInt32*) : BOOL
fun cryptSignHashW(hHash : LibC::UIint*, dwKeySpec : LibC::UInt32, szDescription : PWSTR, dwFlags : LibC::UInt32, pbSignature : LibC::Byte*, pdwSigLen : LibC::UInt32*) : BOOL
fun cryptVerifySignatureA(hHash : LibC::UIint*, pbSignature : LibC::Byte*, dwSigLen : LibC::UInt32, hPubKey : LibC::UIint*, szDescription : PSTR, dwFlags : LibC::UInt32) : BOOL
fun cryptVerifySignatureW(hHash : LibC::UIint*, pbSignature : LibC::Byte*, dwSigLen : LibC::UInt32, hPubKey : LibC::UIint*, szDescription : PWSTR, dwFlags : LibC::UInt32) : BOOL
fun cryptSetProviderA(pszProvName : PSTR, dwProvType : LibC::UInt32) : BOOL
fun cryptSetProviderW(pszProvName : PWSTR, dwProvType : LibC::UInt32) : BOOL
fun cryptSetProviderExA(pszProvName : PSTR, dwProvType : LibC::UInt32, pdwReserved : LibC::UInt32*, dwFlags : LibC::UInt32) : BOOL
fun cryptSetProviderExW(pszProvName : PWSTR, dwProvType : LibC::UInt32, pdwReserved : LibC::UInt32*, dwFlags : LibC::UInt32) : BOOL
fun cryptGetDefaultProviderA(dwProvType : LibC::UInt32, pdwReserved : LibC::UInt32*, dwFlags : LibC::UInt32, pszProvName : PSTR, pcbProvName : LibC::UInt32*) : BOOL
fun cryptGetDefaultProviderW(dwProvType : LibC::UInt32, pdwReserved : LibC::UInt32*, dwFlags : LibC::UInt32, pszProvName : PWSTR, pcbProvName : LibC::UInt32*) : BOOL
fun cryptEnumProviderTypesA(dwIndex : LibC::UInt32, pdwReserved : LibC::UInt32*, dwFlags : LibC::UInt32, pdwProvType : LibC::UInt32*, szTypeName : PSTR, pcbTypeName : LibC::UInt32*) : BOOL
fun cryptEnumProviderTypesW(dwIndex : LibC::UInt32, pdwReserved : LibC::UInt32*, dwFlags : LibC::UInt32, pdwProvType : LibC::UInt32*, szTypeName : PWSTR, pcbTypeName : LibC::UInt32*) : BOOL
fun cryptEnumProvidersA(dwIndex : LibC::UInt32, pdwReserved : LibC::UInt32*, dwFlags : LibC::UInt32, pdwProvType : LibC::UInt32*, szProvName : PSTR, pcbProvName : LibC::UInt32*) : BOOL
fun cryptEnumProvidersW(dwIndex : LibC::UInt32, pdwReserved : LibC::UInt32*, dwFlags : LibC::UInt32, pdwProvType : LibC::UInt32*, szProvName : PWSTR, pcbProvName : LibC::UInt32*) : BOOL
fun cryptContextAddRef(hProv : LibC::UIint*, pdwReserved : LibC::UInt32*, dwFlags : LibC::UInt32) : BOOL
fun cryptDuplicateKey(hKey : LibC::UIint*, pdwReserved : LibC::UInt32*, dwFlags : LibC::UInt32, phKey : LibC::UIint**) : BOOL
fun cryptDuplicateHash(hHash : LibC::UIint*, pdwReserved : LibC::UInt32*, dwFlags : LibC::UInt32, phHash : LibC::UIint**) : BOOL
fun bCryptOpenAlgorithmProvider(phAlgorithm : BCRYPT_ALG_HANDLE*, pszAlgId : PWSTR, pszImplementation : PWSTR, dwFlags : BCRYPT_OPEN_ALGORITHM_PROVIDER_FLAGS) : NTSTATUS
fun bCryptEnumAlgorithms(dwAlgOperations : BCRYPT_OPERATION, pAlgCount : LibC::UInt32*, ppAlgList : BCRYPT_ALGORITHM_IDENTIFIER**, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptEnumProviders(pszAlgId : PWSTR, pImplCount : LibC::UInt32*, ppImplList : BCRYPT_PROVIDER_NAME**, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptGetProperty(hObject : LibC::Void*, pszProperty : PWSTR, pbOutput : LibC::Byte*, cbOutput : LibC::UInt32, pcbResult : LibC::UInt32*, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptSetProperty(hObject : LibC::Void*, pszProperty : PWSTR, pbInput : LibC::Byte*, cbInput : LibC::UInt32, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptCloseAlgorithmProvider(hAlgorithm : BCRYPT_ALG_HANDLE, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptFreeBuffer(pvBuffer : LibC::Void*) : LibC::Void
fun bCryptGenerateSymmetricKey(hAlgorithm : BCRYPT_ALG_HANDLE, phKey : BCRYPT_KEY_HANDLE*, pbKeyObject : LibC::Byte*, cbKeyObject : LibC::UInt32, pbSecret : LibC::Byte*, cbSecret : LibC::UInt32, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptGenerateKeyPair(hAlgorithm : BCRYPT_ALG_HANDLE, phKey : BCRYPT_KEY_HANDLE*, dwLength : LibC::UInt32, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptEncrypt(hKey : BCRYPT_KEY_HANDLE, pbInput : LibC::Byte*, cbInput : LibC::UInt32, pPaddingInfo : LibC::Void*, pbIV : LibC::Byte*, cbIV : LibC::UInt32, pbOutput : LibC::Byte*, cbOutput : LibC::UInt32, pcbResult : LibC::UInt32*, dwFlags : NCRYPT_FLAGS) : NTSTATUS
fun bCryptDecrypt(hKey : BCRYPT_KEY_HANDLE, pbInput : LibC::Byte*, cbInput : LibC::UInt32, pPaddingInfo : LibC::Void*, pbIV : LibC::Byte*, cbIV : LibC::UInt32, pbOutput : LibC::Byte*, cbOutput : LibC::UInt32, pcbResult : LibC::UInt32*, dwFlags : NCRYPT_FLAGS) : NTSTATUS
fun bCryptExportKey(hKey : BCRYPT_KEY_HANDLE, hExportKey : BCRYPT_KEY_HANDLE, pszBlobType : PWSTR, pbOutput : LibC::Byte*, cbOutput : LibC::UInt32, pcbResult : LibC::UInt32*, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptImportKey(hAlgorithm : BCRYPT_ALG_HANDLE, hImportKey : BCRYPT_KEY_HANDLE, pszBlobType : PWSTR, phKey : BCRYPT_KEY_HANDLE*, pbKeyObject : LibC::Byte*, cbKeyObject : LibC::UInt32, pbInput : LibC::Byte*, cbInput : LibC::UInt32, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptImportKeyPair(hAlgorithm : BCRYPT_ALG_HANDLE, hImportKey : BCRYPT_KEY_HANDLE, pszBlobType : PWSTR, phKey : BCRYPT_KEY_HANDLE*, pbInput : LibC::Byte*, cbInput : LibC::UInt32, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptDuplicateKey(hKey : BCRYPT_KEY_HANDLE, phNewKey : BCRYPT_KEY_HANDLE*, pbKeyObject : LibC::Byte*, cbKeyObject : LibC::UInt32, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptFinalizeKeyPair(hKey : BCRYPT_KEY_HANDLE, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptDestroyKey(hKey : BCRYPT_KEY_HANDLE) : NTSTATUS
fun bCryptDestroySecret(hSecret : LibC::Void*) : NTSTATUS
fun bCryptSignHash(hKey : BCRYPT_KEY_HANDLE, pPaddingInfo : LibC::Void*, pbInput : LibC::Byte*, cbInput : LibC::UInt32, pbOutput : LibC::Byte*, cbOutput : LibC::UInt32, pcbResult : LibC::UInt32*, dwFlags : NCRYPT_FLAGS) : NTSTATUS
fun bCryptVerifySignature(hKey : BCRYPT_KEY_HANDLE, pPaddingInfo : LibC::Void*, pbHash : LibC::Byte*, cbHash : LibC::UInt32, pbSignature : LibC::Byte*, cbSignature : LibC::UInt32, dwFlags : NCRYPT_FLAGS) : NTSTATUS
fun bCryptSecretAgreement(hPrivKey : BCRYPT_KEY_HANDLE, hPubKey : BCRYPT_KEY_HANDLE, phAgreedSecret : LibC::Void**, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptDeriveKey(hSharedSecret : LibC::Void*, pwszKDF : PWSTR, pParameterList : BCryptBufferDesc*, pbDerivedKey : LibC::Byte*, cbDerivedKey : LibC::UInt32, pcbResult : LibC::UInt32*, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptKeyDerivation(hKey : BCRYPT_KEY_HANDLE, pParameterList : BCryptBufferDesc*, pbDerivedKey : LibC::Byte*, cbDerivedKey : LibC::UInt32, pcbResult : LibC::UInt32*, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptCreateHash(hAlgorithm : BCRYPT_ALG_HANDLE, phHash : LibC::Void**, pbHashObject : LibC::Byte*, cbHashObject : LibC::UInt32, pbSecret : LibC::Byte*, cbSecret : LibC::UInt32, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptHashData(hHash : LibC::Void*, pbInput : LibC::Byte*, cbInput : LibC::UInt32, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptFinishHash(hHash : LibC::Void*, pbOutput : LibC::Byte*, cbOutput : LibC::UInt32, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptCreateMultiHash(hAlgorithm : BCRYPT_ALG_HANDLE, phHash : LibC::Void**, nHashes : LibC::UInt32, pbHashObject : LibC::Byte*, cbHashObject : LibC::UInt32, pbSecret : LibC::Byte*, cbSecret : LibC::UInt32, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptProcessMultiOperations(hObject : LibC::Void*, operationType : BCRYPT_MULTI_OPERATION_TYPE, pOperations : LibC::Void*, cbOperations : LibC::UInt32, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptDuplicateHash(hHash : LibC::Void*, phNewHash : LibC::Void**, pbHashObject : LibC::Byte*, cbHashObject : LibC::UInt32, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptDestroyHash(hHash : LibC::Void*) : NTSTATUS
fun bCryptHash(hAlgorithm : BCRYPT_ALG_HANDLE, pbSecret : LibC::Byte*, cbSecret : LibC::UInt32, pbInput : LibC::Byte*, cbInput : LibC::UInt32, pbOutput : LibC::Byte*, cbOutput : LibC::UInt32) : NTSTATUS
fun bCryptGenRandom(hAlgorithm : BCRYPT_ALG_HANDLE, pbBuffer : LibC::Byte*, cbBuffer : LibC::UInt32, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptDeriveKeyCapi(hHash : LibC::Void*, hTargetAlg : BCRYPT_ALG_HANDLE, pbDerivedKey : LibC::Byte*, cbDerivedKey : LibC::UInt32, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptDeriveKeyPBKDF2(hPrf : BCRYPT_ALG_HANDLE, pbPassword : LibC::Byte*, cbPassword : LibC::UInt32, pbSalt : LibC::Byte*, cbSalt : LibC::UInt32, cIterations : LibC::UInt64, pbDerivedKey : LibC::Byte*, cbDerivedKey : LibC::UInt32, dwFlags : LibC::UInt32) : NTSTATUS
fun bCryptQueryProviderRegistration(pszProvider : PWSTR, dwMode : BCRYPT_QUERY_PROVIDER_MODE, dwInterface : BCRYPT_INTERFACE, pcbBuffer : LibC::UInt32*, ppBuffer : CRYPT_PROVIDER_REG**) : NTSTATUS
fun bCryptEnumRegisteredProviders(pcbBuffer : LibC::UInt32*, ppBuffer : CRYPT_PROVIDERS**) : NTSTATUS
fun bCryptCreateContext(dwTable : BCRYPT_TABLE, pszContext : PWSTR, pConfig : CRYPT_CONTEXT_CONFIG*) : NTSTATUS
fun bCryptDeleteContext(dwTable : BCRYPT_TABLE, pszContext : PWSTR) : NTSTATUS
fun bCryptEnumContexts(dwTable : BCRYPT_TABLE, pcbBuffer : LibC::UInt32*, ppBuffer : CRYPT_CONTEXTS**) : NTSTATUS
fun bCryptConfigureContext(dwTable : BCRYPT_TABLE, pszContext : PWSTR, pConfig : CRYPT_CONTEXT_CONFIG*) : NTSTATUS
fun bCryptQueryContextConfiguration(dwTable : BCRYPT_TABLE, pszContext : PWSTR, pcbBuffer : LibC::UInt32*, ppBuffer : CRYPT_CONTEXT_CONFIG**) : NTSTATUS
fun bCryptAddContextFunction(dwTable : BCRYPT_TABLE, pszContext : PWSTR, dwInterface : BCRYPT_INTERFACE, pszFunction : PWSTR, dwPosition : LibC::UInt32) : NTSTATUS
fun bCryptRemoveContextFunction(dwTable : BCRYPT_TABLE, pszContext : PWSTR, dwInterface : BCRYPT_INTERFACE, pszFunction : PWSTR) : NTSTATUS
fun bCryptEnumContextFunctions(dwTable : BCRYPT_TABLE, pszContext : PWSTR, dwInterface : BCRYPT_INTERFACE, pcbBuffer : LibC::UInt32*, ppBuffer : CRYPT_CONTEXT_FUNCTIONS**) : NTSTATUS
fun bCryptConfigureContextFunction(dwTable : BCRYPT_TABLE, pszContext : PWSTR, dwInterface : BCRYPT_INTERFACE, pszFunction : PWSTR, pConfig : CRYPT_CONTEXT_FUNCTION_CONFIG*) : NTSTATUS
fun bCryptQueryContextFunctionConfiguration(dwTable : BCRYPT_TABLE, pszContext : PWSTR, dwInterface : BCRYPT_INTERFACE, pszFunction : PWSTR, pcbBuffer : LibC::UInt32*, ppBuffer : CRYPT_CONTEXT_FUNCTION_CONFIG**) : NTSTATUS
fun bCryptEnumContextFunctionProviders(dwTable : BCRYPT_TABLE, pszContext : PWSTR, dwInterface : BCRYPT_INTERFACE, pszFunction : PWSTR, pcbBuffer : LibC::UInt32*, ppBuffer : CRYPT_CONTEXT_FUNCTION_PROVIDERS**) : NTSTATUS
fun bCryptSetContextFunctionProperty(dwTable : BCRYPT_TABLE, pszContext : PWSTR, dwInterface : BCRYPT_INTERFACE, pszFunction : PWSTR, pszProperty : PWSTR, cbValue : LibC::UInt32, pbValue : LibC::Byte*) : NTSTATUS
fun bCryptQueryContextFunctionProperty(dwTable : BCRYPT_TABLE, pszContext : PWSTR, dwInterface : BCRYPT_INTERFACE, pszFunction : PWSTR, pszProperty : PWSTR, pcbValue : LibC::UInt32*, ppbValue : LibC::Byte**) : NTSTATUS
fun bCryptRegisterConfigChangeNotify(phEvent : HANDLE*) : NTSTATUS
fun bCryptUnregisterConfigChangeNotify(hEvent : HANDLE) : NTSTATUS
fun bCryptResolveProviders(pszContext : PWSTR, dwInterface : LibC::UInt32, pszFunction : PWSTR, pszProvider : PWSTR, dwMode : BCRYPT_QUERY_PROVIDER_MODE, dwFlags : BCRYPT_RESOLVE_PROVIDERS_FLAGS, pcbBuffer : LibC::UInt32*, ppBuffer : CRYPT_PROVIDER_REFS**) : NTSTATUS
fun bCryptGetFipsAlgorithmMode(pfEnabled : LibC::Byte*) : NTSTATUS
fun nCryptOpenStorageProvider(phProvider : LibC::UIint**, pszProviderName : PWSTR, dwFlags : LibC::UInt32) : LibC::Int32
fun nCryptEnumAlgorithms(hProvider : LibC::UIint*, dwAlgOperations : NCRYPT_OPERATION, pdwAlgCount : LibC::UInt32*, ppAlgList : NCryptAlgorithmName**, dwFlags : LibC::UInt32) : LibC::Int32
fun nCryptIsAlgSupported(hProvider : LibC::UIint*, pszAlgId : PWSTR, dwFlags : LibC::UInt32) : LibC::Int32
fun nCryptEnumKeys(hProvider : LibC::UIint*, pszScope : PWSTR, ppKeyName : NCryptKeyName**, ppEnumState : LibC::Void**, dwFlags : NCRYPT_FLAGS) : LibC::Int32
fun nCryptEnumStorageProviders(pdwProviderCount : LibC::UInt32*, ppProviderList : NCryptProviderName**, dwFlags : LibC::UInt32) : LibC::Int32
fun nCryptFreeBuffer(pvInput : LibC::Void*) : LibC::Int32
fun nCryptOpenKey(hProvider : LibC::UIint*, phKey : LibC::UIint**, pszKeyName : PWSTR, dwLegacyKeySpec : CERT_KEY_SPEC, dwFlags : NCRYPT_FLAGS) : LibC::Int32
fun nCryptCreatePersistedKey(hProvider : LibC::UIint*, phKey : LibC::UIint**, pszAlgId : PWSTR, pszKeyName : PWSTR, dwLegacyKeySpec : CERT_KEY_SPEC, dwFlags : NCRYPT_FLAGS) : LibC::Int32
fun nCryptGetProperty(hObject : LibC::UIint*, pszProperty : PWSTR, pbOutput : LibC::Byte*, cbOutput : LibC::UInt32, pcbResult : LibC::UInt32*, dwFlags : OBJECT_SECURITY_INFORMATION) : LibC::Int32
fun nCryptSetProperty(hObject : LibC::UIint*, pszProperty : PWSTR, pbInput : LibC::Byte*, cbInput : LibC::UInt32, dwFlags : NCRYPT_FLAGS) : LibC::Int32
fun nCryptFinalizeKey(hKey : LibC::UIint*, dwFlags : NCRYPT_FLAGS) : LibC::Int32
fun nCryptEncrypt(hKey : LibC::UIint*, pbInput : LibC::Byte*, cbInput : LibC::UInt32, pPaddingInfo : LibC::Void*, pbOutput : LibC::Byte*, cbOutput : LibC::UInt32, pcbResult : LibC::UInt32*, dwFlags : NCRYPT_FLAGS) : LibC::Int32
fun nCryptDecrypt(hKey : LibC::UIint*, pbInput : LibC::Byte*, cbInput : LibC::UInt32, pPaddingInfo : LibC::Void*, pbOutput : LibC::Byte*, cbOutput : LibC::UInt32, pcbResult : LibC::UInt32*, dwFlags : NCRYPT_FLAGS) : LibC::Int32
fun nCryptImportKey(hProvider : LibC::UIint*, hImportKey : LibC::UIint*, pszBlobType : PWSTR, pParameterList : BCryptBufferDesc*, phKey : LibC::UIint**, pbData : LibC::Byte*, cbData : LibC::UInt32, dwFlags : NCRYPT_FLAGS) : LibC::Int32
fun nCryptExportKey(hKey : LibC::UIint*, hExportKey : LibC::UIint*, pszBlobType : PWSTR, pParameterList : BCryptBufferDesc*, pbOutput : LibC::Byte*, cbOutput : LibC::UInt32, pcbResult : LibC::UInt32*, dwFlags : NCRYPT_FLAGS) : LibC::Int32
fun nCryptSignHash(hKey : LibC::UIint*, pPaddingInfo : LibC::Void*, pbHashValue : LibC::Byte*, cbHashValue : LibC::UInt32, pbSignature : LibC::Byte*, cbSignature : LibC::UInt32, pcbResult : LibC::UInt32*, dwFlags : NCRYPT_FLAGS) : LibC::Int32
fun nCryptVerifySignature(hKey : LibC::UIint*, pPaddingInfo : LibC::Void*, pbHashValue : LibC::Byte*, cbHashValue : LibC::UInt32, pbSignature : LibC::Byte*, cbSignature : LibC::UInt32, dwFlags : NCRYPT_FLAGS) : LibC::Int32
fun nCryptDeleteKey(hKey : LibC::UIint*, dwFlags : LibC::UInt32) : LibC::Int32
fun nCryptFreeObject(hObject : LibC::UIint*) : LibC::Int32
fun nCryptIsKeyHandle(hKey : LibC::UIint*) : BOOL
fun nCryptTranslateHandle(phProvider : LibC::UIint**, phKey : LibC::UIint**, hLegacyProv : LibC::UIint*, hLegacyKey : LibC::UIint*, dwLegacyKeySpec : CERT_KEY_SPEC, dwFlags : LibC::UInt32) : LibC::Int32
fun nCryptNotifyChangeKey(hProvider : LibC::UIint*, phEvent : HANDLE*, dwFlags : NCRYPT_FLAGS) : LibC::Int32
fun nCryptSecretAgreement(hPrivKey : LibC::UIint*, hPubKey : LibC::UIint*, phAgreedSecret : LibC::UIint**, dwFlags : NCRYPT_FLAGS) : LibC::Int32
fun nCryptDeriveKey(hSharedSecret : LibC::UIint*, pwszKDF : PWSTR, pParameterList : BCryptBufferDesc*, pbDerivedKey : LibC::Byte*, cbDerivedKey : LibC::UInt32, pcbResult : LibC::UInt32*, dwFlags : LibC::UInt32) : LibC::Int32
fun nCryptKeyDerivation(hKey : LibC::UIint*, pParameterList : BCryptBufferDesc*, pbDerivedKey : LibC::Byte*, cbDerivedKey : LibC::UInt32, pcbResult : LibC::UInt32*, dwFlags : LibC::UInt32) : LibC::Int32
fun nCryptCreateClaim(hSubjectKey : LibC::UIint*, hAuthorityKey : LibC::UIint*, dwClaimType : LibC::UInt32, pParameterList : BCryptBufferDesc*, pbClaimBlob : LibC::Byte*, cbClaimBlob : LibC::UInt32, pcbResult : LibC::UInt32*, dwFlags : LibC::UInt32) : LibC::Int32
fun nCryptVerifyClaim(hSubjectKey : LibC::UIint*, hAuthorityKey : LibC::UIint*, dwClaimType : LibC::UInt32, pParameterList : BCryptBufferDesc*, pbClaimBlob : LibC::Byte*, cbClaimBlob : LibC::UInt32, pOutput : BCryptBufferDesc*, dwFlags : LibC::UInt32) : LibC::Int32
fun cryptFormatObject(dwCertEncodingType : LibC::UInt32, dwFormatType : LibC::UInt32, dwFormatStrType : LibC::UInt32, pFormatStruct : LibC::Void*, lpszStructType : PSTR, pbEncoded : LibC::Byte*, cbEncoded : LibC::UInt32, pbFormat : LibC::Void*, pcbFormat : LibC::UInt32*) : BOOL
fun cryptEncodeObjectEx(dwCertEncodingType : CERT_QUERY_ENCODING_TYPE, lpszStructType : PSTR, pvStructInfo : LibC::Void*, dwFlags : CRYPT_ENCODE_OBJECT_FLAGS, pEncodePara : CRYPT_ENCODE_PARA*, pvEncoded : LibC::Void*, pcbEncoded : LibC::UInt32*) : BOOL
fun cryptEncodeObject(dwCertEncodingType : LibC::UInt32, lpszStructType : PSTR, pvStructInfo : LibC::Void*, pbEncoded : LibC::Byte*, pcbEncoded : LibC::UInt32*) : BOOL
fun cryptDecodeObjectEx(dwCertEncodingType : LibC::UInt32, lpszStructType : PSTR, pbEncoded : LibC::Byte*, cbEncoded : LibC::UInt32, dwFlags : LibC::UInt32, pDecodePara : CRYPT_DECODE_PARA*, pvStructInfo : LibC::Void*, pcbStructInfo : LibC::UInt32*) : BOOL
fun cryptDecodeObject(dwCertEncodingType : LibC::UInt32, lpszStructType : PSTR, pbEncoded : LibC::Byte*, cbEncoded : LibC::UInt32, dwFlags : LibC::UInt32, pvStructInfo : LibC::Void*, pcbStructInfo : LibC::UInt32*) : BOOL
fun cryptInitOIDFunctionSet(pszFuncName : PSTR, dwFlags : LibC::UInt32) : LibC::Void*
fun cryptGetOIDFunctionAddress(hFuncSet : LibC::Void*, dwEncodingType : LibC::UInt32, pszOID : PSTR, dwFlags : LibC::UInt32, ppvFuncAddr : LibC::Void**, phFuncAddr : LibC::Void**) : BOOL
fun cryptGetDefaultOIDFunctionAddress(hFuncSet : LibC::Void*, dwEncodingType : LibC::UInt32, pwszDll : PWSTR, dwFlags : LibC::UInt32, ppvFuncAddr : LibC::Void**, phFuncAddr : LibC::Void**) : BOOL
fun cryptFreeOIDFunctionAddress(hFuncAddr : LibC::Void*, dwFlags : LibC::UInt32) : BOOL
fun cryptRegisterOIDFunction(dwEncodingType : LibC::UInt32, pszFuncName : PSTR, pszOID : PSTR, pwszDll : PWSTR, pszOverrideFuncName : PSTR) : BOOL
fun cryptUnregisterOIDFunction(dwEncodingType : LibC::UInt32, pszFuncName : PSTR, pszOID : PSTR) : BOOL
fun cryptRegisterDefaultOIDFunction(dwEncodingType : LibC::UInt32, pszFuncName : PSTR, dwIndex : LibC::UInt32, pwszDll : PWSTR) : BOOL
fun cryptUnregisterDefaultOIDFunction(dwEncodingType : LibC::UInt32, pszFuncName : PSTR, pwszDll : PWSTR) : BOOL
fun cryptSetOIDFunctionValue(dwEncodingType : LibC::UInt32, pszFuncName : PSTR, pszOID : PSTR, pwszValueName : PWSTR, dwValueType : REG_VALUE_TYPE, pbValueData : LibC::Byte*, cbValueData : LibC::UInt32) : BOOL
fun cryptGetOIDFunctionValue(dwEncodingType : LibC::UInt32, pszFuncName : PSTR, pszOID : PSTR, pwszValueName : PWSTR, pdwValueType : LibC::UInt32*, pbValueData : LibC::Byte*, pcbValueData : LibC::UInt32*) : BOOL
fun cryptFindOIDInfo(dwKeyType : LibC::UInt32, pvKey : LibC::Void*, dwGroupId : LibC::UInt32) : CRYPT_OID_INFO*
fun cryptRegisterOIDInfo(pInfo : CRYPT_OID_INFO*, dwFlags : LibC::UInt32) : BOOL
fun cryptUnregisterOIDInfo(pInfo : CRYPT_OID_INFO*) : BOOL
fun cryptEnumOIDInfo(dwGroupId : LibC::UInt32, dwFlags : LibC::UInt32, pvArg : LibC::Void*, pfnEnumOIDInfo : PFN_CRYPT_ENUM_OID_INFO) : BOOL
fun cryptFindLocalizedName(pwszCryptName : PWSTR) : PWSTR
fun cryptMsgOpenToEncode(dwMsgEncodingType : LibC::UInt32, dwFlags : LibC::UInt32, dwMsgType : CRYPT_MSG_TYPE, pvMsgEncodeInfo : LibC::Void*, pszInnerContentObjID : PSTR, pStreamInfo : CMSG_STREAM_INFO*) : LibC::Void*
fun cryptMsgCalculateEncodedLength(dwMsgEncodingType : LibC::UInt32, dwFlags : LibC::UInt32, dwMsgType : LibC::UInt32, pvMsgEncodeInfo : LibC::Void*, pszInnerContentObjID : PSTR, cbData : LibC::UInt32) : LibC::UInt32
fun cryptMsgOpenToDecode(dwMsgEncodingType : LibC::UInt32, dwFlags : LibC::UInt32, dwMsgType : LibC::UInt32, hCryptProv : LibC::UIint*, pRecipientInfo : CERT_INFO*, pStreamInfo : CMSG_STREAM_INFO*) : LibC::Void*
fun cryptMsgDuplicate(hCryptMsg : LibC::Void*) : LibC::Void*
fun cryptMsgClose(hCryptMsg : LibC::Void*) : BOOL
fun cryptMsgUpdate(hCryptMsg : LibC::Void*, pbData : LibC::Byte*, cbData : LibC::UInt32, fFinal : BOOL) : BOOL
fun cryptMsgGetParam(hCryptMsg : LibC::Void*, dwParamType : LibC::UInt32, dwIndex : LibC::UInt32, pvData : LibC::Void*, pcbData : LibC::UInt32*) : BOOL
fun cryptMsgControl(hCryptMsg : LibC::Void*, dwFlags : LibC::UInt32, dwCtrlType : LibC::UInt32, pvCtrlPara : LibC::Void*) : BOOL
fun cryptMsgVerifyCountersignatureEncoded(hCryptProv : LibC::UIint*, dwEncodingType : LibC::UInt32, pbSignerInfo : LibC::Byte*, cbSignerInfo : LibC::UInt32, pbSignerInfoCountersignature : LibC::Byte*, cbSignerInfoCountersignature : LibC::UInt32, pciCountersigner : CERT_INFO*) : BOOL
fun cryptMsgVerifyCountersignatureEncodedEx(hCryptProv : LibC::UIint*, dwEncodingType : LibC::UInt32, pbSignerInfo : LibC::Byte*, cbSignerInfo : LibC::UInt32, pbSignerInfoCountersignature : LibC::Byte*, cbSignerInfoCountersignature : LibC::UInt32, dwSignerType : LibC::UInt32, pvSigner : LibC::Void*, dwFlags : LibC::UInt32, pvExtra : LibC::Void*) : BOOL
fun certOpenStore(lpszStoreProvider : PSTR, dwEncodingType : CERT_QUERY_ENCODING_TYPE, hCryptProv : LibC::UIint*, dwFlags : CERT_OPEN_STORE_FLAGS, pvPara : LibC::Void*) : LibC::Void*
fun certDuplicateStore(hCertStore : LibC::Void*) : LibC::Void*
fun certSaveStore(hCertStore : LibC::Void*, dwEncodingType : CERT_QUERY_ENCODING_TYPE, dwSaveAs : CERT_STORE_SAVE_AS, dwSaveTo : CERT_STORE_SAVE_TO, pvSaveToPara : LibC::Void*, dwFlags : LibC::UInt32) : BOOL
fun certCloseStore(hCertStore : LibC::Void*, dwFlags : LibC::UInt32) : BOOL
fun certGetSubjectCertificateFromStore(hCertStore : LibC::Void*, dwCertEncodingType : LibC::UInt32, pCertId : CERT_INFO*) : CERT_CONTEXT*
fun certEnumCertificatesInStore(hCertStore : LibC::Void*, pPrevCertContext : CERT_CONTEXT*) : CERT_CONTEXT*
fun certFindCertificateInStore(hCertStore : LibC::Void*, dwCertEncodingType : LibC::UInt32, dwFindFlags : LibC::UInt32, dwFindType : CERT_FIND_FLAGS, pvFindPara : LibC::Void*, pPrevCertContext : CERT_CONTEXT*) : CERT_CONTEXT*
fun certGetIssuerCertificateFromStore(hCertStore : LibC::Void*, pSubjectContext : CERT_CONTEXT*, pPrevIssuerContext : CERT_CONTEXT*, pdwFlags : LibC::UInt32*) : CERT_CONTEXT*
fun certVerifySubjectCertificateContext(pSubject : CERT_CONTEXT*, pIssuer : CERT_CONTEXT*, pdwFlags : LibC::UInt32*) : BOOL
fun certDuplicateCertificateContext(pCertContext : CERT_CONTEXT*) : CERT_CONTEXT*
fun certCreateCertificateContext(dwCertEncodingType : LibC::UInt32, pbCertEncoded : LibC::Byte*, cbCertEncoded : LibC::UInt32) : CERT_CONTEXT*
fun certFreeCertificateContext(pCertContext : CERT_CONTEXT*) : BOOL
fun certSetCertificateContextProperty(pCertContext : CERT_CONTEXT*, dwPropId : LibC::UInt32, dwFlags : LibC::UInt32, pvData : LibC::Void*) : BOOL
fun certGetCertificateContextProperty(pCertContext : CERT_CONTEXT*, dwPropId : LibC::UInt32, pvData : LibC::Void*, pcbData : LibC::UInt32*) : BOOL
fun certEnumCertificateContextProperties(pCertContext : CERT_CONTEXT*, dwPropId : LibC::UInt32) : LibC::UInt32
fun certSetCertificateContextPropertiesFromCTLEntry(pCertContext : CERT_CONTEXT*, pCtlEntry : CTL_ENTRY*, dwFlags : LibC::UInt32) : BOOL
fun certGetCRLFromStore(hCertStore : LibC::Void*, pIssuerContext : CERT_CONTEXT*, pPrevCrlContext : CRL_CONTEXT*, pdwFlags : LibC::UInt32*) : CRL_CONTEXT*
fun certEnumCRLsInStore(hCertStore : LibC::Void*, pPrevCrlContext : CRL_CONTEXT*) : CRL_CONTEXT*
fun certFindCRLInStore(hCertStore : LibC::Void*, dwCertEncodingType : LibC::UInt32, dwFindFlags : LibC::UInt32, dwFindType : LibC::UInt32, pvFindPara : LibC::Void*, pPrevCrlContext : CRL_CONTEXT*) : CRL_CONTEXT*
fun certDuplicateCRLContext(pCrlContext : CRL_CONTEXT*) : CRL_CONTEXT*
fun certCreateCRLContext(dwCertEncodingType : LibC::UInt32, pbCrlEncoded : LibC::Byte*, cbCrlEncoded : LibC::UInt32) : CRL_CONTEXT*
fun certFreeCRLContext(pCrlContext : CRL_CONTEXT*) : BOOL
fun certSetCRLContextProperty(pCrlContext : CRL_CONTEXT*, dwPropId : LibC::UInt32, dwFlags : LibC::UInt32, pvData : LibC::Void*) : BOOL
fun certGetCRLContextProperty(pCrlContext : CRL_CONTEXT*, dwPropId : LibC::UInt32, pvData : LibC::Void*, pcbData : LibC::UInt32*) : BOOL
fun certEnumCRLContextProperties(pCrlContext : CRL_CONTEXT*, dwPropId : LibC::UInt32) : LibC::UInt32
fun certFindCertificateInCRL(pCert : CERT_CONTEXT*, pCrlContext : CRL_CONTEXT*, dwFlags : LibC::UInt32, pvReserved : LibC::Void*, ppCrlEntry : CRL_ENTRY**) : BOOL
fun certIsValidCRLForCertificate(pCert : CERT_CONTEXT*, pCrl : CRL_CONTEXT*, dwFlags : LibC::UInt32, pvReserved : LibC::Void*) : BOOL
fun certAddEncodedCertificateToStore(hCertStore : LibC::Void*, dwCertEncodingType : LibC::UInt32, pbCertEncoded : LibC::Byte*, cbCertEncoded : LibC::UInt32, dwAddDisposition : LibC::UInt32, ppCertContext : CERT_CONTEXT**) : BOOL
fun certAddCertificateContextToStore(hCertStore : LibC::Void*, pCertContext : CERT_CONTEXT*, dwAddDisposition : LibC::UInt32, ppStoreContext : CERT_CONTEXT**) : BOOL
fun certAddSerializedElementToStore(hCertStore : LibC::Void*, pbElement : LibC::Byte*, cbElement : LibC::UInt32, dwAddDisposition : LibC::UInt32, dwFlags : LibC::UInt32, dwContextTypeFlags : LibC::UInt32, pdwContextType : LibC::UInt32*, ppvContext : LibC::Void**) : BOOL
fun certDeleteCertificateFromStore(pCertContext : CERT_CONTEXT*) : BOOL
fun certAddEncodedCRLToStore(hCertStore : LibC::Void*, dwCertEncodingType : LibC::UInt32, pbCrlEncoded : LibC::Byte*, cbCrlEncoded : LibC::UInt32, dwAddDisposition : LibC::UInt32, ppCrlContext : CRL_CONTEXT**) : BOOL
fun certAddCRLContextToStore(hCertStore : LibC::Void*, pCrlContext : CRL_CONTEXT*, dwAddDisposition : LibC::UInt32, ppStoreContext : CRL_CONTEXT**) : BOOL
fun certDeleteCRLFromStore(pCrlContext : CRL_CONTEXT*) : BOOL
fun certSerializeCertificateStoreElement(pCertContext : CERT_CONTEXT*, dwFlags : LibC::UInt32, pbElement : LibC::Byte*, pcbElement : LibC::UInt32*) : BOOL
fun certSerializeCRLStoreElement(pCrlContext : CRL_CONTEXT*, dwFlags : LibC::UInt32, pbElement : LibC::Byte*, pcbElement : LibC::UInt32*) : BOOL
fun certDuplicateCTLContext(pCtlContext : CTL_CONTEXT*) : CTL_CONTEXT*
fun certCreateCTLContext(dwMsgAndCertEncodingType : LibC::UInt32, pbCtlEncoded : LibC::Byte*, cbCtlEncoded : LibC::UInt32) : CTL_CONTEXT*
fun certFreeCTLContext(pCtlContext : CTL_CONTEXT*) : BOOL
fun certSetCTLContextProperty(pCtlContext : CTL_CONTEXT*, dwPropId : LibC::UInt32, dwFlags : LibC::UInt32, pvData : LibC::Void*) : BOOL
fun certGetCTLContextProperty(pCtlContext : CTL_CONTEXT*, dwPropId : LibC::UInt32, pvData : LibC::Void*, pcbData : LibC::UInt32*) : BOOL
fun certEnumCTLContextProperties(pCtlContext : CTL_CONTEXT*, dwPropId : LibC::UInt32) : LibC::UInt32
fun certEnumCTLsInStore(hCertStore : LibC::Void*, pPrevCtlContext : CTL_CONTEXT*) : CTL_CONTEXT*
fun certFindSubjectInCTL(dwEncodingType : LibC::UInt32, dwSubjectType : LibC::UInt32, pvSubject : LibC::Void*, pCtlContext : CTL_CONTEXT*, dwFlags : LibC::UInt32) : CTL_ENTRY*
fun certFindCTLInStore(hCertStore : LibC::Void*, dwMsgAndCertEncodingType : LibC::UInt32, dwFindFlags : LibC::UInt32, dwFindType : CERT_FIND_TYPE, pvFindPara : LibC::Void*, pPrevCtlContext : CTL_CONTEXT*) : CTL_CONTEXT*
fun certAddEncodedCTLToStore(hCertStore : LibC::Void*, dwMsgAndCertEncodingType : LibC::UInt32, pbCtlEncoded : LibC::Byte*, cbCtlEncoded : LibC::UInt32, dwAddDisposition : LibC::UInt32, ppCtlContext : CTL_CONTEXT**) : BOOL
fun certAddCTLContextToStore(hCertStore : LibC::Void*, pCtlContext : CTL_CONTEXT*, dwAddDisposition : LibC::UInt32, ppStoreContext : CTL_CONTEXT**) : BOOL
fun certSerializeCTLStoreElement(pCtlContext : CTL_CONTEXT*, dwFlags : LibC::UInt32, pbElement : LibC::Byte*, pcbElement : LibC::UInt32*) : BOOL
fun certDeleteCTLFromStore(pCtlContext : CTL_CONTEXT*) : BOOL
fun certAddCertificateLinkToStore(hCertStore : LibC::Void*, pCertContext : CERT_CONTEXT*, dwAddDisposition : LibC::UInt32, ppStoreContext : CERT_CONTEXT**) : BOOL
fun certAddCRLLinkToStore(hCertStore : LibC::Void*, pCrlContext : CRL_CONTEXT*, dwAddDisposition : LibC::UInt32, ppStoreContext : CRL_CONTEXT**) : BOOL
fun certAddCTLLinkToStore(hCertStore : LibC::Void*, pCtlContext : CTL_CONTEXT*, dwAddDisposition : LibC::UInt32, ppStoreContext : CTL_CONTEXT**) : BOOL
fun certAddStoreToCollection(hCollectionStore : LibC::Void*, hSiblingStore : LibC::Void*, dwUpdateFlags : LibC::UInt32, dwPriority : LibC::UInt32) : BOOL
fun certRemoveStoreFromCollection(hCollectionStore : LibC::Void*, hSiblingStore : LibC::Void*) : LibC::Void
fun certControlStore(hCertStore : LibC::Void*, dwFlags : CERT_CONTROL_STORE_FLAGS, dwCtrlType : LibC::UInt32, pvCtrlPara : LibC::Void*) : BOOL
fun certSetStoreProperty(hCertStore : LibC::Void*, dwPropId : LibC::UInt32, dwFlags : LibC::UInt32, pvData : LibC::Void*) : BOOL
fun certGetStoreProperty(hCertStore : LibC::Void*, dwPropId : LibC::UInt32, pvData : LibC::Void*, pcbData : LibC::UInt32*) : BOOL
fun certCreateContext(dwContextType : LibC::UInt32, dwEncodingType : LibC::UInt32, pbEncoded : LibC::Byte*, cbEncoded : LibC::UInt32, dwFlags : LibC::UInt32, pCreatePara : CERT_CREATE_CONTEXT_PARA*) : LibC::Void*
fun certRegisterSystemStore(pvSystemStore : LibC::Void*, dwFlags : LibC::UInt32, pStoreInfo : CERT_SYSTEM_STORE_INFO*, pvReserved : LibC::Void*) : BOOL
fun certRegisterPhysicalStore(pvSystemStore : LibC::Void*, dwFlags : LibC::UInt32, pwszStoreName : PWSTR, pStoreInfo : CERT_PHYSICAL_STORE_INFO*, pvReserved : LibC::Void*) : BOOL
fun certUnregisterSystemStore(pvSystemStore : LibC::Void*, dwFlags : LibC::UInt32) : BOOL
fun certUnregisterPhysicalStore(pvSystemStore : LibC::Void*, dwFlags : LibC::UInt32, pwszStoreName : PWSTR) : BOOL
fun certEnumSystemStoreLocation(dwFlags : LibC::UInt32, pvArg : LibC::Void*, pfnEnum : PFN_CERT_ENUM_SYSTEM_STORE_LOCATION) : BOOL
fun certEnumSystemStore(dwFlags : LibC::UInt32, pvSystemStoreLocationPara : LibC::Void*, pvArg : LibC::Void*, pfnEnum : PFN_CERT_ENUM_SYSTEM_STORE) : BOOL
fun certEnumPhysicalStore(pvSystemStore : LibC::Void*, dwFlags : LibC::UInt32, pvArg : LibC::Void*, pfnEnum : PFN_CERT_ENUM_PHYSICAL_STORE) : BOOL
fun certGetEnhancedKeyUsage(pCertContext : CERT_CONTEXT*, dwFlags : LibC::UInt32, pUsage : CTL_USAGE*, pcbUsage : LibC::UInt32*) : BOOL
fun certSetEnhancedKeyUsage(pCertContext : CERT_CONTEXT*, pUsage : CTL_USAGE*) : BOOL
fun certAddEnhancedKeyUsageIdentifier(pCertContext : CERT_CONTEXT*, pszUsageIdentifier : PSTR) : BOOL
fun certRemoveEnhancedKeyUsageIdentifier(pCertContext : CERT_CONTEXT*, pszUsageIdentifier : PSTR) : BOOL
fun cryptMsgSignCTL(dwMsgEncodingType : LibC::UInt32, pbCtlContent : LibC::Byte*, cbCtlContent : LibC::UInt32, pSignInfo : CMSG_SIGNED_ENCODE_INFO*, dwFlags : LibC::UInt32, pbEncoded : LibC::Byte*, pcbEncoded : LibC::UInt32*) : BOOL
fun cryptMsgEncodeAndSignCTL(dwMsgEncodingType : LibC::UInt32, pCtlInfo : CTL_INFO*, pSignInfo : CMSG_SIGNED_ENCODE_INFO*, dwFlags : LibC::UInt32, pbEncoded : LibC::Byte*, pcbEncoded : LibC::UInt32*) : BOOL
fun certFindSubjectInSortedCTL(pSubjectIdentifier : CRYPTOAPI_BLOB*, pCtlContext : CTL_CONTEXT*, dwFlags : LibC::UInt32, pvReserved : LibC::Void*, pEncodedAttributes : CRYPTOAPI_BLOB*) : BOOL
fun certEnumSubjectInSortedCTL(pCtlContext : CTL_CONTEXT*, ppvNextSubject : LibC::Void**, pSubjectIdentifier : CRYPTOAPI_BLOB*, pEncodedAttributes : CRYPTOAPI_BLOB*) : BOOL
fun certVerifyCTLUsage(dwEncodingType : LibC::UInt32, dwSubjectType : LibC::UInt32, pvSubject : LibC::Void*, pSubjectUsage : CTL_USAGE*, dwFlags : LibC::UInt32, pVerifyUsagePara : CTL_VERIFY_USAGE_PARA*, pVerifyUsageStatus : CTL_VERIFY_USAGE_STATUS*) : BOOL
fun certCompareIntegerBlob(pInt1 : CRYPTOAPI_BLOB*, pInt2 : CRYPTOAPI_BLOB*) : BOOL
fun certCompareCertificate(dwCertEncodingType : LibC::UInt32, pCertId1 : CERT_INFO*, pCertId2 : CERT_INFO*) : BOOL
fun certCompareCertificateName(dwCertEncodingType : LibC::UInt32, pCertName1 : CRYPTOAPI_BLOB*, pCertName2 : CRYPTOAPI_BLOB*) : BOOL
fun certIsRDNAttrsInCertificateName(dwCertEncodingType : LibC::UInt32, dwFlags : LibC::UInt32, pCertName : CRYPTOAPI_BLOB*, pRDN : CERT_RDN*) : BOOL
fun certComparePublicKeyInfo(dwCertEncodingType : LibC::UInt32, pPublicKey1 : CERT_PUBLIC_KEY_INFO*, pPublicKey2 : CERT_PUBLIC_KEY_INFO*) : BOOL
fun certGetPublicKeyLength(dwCertEncodingType : LibC::UInt32, pPublicKey : CERT_PUBLIC_KEY_INFO*) : LibC::UInt32
fun cryptVerifyCertificateSignature(hCryptProv : LibC::UIint*, dwCertEncodingType : LibC::UInt32, pbEncoded : LibC::Byte*, cbEncoded : LibC::UInt32, pPublicKey : CERT_PUBLIC_KEY_INFO*) : BOOL
fun cryptVerifyCertificateSignatureEx(hCryptProv : LibC::UIint*, dwCertEncodingType : LibC::UInt32, dwSubjectType : LibC::UInt32, pvSubject : LibC::Void*, dwIssuerType : LibC::UInt32, pvIssuer : LibC::Void*, dwFlags : CRYPT_VERIFY_CERT_FLAGS, pvExtra : LibC::Void*) : BOOL
fun certIsStrongHashToSign(pStrongSignPara : CERT_STRONG_SIGN_PARA*, pwszCNGHashAlgid : PWSTR, pSigningCert : CERT_CONTEXT*) : BOOL
fun cryptHashToBeSigned(hCryptProv : LibC::UIint*, dwCertEncodingType : LibC::UInt32, pbEncoded : LibC::Byte*, cbEncoded : LibC::UInt32, pbComputedHash : LibC::Byte*, pcbComputedHash : LibC::UInt32*) : BOOL
fun cryptHashCertificate(hCryptProv : LibC::UIint*, algid : LibC::UInt32, dwFlags : LibC::UInt32, pbEncoded : LibC::Byte*, cbEncoded : LibC::UInt32, pbComputedHash : LibC::Byte*, pcbComputedHash : LibC::UInt32*) : BOOL
fun cryptHashCertificate2(pwszCNGHashAlgid : PWSTR, dwFlags : LibC::UInt32, pvReserved : LibC::Void*, pbEncoded : LibC::Byte*, cbEncoded : LibC::UInt32, pbComputedHash : LibC::Byte*, pcbComputedHash : LibC::UInt32*) : BOOL
fun cryptSignCertificate(hCryptProvOrNCryptKey : LibC::UIint*, dwKeySpec : LibC::UInt32, dwCertEncodingType : LibC::UInt32, pbEncodedToBeSigned : LibC::Byte*, cbEncodedToBeSigned : LibC::UInt32, pSignatureAlgorithm : CRYPT_ALGORITHM_IDENTIFIER*, pvHashAuxInfo : LibC::Void*, pbSignature : LibC::Byte*, pcbSignature : LibC::UInt32*) : BOOL
fun cryptSignAndEncodeCertificate(hCryptProvOrNCryptKey : LibC::UIint*, dwKeySpec : CERT_KEY_SPEC, dwCertEncodingType : LibC::UInt32, lpszStructType : PSTR, pvStructInfo : LibC::Void*, pSignatureAlgorithm : CRYPT_ALGORITHM_IDENTIFIER*, pvHashAuxInfo : LibC::Void*, pbEncoded : LibC::Byte*, pcbEncoded : LibC::UInt32*) : BOOL
fun certVerifyTimeValidity(pTimeToVerify : FILETIME*, pCertInfo : CERT_INFO*) : LibC::Int32
fun certVerifyCRLTimeValidity(pTimeToVerify : FILETIME*, pCrlInfo : CRL_INFO*) : LibC::Int32
fun certVerifyValidityNesting(pSubjectInfo : CERT_INFO*, pIssuerInfo : CERT_INFO*) : BOOL
fun certAlgIdToOID(dwAlgId : LibC::UInt32) : PSTR
fun certOIDToAlgId(pszObjId : PSTR) : LibC::UInt32
fun certFindRDNAttr(pszObjId : PSTR, pName : CERT_NAME_INFO*) : CERT_RDN_ATTR*
fun certGetIntendedKeyUsage(dwCertEncodingType : LibC::UInt32, pCertInfo : CERT_INFO*, pbKeyUsage : LibC::Byte*, cbKeyUsage : LibC::UInt32) : BOOL
fun cryptInstallDefaultContext(hCryptProv : LibC::UIint*, dwDefaultType : CRYPT_DEFAULT_CONTEXT_TYPE, pvDefaultPara : LibC::Void*, dwFlags : CRYPT_DEFAULT_CONTEXT_FLAGS, pvReserved : LibC::Void*, phDefaultContext : LibC::Void**) : BOOL
fun cryptUninstallDefaultContext(hDefaultContext : LibC::Void*, dwFlags : LibC::UInt32, pvReserved : LibC::Void*) : BOOL
fun cryptExportPublicKeyInfo(hCryptProvOrNCryptKey : LibC::UIint*, dwKeySpec : LibC::UInt32, dwCertEncodingType : LibC::UInt32, pInfo : CERT_PUBLIC_KEY_INFO*, pcbInfo : LibC::UInt32*) : BOOL
fun cryptExportPublicKeyInfoEx(hCryptProvOrNCryptKey : LibC::UIint*, dwKeySpec : LibC::UInt32, dwCertEncodingType : LibC::UInt32, pszPublicKeyObjId : PSTR, dwFlags : LibC::UInt32, pvAuxInfo : LibC::Void*, pInfo : CERT_PUBLIC_KEY_INFO*, pcbInfo : LibC::UInt32*) : BOOL
fun cryptExportPublicKeyInfoFromBCryptKeyHandle(hBCryptKey : BCRYPT_KEY_HANDLE, dwCertEncodingType : LibC::UInt32, pszPublicKeyObjId : PSTR, dwFlags : LibC::UInt32, pvAuxInfo : LibC::Void*, pInfo : CERT_PUBLIC_KEY_INFO*, pcbInfo : LibC::UInt32*) : BOOL
fun cryptImportPublicKeyInfo(hCryptProv : LibC::UIint*, dwCertEncodingType : LibC::UInt32, pInfo : CERT_PUBLIC_KEY_INFO*, phKey : LibC::UIint**) : BOOL
fun cryptImportPublicKeyInfoEx(hCryptProv : LibC::UIint*, dwCertEncodingType : LibC::UInt32, pInfo : CERT_PUBLIC_KEY_INFO*, aiKeyAlg : LibC::UInt32, dwFlags : LibC::UInt32, pvAuxInfo : LibC::Void*, phKey : LibC::UIint**) : BOOL
fun cryptImportPublicKeyInfoEx2(dwCertEncodingType : LibC::UInt32, pInfo : CERT_PUBLIC_KEY_INFO*, dwFlags : CRYPT_IMPORT_PUBLIC_KEY_FLAGS, pvAuxInfo : LibC::Void*, phKey : BCRYPT_KEY_HANDLE*) : BOOL
fun cryptAcquireCertificatePrivateKey(pCert : CERT_CONTEXT*, dwFlags : CRYPT_ACQUIRE_FLAGS, pvParameters : LibC::Void*, phCryptProvOrNCryptKey : LibC::UIint**, pdwKeySpec : CERT_KEY_SPEC*, pfCallerFreeProvOrNCryptKey : BOOL*) : BOOL
fun cryptFindCertificateKeyProvInfo(pCert : CERT_CONTEXT*, dwFlags : CRYPT_FIND_FLAGS, pvReserved : LibC::Void*) : BOOL
fun cryptImportPKCS8(sPrivateKeyAndParams : CRYPT_PKCS8_IMPORT_PARAMS, dwFlags : CRYPT_KEY_FLAGS, phCryptProv : LibC::UIint**, pvAuxInfo : LibC::Void*) : BOOL
fun cryptExportPKCS8(hCryptProv : LibC::UIint*, dwKeySpec : LibC::UInt32, pszPrivateKeyObjId : PSTR, dwFlags : LibC::UInt32, pvAuxInfo : LibC::Void*, pbPrivateKeyBlob : LibC::Byte*, pcbPrivateKeyBlob : LibC::UInt32*) : BOOL
fun cryptHashPublicKeyInfo(hCryptProv : LibC::UIint*, algid : LibC::UInt32, dwFlags : LibC::UInt32, dwCertEncodingType : LibC::UInt32, pInfo : CERT_PUBLIC_KEY_INFO*, pbComputedHash : LibC::Byte*, pcbComputedHash : LibC::UInt32*) : BOOL
fun certStrToNameA(dwCertEncodingType : LibC::UInt32, pszX500 : PSTR, dwStrType : CERT_STRING_TYPE, pvReserved : LibC::Void*, pbEncoded : LibC::Byte*, pcbEncoded : LibC::UInt32*, ppszError : PSTR*) : BOOL
fun certStrToNameW(dwCertEncodingType : LibC::UInt32, pszX500 : PWSTR, dwStrType : CERT_STRING_TYPE, pvReserved : LibC::Void*, pbEncoded : LibC::Byte*, pcbEncoded : LibC::UInt32*, ppszError : PWSTR*) : BOOL
fun cryptVerifyMessageSignature(pVerifyPara : CRYPT_VERIFY_MESSAGE_PARA*, dwSignerIndex : LibC::UInt32, pbSignedBlob : LibC::Byte*, cbSignedBlob : LibC::UInt32, pbDecoded : LibC::Byte*, pcbDecoded : LibC::UInt32*, ppSignerCert : CERT_CONTEXT**) : BOOL
fun cryptGetMessageSignerCount(dwMsgEncodingType : LibC::UInt32, pbSignedBlob : LibC::Byte*, cbSignedBlob : LibC::UInt32) : LibC::Int32
fun cryptGetMessageCertificates(dwMsgAndCertEncodingType : LibC::UInt32, hCryptProv : LibC::UIint*, dwFlags : LibC::UInt32, pbSignedBlob : LibC::Byte*, cbSignedBlob : LibC::UInt32) : LibC::Void*
fun cryptDecryptMessage(pDecryptPara : CRYPT_DECRYPT_MESSAGE_PARA*, pbEncryptedBlob : LibC::Byte*, cbEncryptedBlob : LibC::UInt32, pbDecrypted : LibC::Byte*, pcbDecrypted : LibC::UInt32*, ppXchgCert : CERT_CONTEXT**) : BOOL
fun cryptDecryptAndVerifyMessageSignature(pDecryptPara : CRYPT_DECRYPT_MESSAGE_PARA*, pVerifyPara : CRYPT_VERIFY_MESSAGE_PARA*, dwSignerIndex : LibC::UInt32, pbEncryptedBlob : LibC::Byte*, cbEncryptedBlob : LibC::UInt32, pbDecrypted : LibC::Byte*, pcbDecrypted : LibC::UInt32*, ppXchgCert : CERT_CONTEXT**, ppSignerCert : CERT_CONTEXT**) : BOOL
fun cryptDecodeMessage(dwMsgTypeFlags : LibC::UInt32, pDecryptPara : CRYPT_DECRYPT_MESSAGE_PARA*, pVerifyPara : CRYPT_VERIFY_MESSAGE_PARA*, dwSignerIndex : LibC::UInt32, pbEncodedBlob : LibC::Byte*, cbEncodedBlob : LibC::UInt32, dwPrevInnerContentType : LibC::UInt32, pdwMsgType : LibC::UInt32*, pdwInnerContentType : LibC::UInt32*, pbDecoded : LibC::Byte*, pcbDecoded : LibC::UInt32*, ppXchgCert : CERT_CONTEXT**, ppSignerCert : CERT_CONTEXT**) : BOOL
fun cryptVerifyMessageHash(pHashPara : CRYPT_HASH_MESSAGE_PARA*, pbHashedBlob : LibC::Byte*, cbHashedBlob : LibC::UInt32, pbToBeHashed : LibC::Byte*, pcbToBeHashed : LibC::UInt32*, pbComputedHash : LibC::Byte*, pcbComputedHash : LibC::UInt32*) : BOOL
fun cryptSignMessageWithKey(pSignPara : CRYPT_KEY_SIGN_MESSAGE_PARA*, pbToBeSigned : LibC::Byte*, cbToBeSigned : LibC::UInt32, pbSignedBlob : LibC::Byte*, pcbSignedBlob : LibC::UInt32*) : BOOL
fun cryptVerifyMessageSignatureWithKey(pVerifyPara : CRYPT_KEY_VERIFY_MESSAGE_PARA*, pPublicKeyInfo : CERT_PUBLIC_KEY_INFO*, pbSignedBlob : LibC::Byte*, cbSignedBlob : LibC::UInt32, pbDecoded : LibC::Byte*, pcbDecoded : LibC::UInt32*) : BOOL
fun certOpenSystemStoreA(hProv : LibC::UIint*, szSubsystemProtocol : PSTR) : LibC::Void*
fun certOpenSystemStoreW(hProv : LibC::UIint*, szSubsystemProtocol : PWSTR) : LibC::Void*
fun certAddEncodedCertificateToSystemStoreA(szCertStoreName : PSTR, pbCertEncoded : LibC::Byte*, cbCertEncoded : LibC::UInt32) : BOOL
fun certAddEncodedCertificateToSystemStoreW(szCertStoreName : PWSTR, pbCertEncoded : LibC::Byte*, cbCertEncoded : LibC::UInt32) : BOOL
fun findCertsByIssuer(pCertChains : CERT_CHAIN*, pcbCertChains : LibC::UInt32*, pcCertChains : LibC::UInt32*, pbEncodedIssuerName : LibC::Byte*, cbEncodedIssuerName : LibC::UInt32, pwszPurpose : PWSTR, dwKeySpec : LibC::UInt32) : HRESULT
fun cryptQueryObject(dwObjectType : CERT_QUERY_OBJECT_TYPE, pvObject : LibC::Void*, dwExpectedContentTypeFlags : CERT_QUERY_CONTENT_TYPE_FLAGS, dwExpectedFormatTypeFlags : CERT_QUERY_FORMAT_TYPE_FLAGS, dwFlags : LibC::UInt32, pdwMsgAndCertEncodingType : CERT_QUERY_ENCODING_TYPE*, pdwContentType : CERT_QUERY_CONTENT_TYPE*, pdwFormatType : CERT_QUERY_FORMAT_TYPE*, phCertStore : LibC::Void**, phMsg : LibC::Void**, ppvContext : LibC::Void**) : BOOL
fun cryptMemAlloc(cbSize : LibC::UInt32) : LibC::Void*
fun cryptMemRealloc(pv : LibC::Void*, cbSize : LibC::UInt32) : LibC::Void*
fun cryptMemFree(pv : LibC::Void*) : LibC::Void
fun cryptCreateAsyncHandle(dwFlags : LibC::UInt32, phAsync : HCRYPTASYNC*) : BOOL
fun cryptSetAsyncParam(hAsync : HCRYPTASYNC, pszParamOid : PSTR, pvParam : LibC::Void*, pfnFree : PFN_CRYPT_ASYNC_PARAM_FREE_FUNC) : BOOL
fun cryptGetAsyncParam(hAsync : HCRYPTASYNC, pszParamOid : PSTR, ppvParam : LibC::Void**, ppfnFree : PFN_CRYPT_ASYNC_PARAM_FREE_FUNC*) : BOOL
fun cryptCloseAsyncHandle(hAsync : HCRYPTASYNC) : BOOL
fun cryptRetrieveObjectByUrlA(pszUrl : PSTR, pszObjectOid : PSTR, dwRetrievalFlags : LibC::UInt32, dwTimeout : LibC::UInt32, ppvObject : LibC::Void**, hAsyncRetrieve : HCRYPTASYNC, pCredentials : CRYPT_CREDENTIALS*, pvVerify : LibC::Void*, pAuxInfo : CRYPT_RETRIEVE_AUX_INFO*) : BOOL
fun cryptRetrieveObjectByUrlW(pszUrl : PWSTR, pszObjectOid : PSTR, dwRetrievalFlags : LibC::UInt32, dwTimeout : LibC::UInt32, ppvObject : LibC::Void**, hAsyncRetrieve : HCRYPTASYNC, pCredentials : CRYPT_CREDENTIALS*, pvVerify : LibC::Void*, pAuxInfo : CRYPT_RETRIEVE_AUX_INFO*) : BOOL
fun cryptInstallCancelRetrieval(pfnCancel : PFN_CRYPT_CANCEL_RETRIEVAL, pvArg : LibC::Void*, dwFlags : LibC::UInt32, pvReserved : LibC::Void*) : BOOL
fun cryptUninstallCancelRetrieval(dwFlags : LibC::UInt32, pvReserved : LibC::Void*) : BOOL
fun cryptGetObjectUrl(pszUrlOid : PSTR, pvPara : LibC::Void*, dwFlags : CRYPT_GET_URL_FLAGS, pUrlArray : CRYPT_URL_ARRAY*, pcbUrlArray : LibC::UInt32*, pUrlInfo : CRYPT_URL_INFO*, pcbUrlInfo : LibC::UInt32*, pvReserved : LibC::Void*) : BOOL
fun certCreateSelfSignCertificate(hCryptProvOrNCryptKey : LibC::UIint*, pSubjectIssuerBlob : CRYPTOAPI_BLOB*, dwFlags : CERT_CREATE_SELFSIGN_FLAGS, pKeyProvInfo : CRYPT_KEY_PROV_INFO*, pSignatureAlgorithm : CRYPT_ALGORITHM_IDENTIFIER*, pStartTime : SYSTEMTIME*, pEndTime : SYSTEMTIME*, pExtensions : CERT_EXTENSIONS*) : CERT_CONTEXT*
fun cryptGetKeyIdentifierProperty(pKeyIdentifier : CRYPTOAPI_BLOB*, dwPropId : LibC::UInt32, dwFlags : LibC::UInt32, pwszComputerName : PWSTR, pvReserved : LibC::Void*, pvData : LibC::Void*, pcbData : LibC::UInt32*) : BOOL
fun cryptSetKeyIdentifierProperty(pKeyIdentifier : CRYPTOAPI_BLOB*, dwPropId : LibC::UInt32, dwFlags : LibC::UInt32, pwszComputerName : PWSTR, pvReserved : LibC::Void*, pvData : LibC::Void*) : BOOL
fun cryptCreateKeyIdentifierFromCSP(dwCertEncodingType : LibC::UInt32, pszPubKeyOID : PSTR, pPubKeyStruc : PUBLICKEYSTRUC*, cbPubKeyStruc : LibC::UInt32, dwFlags : LibC::UInt32, pvReserved : LibC::Void*, pbHash : LibC::Byte*, pcbHash : LibC::UInt32*) : BOOL
fun certCreateCertificateChainEngine(pConfig : CERT_CHAIN_ENGINE_CONFIG*, phChainEngine : HCERTCHAINENGINE*) : BOOL
fun certFreeCertificateChainEngine(hChainEngine : HCERTCHAINENGINE) : LibC::Void
fun certResyncCertificateChainEngine(hChainEngine : HCERTCHAINENGINE) : BOOL
fun certGetCertificateChain(hChainEngine : HCERTCHAINENGINE, pCertContext : CERT_CONTEXT*, pTime : FILETIME*, hAdditionalStore : LibC::Void*, pChainPara : CERT_CHAIN_PARA*, dwFlags : LibC::UInt32, pvReserved : LibC::Void*, ppChainContext : CERT_CHAIN_CONTEXT**) : BOOL
fun certFreeCertificateChain(pChainContext : CERT_CHAIN_CONTEXT*) : LibC::Void
fun certDuplicateCertificateChain(pChainContext : CERT_CHAIN_CONTEXT*) : CERT_CHAIN_CONTEXT*
fun certFindChainInStore(hCertStore : LibC::Void*, dwCertEncodingType : LibC::UInt32, dwFindFlags : CERT_FIND_CHAIN_IN_STORE_FLAGS, dwFindType : LibC::UInt32, pvFindPara : LibC::Void*, pPrevChainContext : CERT_CHAIN_CONTEXT*) : CERT_CHAIN_CONTEXT*
fun certVerifyCertificateChainPolicy(pszPolicyOID : PSTR, pChainContext : CERT_CHAIN_CONTEXT*, pPolicyPara : CERT_CHAIN_POLICY_PARA*, pPolicyStatus : CERT_CHAIN_POLICY_STATUS*) : BOOL
fun pFXImportCertStore(pPFX : CRYPTOAPI_BLOB*, szPassword : PWSTR, dwFlags : CRYPT_KEY_FLAGS) : LibC::Void*
fun pFXIsPFXBlob(pPFX : CRYPTOAPI_BLOB*) : BOOL
fun pFXVerifyPassword(pPFX : CRYPTOAPI_BLOB*, szPassword : PWSTR, dwFlags : LibC::UInt32) : BOOL
fun pFXExportCertStoreEx(hStore : LibC::Void*, pPFX : CRYPTOAPI_BLOB*, szPassword : PWSTR, pvPara : LibC::Void*, dwFlags : LibC::UInt32) : BOOL
fun pFXExportCertStore(hStore : LibC::Void*, pPFX : CRYPTOAPI_BLOB*, szPassword : PWSTR, dwFlags : LibC::UInt32) : BOOL
fun certOpenServerOcspResponse(pChainContext : CERT_CHAIN_CONTEXT*, dwFlags : LibC::UInt32, pOpenPara : CERT_SERVER_OCSP_RESPONSE_OPEN_PARA*) : LibC::Void*
fun certAddRefServerOcspResponse(hServerOcspResponse : LibC::Void*) : LibC::Void
fun certCloseServerOcspResponse(hServerOcspResponse : LibC::Void*, dwFlags : LibC::UInt32) : LibC::Void
fun certGetServerOcspResponseContext(hServerOcspResponse : LibC::Void*, dwFlags : LibC::UInt32, pvReserved : LibC::Void*) : CERT_SERVER_OCSP_RESPONSE_CONTEXT*
fun certAddRefServerOcspResponseContext(pServerOcspResponseContext : CERT_SERVER_OCSP_RESPONSE_CONTEXT*) : LibC::Void
fun certFreeServerOcspResponseContext(pServerOcspResponseContext : CERT_SERVER_OCSP_RESPONSE_CONTEXT*) : LibC::Void
fun certRetrieveLogoOrBiometricInfo(pCertContext : CERT_CONTEXT*, lpszLogoOrBiometricType : PSTR, dwRetrievalFlags : LibC::UInt32, dwTimeout : LibC::UInt32, dwFlags : LibC::UInt32, pvReserved : LibC::Void*, ppbData : LibC::Byte**, pcbData : LibC::UInt32*, ppwszMimeType : PWSTR*) : BOOL
fun certFreeCertificateChainList(prgpSelection : CERT_CHAIN_CONTEXT**) : LibC::Void
fun cryptRetrieveTimeStamp(wszUrl : PWSTR, dwRetrievalFlags : LibC::UInt32, dwTimeout : LibC::UInt32, pszHashId : PSTR, pPara : CRYPT_TIMESTAMP_PARA*, pbData : LibC::Byte*, cbData : LibC::UInt32, ppTsContext : CRYPT_TIMESTAMP_CONTEXT**, ppTsSigner : CERT_CONTEXT**, phStore : LibC::Void**) : BOOL
fun cryptVerifyTimeStampSignature(pbTSContentInfo : LibC::Byte*, cbTSContentInfo : LibC::UInt32, pbData : LibC::Byte*, cbData : LibC::UInt32, hAdditionalStore : LibC::Void*, ppTsContext : CRYPT_TIMESTAMP_CONTEXT**, ppTsSigner : CERT_CONTEXT**, phStore : LibC::Void**) : BOOL
fun certIsWeakHash(dwHashUseType : LibC::UInt32, pwszCNGHashAlgid : PWSTR, dwChainFlags : LibC::UInt32, pSignerChainContext : CERT_CHAIN_CONTEXT*, pTimeStamp : FILETIME*, pwszFileName : PWSTR) : BOOL
fun cryptProtectData(pDataIn : CRYPTOAPI_BLOB*, szDataDescr : PWSTR, pOptionalEntropy : CRYPTOAPI_BLOB*, pvReserved : LibC::Void*, pPromptStruct : CRYPTPROTECT_PROMPTSTRUCT*, dwFlags : LibC::UInt32, pDataOut : CRYPTOAPI_BLOB*) : BOOL
fun cryptUnprotectData(pDataIn : CRYPTOAPI_BLOB*, ppszDataDescr : PWSTR*, pOptionalEntropy : CRYPTOAPI_BLOB*, pvReserved : LibC::Void*, pPromptStruct : CRYPTPROTECT_PROMPTSTRUCT*, dwFlags : LibC::UInt32, pDataOut : CRYPTOAPI_BLOB*) : BOOL
fun cryptUpdateProtectedState(pOldSid : PSID, pwszOldPassword : PWSTR, dwFlags : LibC::UInt32, pdwSuccessCount : LibC::UInt32*, pdwFailureCount : LibC::UInt32*) : BOOL
fun cryptProtectMemory(pDataIn : LibC::Void*, cbDataIn : LibC::UInt32, dwFlags : LibC::UInt32) : BOOL
fun cryptUnprotectMemory(pDataIn : LibC::Void*, cbDataIn : LibC::UInt32, dwFlags : LibC::UInt32) : BOOL
fun nCryptRegisterProtectionDescriptorName(pwszName : PWSTR, pwszDescriptorString : PWSTR, dwFlags : LibC::UInt32) : LibC::Int32
fun nCryptCreateProtectionDescriptor(pwszDescriptorString : PWSTR, dwFlags : LibC::UInt32, phDescriptor : NCRYPT_DESCRIPTOR_HANDLE*) : LibC::Int32
fun nCryptCloseProtectionDescriptor(hDescriptor : NCRYPT_DESCRIPTOR_HANDLE) : LibC::Int32
fun nCryptGetProtectionDescriptorInfo(hDescriptor : NCRYPT_DESCRIPTOR_HANDLE, pMemPara : NCRYPT_ALLOC_PARA*, dwInfoType : LibC::UInt32, ppvInfo : LibC::Void**) : LibC::Int32
fun nCryptProtectSecret(hDescriptor : NCRYPT_DESCRIPTOR_HANDLE, dwFlags : LibC::UInt32, pbData : LibC::Byte*, cbData : LibC::UInt32, pMemPara : NCRYPT_ALLOC_PARA*, hWnd : HWND, ppbProtectedBlob : LibC::Byte**, pcbProtectedBlob : LibC::UInt32*) : LibC::Int32
fun nCryptUnprotectSecret(phDescriptor : NCRYPT_DESCRIPTOR_HANDLE*, dwFlags : NCRYPT_FLAGS, pbProtectedBlob : LibC::Byte*, cbProtectedBlob : LibC::UInt32, pMemPara : NCRYPT_ALLOC_PARA*, hWnd : HWND, ppbData : LibC::Byte**, pcbData : LibC::UInt32*) : LibC::Int32
fun nCryptStreamOpenToProtect(hDescriptor : NCRYPT_DESCRIPTOR_HANDLE, dwFlags : LibC::UInt32, hWnd : HWND, pStreamInfo : NCRYPT_PROTECT_STREAM_INFO*, phStream : NCRYPT_STREAM_HANDLE*) : LibC::Int32
fun nCryptStreamOpenToUnprotect(pStreamInfo : NCRYPT_PROTECT_STREAM_INFO*, dwFlags : LibC::UInt32, hWnd : HWND, phStream : NCRYPT_STREAM_HANDLE*) : LibC::Int32
fun nCryptStreamOpenToUnprotectEx(pStreamInfo : NCRYPT_PROTECT_STREAM_INFO_EX*, dwFlags : LibC::UInt32, hWnd : HWND, phStream : NCRYPT_STREAM_HANDLE*) : LibC::Int32
fun nCryptStreamUpdate(hStream : NCRYPT_STREAM_HANDLE, pbData : LibC::Byte*, cbData : LibC::UIint*, fFinal : BOOL) : LibC::Int32
fun nCryptStreamClose(hStream : NCRYPT_STREAM_HANDLE) : LibC::Int32
fun cryptXmlClose(hCryptXml : LibC::Void*) : HRESULT
fun cryptXmlGetTransforms(ppConfig : CRYPT_XML_TRANSFORM_CHAIN_CONFIG**) : HRESULT
fun cryptXmlDigestReference(hReference : LibC::Void*, dwFlags : LibC::UInt32, pDataProviderIn : CRYPT_XML_DATA_PROVIDER*) : HRESULT
fun cryptXmlSetHMACSecret(hSignature : LibC::Void*, pbSecret : LibC::Byte*, cbSecret : LibC::UInt32) : HRESULT
fun cryptXmlSign(hSignature : LibC::Void*, hKey : LibC::UIint*, dwKeySpec : CERT_KEY_SPEC, dwFlags : CRYPT_XML_FLAGS, dwKeyInfoSpec : CRYPT_XML_KEYINFO_SPEC, pvKeyInfoSpec : LibC::Void*, pSignatureMethod : CRYPT_XML_ALGORITHM*, pCanonicalization : CRYPT_XML_ALGORITHM*) : HRESULT
fun cryptXmlImportPublicKey(dwFlags : CRYPT_XML_FLAGS, pKeyValue : CRYPT_XML_KEY_VALUE*, phKey : BCRYPT_KEY_HANDLE*) : HRESULT
fun cryptXmlVerifySignature(hSignature : LibC::Void*, hKey : BCRYPT_KEY_HANDLE, dwFlags : CRYPT_XML_FLAGS) : HRESULT
fun cryptXmlGetDocContext(hCryptXml : LibC::Void*, ppStruct : CRYPT_XML_DOC_CTXT**) : HRESULT
fun cryptXmlGetSignature(hCryptXml : LibC::Void*, ppStruct : CRYPT_XML_SIGNATURE**) : HRESULT
fun cryptXmlGetReference(hCryptXml : LibC::Void*, ppStruct : CRYPT_XML_REFERENCE**) : HRESULT
fun cryptXmlGetStatus(hCryptXml : LibC::Void*, pStatus : CRYPT_XML_STATUS*) : HRESULT
fun cryptXmlGetAlgorithmInfo(pXmlAlgorithm : CRYPT_XML_ALGORITHM*, dwFlags : CRYPT_XML_FLAGS, ppAlgInfo : CRYPT_XML_ALGORITHM_INFO**) : HRESULT
fun cryptXmlFindAlgorithmInfo(dwFindByType : LibC::UInt32, pvFindBy : LibC::Void*, dwGroupId : LibC::UInt32, dwFlags : LibC::UInt32) : CRYPT_XML_ALGORITHM_INFO*
fun cryptXmlEnumAlgorithmInfo(dwGroupId : LibC::UInt32, dwFlags : LibC::UInt32, pvArg : LibC::Void*, pfnEnumAlgInfo : PFN_CRYPT_XML_ENUM_ALG_INFO) : HRESULT
fun manageCardSpace() : HRESULT
fun importInformationCard(fileName : PWSTR) : HRESULT
fun encrypt(hCrypto : INFORMATIONCARD_CRYPTO_HANDLE*, fOAEP : BOOL, cbInData : LibC::UInt32, pInData : LibC::Byte*, pcbOutData : LibC::UInt32*, ppOutData : LibC::Byte**) : HRESULT
fun decrypt(hCrypto : INFORMATIONCARD_CRYPTO_HANDLE*, fOAEP : BOOL, cbInData : LibC::UInt32, pInData : LibC::Byte*, pcbOutData : LibC::UInt32*, ppOutData : LibC::Byte**) : HRESULT
fun signHash(hCrypto : INFORMATIONCARD_CRYPTO_HANDLE*, cbHash : LibC::UInt32, pHash : LibC::Byte*, hashAlgOid : PWSTR, pcbSig : LibC::UInt32*, ppSig : LibC::Byte**) : HRESULT
fun verifyHash(hCrypto : INFORMATIONCARD_CRYPTO_HANDLE*, cbHash : LibC::UInt32, pHash : LibC::Byte*, hashAlgOid : PWSTR, cbSig : LibC::UInt32, pSig : LibC::Byte*, pfVerified : BOOL*) : HRESULT
fun getCryptoTransform(hSymmetricCrypto : INFORMATIONCARD_CRYPTO_HANDLE*, mode : LibC::UInt32, padding : PaddingMode, feedbackSize : LibC::UInt32, direction : Direction, cbIV : LibC::UInt32, pIV : LibC::Byte*, pphTransform : INFORMATIONCARD_CRYPTO_HANDLE**) : HRESULT
fun getKeyedHash(hSymmetricCrypto : INFORMATIONCARD_CRYPTO_HANDLE*, pphHash : INFORMATIONCARD_CRYPTO_HANDLE**) : HRESULT
fun transformBlock(hCrypto : INFORMATIONCARD_CRYPTO_HANDLE*, cbInData : LibC::UInt32, pInData : LibC::Byte*, pcbOutData : LibC::UInt32*, ppOutData : LibC::Byte**) : HRESULT
fun transformFinalBlock(hCrypto : INFORMATIONCARD_CRYPTO_HANDLE*, cbInData : LibC::UInt32, pInData : LibC::Byte*, pcbOutData : LibC::UInt32*, ppOutData : LibC::Byte**) : HRESULT
fun hashCore(hCrypto : INFORMATIONCARD_CRYPTO_HANDLE*, cbInData : LibC::UInt32, pInData : LibC::Byte*) : HRESULT
fun hashFinal(hCrypto : INFORMATIONCARD_CRYPTO_HANDLE*, cbInData : LibC::UInt32, pInData : LibC::Byte*, pcbOutData : LibC::UInt32*, ppOutData : LibC::Byte**) : HRESULT
fun freeToken(pAllocMemory : GENERIC_XML_TOKEN*) : BOOL
fun closeCryptoHandle(hCrypto : INFORMATIONCARD_CRYPTO_HANDLE*) : HRESULT
fun generateDerivedKey(hCrypto : INFORMATIONCARD_CRYPTO_HANDLE*, cbLabel : LibC::UInt32, pLabel : LibC::Byte*, cbNonce : LibC::UInt32, pNonce : LibC::Byte*, derivedKeyLength : LibC::UInt32, offset : LibC::UInt32, algId : PWSTR, pcbKey : LibC::UInt32*, ppKey : LibC::Byte**) : HRESULT
fun getBrowserToken(dwParamType : LibC::UInt32, pParam : LibC::Void*, pcbToken : LibC::UInt32*, ppToken : LibC::Byte**) : HRESULT

  end
